<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>AlsoCouldBeApply:DependencyGraph.kt$DependencyGraph$also</ID>
    <ID>AlsoCouldBeApply:FunProxyArgumentRetrievalSpec.kt$FunProxyArgumentRetrievalSpec$also</ID>
    <ID>AlsoCouldBeApply:KMockFactoriesSpec.kt$KMockFactoriesSpec$also</ID>
    <ID>AlsoCouldBeApply:KMockFactoryEntryPointGenerator.kt$KMockFactoryEntryPointGenerator$also</ID>
    <ID>AlsoCouldBeApply:KMockGenerator.kt$KMockGenerator$also</ID>
    <ID>AlsoCouldBeApply:KMockMocksSpec.kt$KMockMocksSpec$also</ID>
    <ID>AlsoCouldBeApply:KMockMultiInterfaceMocksSpec.kt$KMockMultiInterfaceMocksSpec$also</ID>
    <ID>AlsoCouldBeApply:KMockProcessor.kt$KMockProcessor$also</ID>
    <ID>AlsoCouldBeApply:KMockReceiverGenerator.kt$KMockReceiverGenerator$also</ID>
    <ID>AlsoCouldBeApply:KmpTestTaskChain.kt$KmpTestTaskChain$also</ID>
    <ID>AlsoCouldBeApply:OperationSpec.kt$OperationSpec$also</ID>
    <ID>AlsoCouldBeApply:Operators.kt$also</ID>
    <ID>AlsoCouldBeApply:SpyContainerSpec.kt$SpyContainerSpec$also</ID>
    <ID>BracesOnWhenStatements:Actual.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:ActualFactory.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:Alias.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:AnnotationFilter.kt$AnnotationFilter$-&gt;</ID>
    <ID>BracesOnWhenStatements:ArgumentMapping.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:ArgumentMatcher.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:BaseSourceAggregator.kt$BaseSourceAggregator$-&gt;</ID>
    <ID>BracesOnWhenStatements:CommonActual.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:Generic.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:KMockFactoryEntryPointGenerator.kt$KMockFactoryEntryPointGenerator$-&gt;</ID>
    <ID>BracesOnWhenStatements:KMockGenerics.kt$KMockGenerics$-&gt;</ID>
    <ID>BracesOnWhenStatements:KMockOptionExtractor.kt$KMockOptionExtractor$-&gt;</ID>
    <ID>BracesOnWhenStatements:KMockProxyAccessMethodGenerator.kt$KMockProxyAccessMethodGenerator$-&gt;</ID>
    <ID>BracesOnWhenStatements:KMockProxyNameSelector.kt$KMockProxyNameSelector$-&gt;</ID>
    <ID>BracesOnWhenStatements:NoSpy.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:ParameterTypeMapping.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:Platform.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:ProxyResolving.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:RegularActualFactory.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:Shared.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:SharedActual.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:SingleSourceSetConfigurator.kt$SingleSourceSetConfigurator$-&gt;</ID>
    <ID>BracesOnWhenStatements:SourceSetValidator.kt$SourceSetValidator$-&gt;</ID>
    <ID>BracesOnWhenStatements:SpiedRegularActualFactory.kt$-&gt;</ID>
    <ID>BracesOnWhenStatements:TypeParameterResolver.kt$-&gt;</ID>
    <ID>CollapsibleIfStatements:Dangerfile.df.kts$if (isFeatureBranch) { if (!isFeatureTitle) { fail( "Title is not following our pattern:\n" + "\nAdd|Change|Remove|Fix|Bump|Security {Feature title}" ) } }</ID>
    <ID>CollapsibleIfStatements:Dangerfile.df.kts$if (isReleaseBranch) { if (!isReleaseTitle) { fail( "Title is not following our pattern: Prepare Release major.minor.patch (1.2.0)" ) } }</ID>
    <ID>ConstructorParameterNaming:AndSpec.kt$AndSpec.MockConstraint$val _toString: String = ""</ID>
    <ID>ConstructorParameterNaming:NotSpec.kt$NotSpec.StubConstraint$val _toString: String</ID>
    <ID>ConstructorParameterNaming:OrSpec.kt$OrSpec.MockConstraint$val _toString: String = ""</ID>
    <ID>CyclomaticComplexMethod:KMockGenerator.kt$KMockGenerator$private fun buildMock( mockName: String, enableSpy: Boolean, parents: TemplateMultiSource?, template: KSClassDeclaration, generics: Map&lt;String, List&lt;KSTypeReference&gt;&gt;?, relaxer: Relaxer?, ): TypeSpec</ID>
    <ID>CyclomaticComplexMethod:KMockOptionExtractor.kt$KMockOptionExtractor$override fun convertOptions( kspRawOptions: Map&lt;String, String&gt;, ): Options</ID>
    <ID>CyclomaticComplexMethod:eq.kt$eq$override fun matches(actual: Any?): Boolean</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:KMockProxyNameSelector.kt$KMockProxyNameSelector$(_, type, _, isVararg)</ID>
    <ID>DestructuringDeclarationWithTooManyEntries:KMockProxyNameSelector.kt$KMockProxyNameSelector$(_, type, _, usePlural)</ID>
    <ID>EqualsOnSignatureLine:Access.kt$AccessMock$=</ID>
    <ID>EqualsOnSignatureLine:AsyncFun.kt$AsyncFunMock$=</ID>
    <ID>EqualsOnSignatureLine:Common.kt$CommonMock$=</ID>
    <ID>EqualsOnSignatureLine:GenericMock.kt$CommonGenericMultiMock$=</ID>
    <ID>EqualsOnSignatureLine:GenericMock.kt$PlatformGenericMultiMock$=</ID>
    <ID>EqualsOnSignatureLine:GenericMock.kt$SharedGenericMultiMock$=</ID>
    <ID>EqualsOnSignatureLine:Overloaded.kt$OverloadedMock$=</ID>
    <ID>EqualsOnSignatureLine:Platform.kt$PlatformMock$=</ID>
    <ID>EqualsOnSignatureLine:PreventResolving.kt$PreventResolvingMock$=</ID>
    <ID>EqualsOnSignatureLine:Shared.kt$SharedMock$=</ID>
    <ID>EqualsOnSignatureLine:SpiedGenericMock.kt$CommonGenericMultiMock$=</ID>
    <ID>EqualsOnSignatureLine:SpiedGenericMock.kt$PlatformGenericMultiMock$=</ID>
    <ID>EqualsOnSignatureLine:SpiedGenericMock.kt$SharedGenericMultiMock$=</ID>
    <ID>EqualsOnSignatureLine:SuperType.kt$InheritedMock$=</ID>
    <ID>ExceptionRaisedInUnexpectedLocation:NonIntrusiveFunConfiguratorSpec.kt$NonIntrusiveFunConfiguratorSpec.MockOfMocks$override fun equals(other: Any?): Boolean</ID>
    <ID>FunctionNaming:FunProxy.kt$FunProxy$private fun _setReturnValues(values: List&lt;ReturnValue&gt;)</ID>
    <ID>FunctionNaming:FunProxy.kt$FunProxy$private fun _setThrowables(values: List&lt;Throwable&gt;)</ID>
    <ID>InvalidPackageDeclaration:Access.kt$package mock.template.typealiaz</ID>
    <ID>InvalidPackageDeclaration:Actual.kt$package generatorTest</ID>
    <ID>InvalidPackageDeclaration:ActualFactory.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:Alias.kt$package generatorTest</ID>
    <ID>InvalidPackageDeclaration:Alias.kt$package mock.template.spy</ID>
    <ID>InvalidPackageDeclaration:AsyncFun.kt$package mock.template.access</ID>
    <ID>InvalidPackageDeclaration:BuildIn.kt$package mock.template.access</ID>
    <ID>InvalidPackageDeclaration:Collision.kt$package mock.template.buildIn</ID>
    <ID>InvalidPackageDeclaration:Collision.kt$package mock.template.overloaded</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.`property`</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.alias</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.async</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.buildIn</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.generic</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.kmock</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.methodreceiver</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.mixedannotation</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.overloaded</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.propertyreceiver</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.relaxed</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.renamed</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.spy</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.sync</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package mock.template.typealiaz</ID>
    <ID>InvalidPackageDeclaration:Common.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:CommonActual.kt$package generatorTest</ID>
    <ID>InvalidPackageDeclaration:CommonExpect.kt$package generatorTest</ID>
    <ID>InvalidPackageDeclaration:CommonInterface.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:ExpectedFactory.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:Generic.kt$package generatorTest</ID>
    <ID>InvalidPackageDeclaration:GenericActualFactory.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:GenericExpectFactory.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:GenericInterface.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:GenericMock.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:Interface.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:NoBuildIns.kt$package mock.template.buildIn</ID>
    <ID>InvalidPackageDeclaration:NoSpy.kt$package generatorTest</ID>
    <ID>InvalidPackageDeclaration:Overloaded.kt$package mock.template.access</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package generatorTest</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.`property`</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.alias</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.async</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.buildIn</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.generic</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.kmock</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.methodreceiver</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.mixedannotation</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.overloaded</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.propertyreceiver</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.relaxed</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.renamed</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.spy</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.sync</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package mock.template.typealiaz</ID>
    <ID>InvalidPackageDeclaration:Platform.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:PlatformInterface.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:PreventResolving.kt$package mock.template.typealiaz</ID>
    <ID>InvalidPackageDeclaration:Property.kt$package mock.template.access</ID>
    <ID>InvalidPackageDeclaration:Receiver.kt$package mock.template.typealiaz</ID>
    <ID>InvalidPackageDeclaration:Refined.kt$package mock.template.overloaded</ID>
    <ID>InvalidPackageDeclaration:RegularActualFactory.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:RegularExpectFactory.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:RegularInterface.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:RegularMock.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:Relaxed.kt$package mock.template.methodreceiver</ID>
    <ID>InvalidPackageDeclaration:Relaxed.kt$package mock.template.propertyreceiver</ID>
    <ID>InvalidPackageDeclaration:Relaxed.kt$package mock.template.spy</ID>
    <ID>InvalidPackageDeclaration:Relaxed.kt$package mock.template.typealiaz</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.`property`</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.alias</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.async</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.buildIn</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.customshared</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.generic</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.kmock</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.mixedannotation</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.overloaded</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.relaxed</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.renamed</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.spy</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.sync</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package mock.template.typealiaz</ID>
    <ID>InvalidPackageDeclaration:Shared.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:Shared1Expect.kt$package generatorTest</ID>
    <ID>InvalidPackageDeclaration:Shared2Expect.kt$package generatorTest</ID>
    <ID>InvalidPackageDeclaration:SharedActual.kt$package generatorTest</ID>
    <ID>InvalidPackageDeclaration:SharedExpect.kt$package generatorTest</ID>
    <ID>InvalidPackageDeclaration:SharedInterface.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:Spied.kt$package mock.template.methodreceiver</ID>
    <ID>InvalidPackageDeclaration:Spied.kt$package mock.template.propertyreceiver</ID>
    <ID>InvalidPackageDeclaration:SpiedGenericActualFactory.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:SpiedGenericExpectFactory.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:SpiedGenericInterface.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:SpiedGenericMock.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:SpiedReceiverMock.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:SpiedRegularActualFactory.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:SpiedRegularExpectFactory.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:SpiedRegularMock.kt$package multi</ID>
    <ID>InvalidPackageDeclaration:SuperType.kt$package mock.template.methodreceiver</ID>
    <ID>InvalidPackageDeclaration:SuperType.kt$package mock.template.propertyreceiver</ID>
    <ID>InvalidPackageDeclaration:SuperType.kt$package mock.template.typealiaz</ID>
    <ID>InvalidPackageDeclaration:SuperTyped.kt$package mock.template.generic</ID>
    <ID>InvalidPackageDeclaration:SyncFun.kt$package mock.template.access</ID>
    <ID>LargeClass:KMockProxyAccessMethodGenerator.kt$KMockProxyAccessMethodGenerator : ProxyAccessMethodGenerator</ID>
    <ID>LongMethod:KMockFactoryGenerator.kt$KMockFactoryGenerator$private fun writeFactoryImplementation( templateSources: List&lt;TemplateSource&gt;, templateMultiSources: List&lt;TemplateMultiSource&gt;, relaxer: Relaxer?, dependencies: List&lt;KSFile&gt;, )</ID>
    <ID>LongMethod:KMockGenerator.kt$KMockGenerator$private fun buildMock( mockName: String, enableSpy: Boolean, parents: TemplateMultiSource?, template: KSClassDeclaration, generics: Map&lt;String, List&lt;KSTypeReference&gt;&gt;?, relaxer: Relaxer?, ): TypeSpec</ID>
    <ID>LongMethod:KMockOptionExtractor.kt$KMockOptionExtractor$override fun convertOptions( kspRawOptions: Map&lt;String, String&gt;, ): Options</ID>
    <ID>LongMethod:KMockProcessorProvider.kt$KMockProcessorProvider$override fun create(environment: SymbolProcessorEnvironment): SymbolProcessor</ID>
    <ID>LongMethod:ParameterTypeMapping.kt$private fun KSType.mapParameterType( visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, functionScope: Set&lt;String&gt;, resolved: Map&lt;String, GenericDeclaration&gt;, typeArguments: List&lt;KSTypeArgument&gt;, rootNullability: Boolean, typeParameterResolver: TypeParameterResolver, ): TypeName</ID>
    <ID>LongParameterList:Hint.kt$( type0: KClass&lt;Type0&gt; = Type0::class, type1: KClass&lt;Type1&gt; = Type1::class, type2: KClass&lt;Type2&gt; = Type2::class, type3: KClass&lt;Type3&gt; = Type3::class, type4: KClass&lt;Type4&gt; = Type4::class, type5: KClass&lt;Type5&gt; = Type5::class, )</ID>
    <ID>LongParameterList:Hint.kt$( type0: KClass&lt;Type0&gt; = Type0::class, type1: KClass&lt;Type1&gt; = Type1::class, type2: KClass&lt;Type2&gt; = Type2::class, type3: KClass&lt;Type3&gt; = Type3::class, type4: KClass&lt;Type4&gt; = Type4::class, type5: KClass&lt;Type5&gt; = Type5::class, type6: KClass&lt;Type6&gt; = Type6::class, )</ID>
    <ID>LongParameterList:Hint.kt$( type0: KClass&lt;Type0&gt; = Type0::class, type1: KClass&lt;Type1&gt; = Type1::class, type2: KClass&lt;Type2&gt; = Type2::class, type3: KClass&lt;Type3&gt; = Type3::class, type4: KClass&lt;Type4&gt; = Type4::class, type5: KClass&lt;Type5&gt; = Type5::class, type6: KClass&lt;Type6&gt; = Type6::class, type7: KClass&lt;Type7&gt; = Type7::class, )</ID>
    <ID>LongParameterList:Hint.kt$( type0: KClass&lt;Type0&gt; = Type0::class, type1: KClass&lt;Type1&gt; = Type1::class, type2: KClass&lt;Type2&gt; = Type2::class, type3: KClass&lt;Type3&gt; = Type3::class, type4: KClass&lt;Type4&gt; = Type4::class, type5: KClass&lt;Type5&gt; = Type5::class, type6: KClass&lt;Type6&gt; = Type6::class, type7: KClass&lt;Type7&gt; = Type7::class, type8: KClass&lt;Type8&gt; = Type8::class, )</ID>
    <ID>LongParameterList:Hint.kt$( type0: KClass&lt;Type0&gt; = Type0::class, type1: KClass&lt;Type1&gt; = Type1::class, type2: KClass&lt;Type2&gt; = Type2::class, type3: KClass&lt;Type3&gt; = Type3::class, type4: KClass&lt;Type4&gt; = Type4::class, type5: KClass&lt;Type5&gt; = Type5::class, type6: KClass&lt;Type6&gt; = Type6::class, type7: KClass&lt;Type7&gt; = Type7::class, type8: KClass&lt;Type8&gt; = Type8::class, type9: KClass&lt;Type9&gt; = Type9::class, )</ID>
    <ID>LongParameterList:Hint.kt$( type0: KClass&lt;Type0&gt; = Type0::class, type1: KClass&lt;Type1&gt; = Type1::class, type2: KClass&lt;Type2&gt; = Type2::class, type3: KClass&lt;Type3&gt; = Type3::class, type4: KClass&lt;Type4&gt; = Type4::class, type5: KClass&lt;Type5&gt; = Type5::class, type6: KClass&lt;Type6&gt; = Type6::class, type7: KClass&lt;Type7&gt; = Type7::class, type8: KClass&lt;Type8&gt; = Type8::class, type9: KClass&lt;Type9&gt; = Type9::class, type10: KClass&lt;Type10&gt; = Type10::class, )</ID>
    <ID>LongParameterList:Hint.kt$( type0: KClass&lt;Type0&gt; = Type0::class, type1: KClass&lt;Type1&gt; = Type1::class, type2: KClass&lt;Type2&gt; = Type2::class, type3: KClass&lt;Type3&gt; = Type3::class, type4: KClass&lt;Type4&gt; = Type4::class, type5: KClass&lt;Type5&gt; = Type5::class, type6: KClass&lt;Type6&gt; = Type6::class, type7: KClass&lt;Type7&gt; = Type7::class, type8: KClass&lt;Type8&gt; = Type8::class, type9: KClass&lt;Type9&gt; = Type9::class, type10: KClass&lt;Type10&gt; = Type10::class, type11: KClass&lt;Type11&gt; = Type11::class, )</ID>
    <ID>LongParameterList:Hint.kt$( type0: KClass&lt;Type0&gt; = Type0::class, type1: KClass&lt;Type1&gt; = Type1::class, type2: KClass&lt;Type2&gt; = Type2::class, type3: KClass&lt;Type3&gt; = Type3::class, type4: KClass&lt;Type4&gt; = Type4::class, type5: KClass&lt;Type5&gt; = Type5::class, type6: KClass&lt;Type6&gt; = Type6::class, type7: KClass&lt;Type7&gt; = Type7::class, type8: KClass&lt;Type8&gt; = Type8::class, type9: KClass&lt;Type9&gt; = Type9::class, type10: KClass&lt;Type10&gt; = Type10::class, type11: KClass&lt;Type11&gt; = Type11::class, type12: KClass&lt;Type12&gt; = Type12::class, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, arg10: Arg10, arg11: Arg11, arg12: Arg12, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, arg10: Arg10, arg11: Arg11, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, arg10: Arg10, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, arg10: Arg10, arg11: Arg11, arg12: Arg12, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, arg10: Arg10, arg11: Arg11, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, arg10: Arg10, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockFactoryEntryPointGenerator.kt$KMockFactoryEntryPointGenerator$( private val isKmp: Boolean, private val rootPackage: String, private val spyContainer: SpyContainer, private val spiesOnly: Boolean, private val utils: MockFactoryGeneratorUtil, private val genericResolver: GenericResolver, private val codeGenerator: KmpCodeGenerator, )</ID>
    <ID>LongParameterList:KMockFactoryGenerator.kt$KMockFactoryGenerator$( private val logger: KSPLogger, private val rootPackage: String, private val isKmp: Boolean, private val spyContainer: SpyContainer, private val spiesOnly: Boolean, private val nonGenericGenerator: MockFactoryWithoutGenerics, private val genericGenerator: MockFactoryWithGenerics, private val multiInterfaceGenerator: MockFactoryMultiInterface, private val utils: MockFactoryGeneratorUtil, private val codeGenerator: CodeGenerator, )</ID>
    <ID>LongParameterList:KMockFactoryMultiInterfaceGenerator.kt$KMockFactoryMultiInterfaceGenerator$( mockType: TypeVariableName, spyType: TypeVariableName, boundaries: List&lt;TypeName&gt;, templateSource: TemplateMultiSource, generics: List&lt;TypeVariableName&gt;, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockGenerator.kt$KMockGenerator$( mockName: String, enableSpy: Boolean, parents: TemplateMultiSource?, template: KSClassDeclaration, generics: Map&lt;String, List&lt;KSTypeReference&gt;&gt;?, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockGenerator.kt$KMockGenerator$( private val logger: KSPLogger, freezeOnDefault: Boolean, private val enableProxyAccessMethodGenerator: Boolean, private val spyContainer: SpyContainer, private val useBuildInProxiesOn: Set&lt;String&gt;, private val codeGenerator: KmpCodeGenerator, private val genericsResolver: GenericResolver, private val nameCollector: ProxyNameCollector, private val parentFinder: ParentFinder, private val propertyGenerator: PropertyGenerator, private val methodGenerator: MethodGenerator, private val buildInGenerator: BuildInMethodGenerator, private val receiverGenerator: ReceiverGenerator, private val proxyAccessMethodGeneratorFactory: ProxyAccessMethodGeneratorFactory, private val preventResolvingOfAliases: Set&lt;String&gt;, )</ID>
    <ID>LongParameterList:KMockGenerator.kt$KMockGenerator$( spyType: TypeName, proxyNameCollector: MutableList&lt;String&gt;, proxyAccessMethodGenerator: ProxyAccessMethodGenerator, ksFunction: KSFunctionDeclaration, qualifier: String, enableSpy: Boolean, classScopeGenerics: Map&lt;String, List&lt;TypeName&gt;&gt;?, typeResolver: TypeParameterResolver, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockGenerator.kt$KMockGenerator$( spyType: TypeName, proxyNameCollector: MutableList&lt;String&gt;, proxyAccessMethodGenerator: ProxyAccessMethodGenerator, ksProperty: KSPropertyDeclaration, qualifier: String, classScopeGenerics: Map&lt;String, List&lt;TypeName&gt;&gt;?, typeResolver: TypeParameterResolver, enableSpy: Boolean, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockGenerator.kt$KMockGenerator$( template: KSClassDeclaration, parents: TemplateMultiSource?, templateName: String, packageName: String, generics: Map&lt;String, List&lt;KSTypeReference&gt;&gt;?, dependencies: List&lt;KSFile&gt;, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockGenerics.kt$KMockGenerics$( visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, allGenerics: Set&lt;String&gt;, rootNullability: Boolean, resolved: Map&lt;String, GenericDeclaration&gt;, typeParameterResolver: TypeParameterResolver, )</ID>
    <ID>LongParameterList:KMockGenerics.kt$KMockGenerics$( visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, allGenerics: Set&lt;String&gt;, types: List&lt;KSTypeReference&gt;, resolved: Map&lt;String, GenericDeclaration&gt;, typeParameterResolver: TypeParameterResolver, )</ID>
    <ID>LongParameterList:KMockMethodGenerator.kt$KMockMethodGenerator$( method: FunSpec.Builder, proxyInfo: ProxyInfo, enableSpy: Boolean, arguments: Array&lt;MemberArgumentTypeInfo&gt;, parameter: List&lt;TypeName&gt;, returnType: MemberReturnTypeInfo, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockMethodGenerator.kt$KMockMethodGenerator$( proxyInfo: ProxyInfo, generics: Map&lt;String, List&lt;KSTypeReference&gt;&gt;?, isSuspending: Boolean, enableSpy: Boolean, arguments: Array&lt;MemberArgumentTypeInfo&gt;, parameter: List&lt;TypeName&gt;, returnType: MemberReturnTypeInfo, typeResolver: TypeParameterResolver, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockMultiSourceAggregator.kt$KMockMultiSourceAggregator$( indicator: String, symbol: KSAnnotated, annotation: KSAnnotation?, illAnnotated: MutableList&lt;KSAnnotated&gt;, typeContainer: MutableMap&lt;String, MutableList&lt;Triple&lt;String, List&lt;KSFile&gt;, List&lt;KSType&gt;&gt;&gt;&gt;, fileCollector: MutableList&lt;KSFile&gt;, )</ID>
    <ID>LongParameterList:KMockProcessor.kt$KMockProcessor$( private val logger: KSPLogger, private val isKmp: Boolean, private val codeGenerator: KmpCodeGenerator, private val interfaceGenerator: MultiInterfaceBinder, private val mockGenerator: MockGenerator, private val factoryGenerator: MockFactoryGenerator, private val entryPointGenerator: MockFactoryEntryPointGenerator, private val multiSourceAggregator: MultiSourceAggregator, private val singleSourceAggregator: SingleSourceAggregator, private val relaxationAggregator: RelaxationAggregator, private val filter: SourceFilter, )</ID>
    <ID>LongParameterList:KMockProcessor.kt$KMockProcessor$( resolver: Resolver, kmockSingleAnnotated: List&lt;KSAnnotated&gt;, kmockMultiAnnotated: List&lt;KSAnnotated&gt;, commonAggregated: Aggregated&lt;TemplateSource&gt;, sharedAggregated: Aggregated&lt;TemplateSource&gt;, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockPropertyGenerator.kt$KMockPropertyGenerator$( property: PropertySpec.Builder, proxyInfo: ProxyInfo, propertyType: TypeName, returnType: MemberReturnTypeInfo, isMutable: Boolean, enableSpy: Boolean, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockPropertyGenerator.kt$KMockPropertyGenerator$( proxyInfo: ProxyInfo, propertyType: TypeName, returnType: MemberReturnTypeInfo, isMutable: Boolean, enableSpy: Boolean, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockProxyAccessMethodGenerator.kt$KMockProxyAccessMethodGenerator$( methodName: String, proxyName: String, proxySignature: ParameterizedTypeName, sideEffect: LambdaTypeName, typeParameter: List&lt;TypeVariableName&gt;, mappedTypeParameter: Map&lt;String, TypeVariableName&gt;, indicator: String, )</ID>
    <ID>LongParameterList:KMockProxyAccessMethodGenerator.kt$KMockProxyAccessMethodGenerator$( methodName: String, typeParameter: List&lt;TypeVariableName&gt;, arguments: List&lt;ParameterSpec&gt;, returnType: TypeName, proxySideEffect: LambdaTypeName, proxyName: String, )</ID>
    <ID>LongParameterList:KMockProxyAccessMethodGenerator.kt$KMockProxyAccessMethodGenerator$( methodName: String, typeParameter: List&lt;TypeVariableName&gt;, arguments: List&lt;ParameterSpec&gt;, returnType: TypeName, proxySideEffect: LambdaTypeName, proxyName: String, suspending: Boolean, addToRegistry: ( methodName: String, proxyName: String, proxySignature: ParameterizedTypeName, sideEffect: LambdaTypeName, typeParameter: List&lt;TypeVariableName&gt;, mappedTypeParameter: Map&lt;String, TypeVariableName&gt;, indicator: String, ) -&gt; Unit, )</ID>
    <ID>LongParameterList:KMockReceiverGenerator.kt$KMockReceiverGenerator$( getterProxy: ProxyInfo, setterProxy: ProxyInfo?, enableSpy: Boolean, receiver: MemberArgumentTypeInfo, propertyType: MemberReturnTypeInfo, typeParameter: List&lt;TypeVariableName&gt;, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockReceiverGenerator.kt$KMockReceiverGenerator$( method: FunSpec.Builder, proxyInfo: ProxyInfo, enableSpy: Boolean, typeParameter: List&lt;TypeName&gt;, arguments: Array&lt;MemberArgumentTypeInfo&gt;, returnType: MemberReturnTypeInfo, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockReceiverGenerator.kt$KMockReceiverGenerator$( proxyInfo: ProxyInfo, generics: Map&lt;String, List&lt;KSTypeReference&gt;&gt;?, isSuspending: Boolean, enableSpy: Boolean, receiverInfo: MemberArgumentTypeInfo, arguments: Array&lt;MemberArgumentTypeInfo&gt;, typeParameter: List&lt;TypeName&gt;, returnType: MemberReturnTypeInfo, typeResolver: TypeParameterResolver, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:KMockReceiverGenerator.kt$KMockReceiverGenerator$( qualifier: String, propertyName: String, isMutable: Boolean, receiverInfo: MemberArgumentTypeInfo, proxyGenerics: Map&lt;String, GenericDeclaration&gt;?, classScopeGenerics: Map&lt;String, List&lt;TypeName&gt;&gt;?, receiverTypeResolver: TypeParameterResolver, )</ID>
    <ID>LongParameterList:KMockSingleSourceAggregator.kt$KMockSingleSourceAggregator$( indicator: String, symbol: KSAnnotated, annotation: KSAnnotation?, illAnnotated: MutableList&lt;KSAnnotated&gt;, typeContainer: MutableMap&lt;String, Pair&lt;MutableList&lt;KSFile&gt;, MutableList&lt;KSType&gt;&gt;&gt;, fileCollector: MutableList&lt;KSFile&gt;, )</ID>
    <ID>LongParameterList:KmpSourceSetsConfigurator.kt$KmpSourceSetsConfigurator$( sourceSetName: String, platformName: String, dependencies: Set&lt;KotlinSourceSet&gt;, kspCollector: MutableMap&lt;String, String&gt;, dependencyCollector: MutableMap&lt;String, Set&lt;String&gt;&gt;, metaDependencies: MutableMap&lt;String, Set&lt;String&gt;&gt;, dependencyHandler: DependencyHandler, )</ID>
    <ID>LongParameterList:ParameterTypeMapping.kt$( arguments: List&lt;KSTypeArgument&gt;, argumentsDecorator: ArgumentMappingDecorator?, rootNullability: Boolean, markedAsNullable: Boolean, visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, functionScope: Set&lt;String&gt;, resolved: Map&lt;String, GenericDeclaration&gt;, typeParameterResolver: TypeParameterResolver, )</ID>
    <ID>LongParameterList:ParameterTypeMapping.kt$( arguments: List&lt;KSTypeArgument&gt;, classScope: Set&lt;String&gt;, functionScope: Set&lt;String&gt;, rootNullability: Boolean, visited: Set&lt;String&gt;, resolved: Map&lt;String, GenericDeclaration&gt;, typeParameterResolver: TypeParameterResolver, )</ID>
    <ID>LongParameterList:ParameterTypeMapping.kt$( type: KSTypeReference, visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, functionScope: Set&lt;String&gt;, rootNullability: Boolean, resolved: Map&lt;String, GenericDeclaration&gt;, typeParameterResolver: TypeParameterResolver, )</ID>
    <ID>LongParameterList:ParameterTypeMapping.kt$( visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, functionScope: Set&lt;String&gt;, resolved: Map&lt;String, GenericDeclaration&gt;, rootNullability: Boolean, typeParameterResolver: TypeParameterResolver, )</ID>
    <ID>LongParameterList:ParameterTypeMapping.kt$( visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, functionScope: Set&lt;String&gt;, resolved: Map&lt;String, GenericDeclaration&gt;, typeArguments: List&lt;KSTypeArgument&gt;, rootNullability: Boolean, typeParameterResolver: TypeParameterResolver, )</ID>
    <ID>LongParameterList:ParameterTypeMapping.kt$( visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, functionScope: Set&lt;String&gt;, resolved: Map&lt;String, GenericDeclaration&gt;, typeParameterResolver: TypeParameterResolver, rootNullability: Boolean, markedAsNullable: Boolean, typeArguments: List&lt;KSTypeArgument&gt;, )</ID>
    <ID>LongParameterList:ParameterTypeMapping.kt$( visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, functionScope: Set&lt;String&gt;, rootNullability: Boolean, nullable: Boolean, resolved: Map&lt;String, GenericDeclaration&gt;, )</ID>
    <ID>LongParameterList:ParameterTypeMapping.kt$( visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, functionScope: Set&lt;String&gt;, rootNullability: Boolean, resolved: Map&lt;String, GenericDeclaration&gt;, typeParameterResolver: TypeParameterResolver, )</ID>
    <ID>LongParameterList:ProcessorContract.kt$ProcessorContract.AggregatorFactory$( logger: KSPLogger, rootPackage: String, sourceSetValidator: SourceSetValidator, annotationFilter: AnnotationFilter, generics: GenericResolver, customAnnotations: Map&lt;String, String&gt;, aliases: Map&lt;String, String&gt;, )</ID>
    <ID>LongParameterList:ProcessorContract.kt$ProcessorContract.MethodGenerator$( qualifier: String, classScopeGenerics: Map&lt;String, List&lt;TypeName&gt;&gt;?, ksFunction: KSFunctionDeclaration, classWideResolver: TypeParameterResolver, enableSpy: Boolean, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:ProcessorContract.kt$ProcessorContract.MethodGeneratorHelper$( proxyInfo: ProxyInfo, arguments: Array&lt;MemberArgumentTypeInfo&gt;, suspending: Boolean, classScopeGenerics: Map&lt;String, List&lt;TypeName&gt;&gt;?, generics: Map&lt;String, GenericDeclaration&gt;?, methodReturnType: TypeName, proxyReturnType: TypeName, methodWideResolver: TypeParameterResolver, )</ID>
    <ID>LongParameterList:ProcessorContract.kt$ProcessorContract.MockFactoryGeneratorUtil$( mockType: TypeVariableName, spyType: TypeVariableName, boundaries: List&lt;TypeName&gt; = emptyList(), generics: List&lt;TypeVariableName&gt; = emptyList(), hasDefault: Boolean, modifier: KModifier?, )</ID>
    <ID>LongParameterList:ProcessorContract.kt$ProcessorContract.NonIntrusiveInvocationGenerator$( enableSpy: Boolean, methodName: String, typeParameter: List&lt;TypeName&gt;, arguments: Array&lt;MemberArgumentTypeInfo&gt;, methodReturnType: MemberReturnTypeInfo, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:ProcessorContract.kt$ProcessorContract.PropertyGenerator$( qualifier: String, classScopeGenerics: Map&lt;String, List&lt;TypeName&gt;&gt;?, ksProperty: KSPropertyDeclaration, classWideResolver: TypeParameterResolver, enableSpy: Boolean, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:ProcessorContract.kt$ProcessorContract.ProxyAccessMethodGenerator$( methodName: String, isSuspending: Boolean, typeParameter: List&lt;TypeVariableName&gt;, arguments: List&lt;ParameterSpec&gt;, returnType: TypeName?, proxyName: String, proxySignature: ParameterizedTypeName, proxySideEffect: LambdaTypeName, )</ID>
    <ID>LongParameterList:ProcessorContract.kt$ProcessorContract.ReceiverGenerator$( spyType: TypeName, qualifier: String, classScopeGenerics: Map&lt;String, List&lt;TypeName&gt;&gt;?, ksFunction: KSFunctionDeclaration, classWideResolver: TypeParameterResolver, enableSpy: Boolean, relaxer: Relaxer?, )</ID>
    <ID>LongParameterList:ProcessorContract.kt$ProcessorContract.ReceiverGenerator$( spyType: TypeName, qualifier: String, classScopeGenerics: Map&lt;String, List&lt;TypeName&gt;&gt;?, ksProperty: KSPropertyDeclaration, classWideResolver: TypeParameterResolver, enableSpy: Boolean, relaxer: Relaxer?, )</ID>
    <ID>MagicNumber:KMockCodeGenerator.kt$KMockCodeGenerator$4</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.FunProxyInvocationType.RETURN_VALUE$4</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.FunProxyInvocationType.RETURN_VALUES$5</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.FunProxyInvocationType.SIDE_EFFECT$6</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.FunProxyInvocationType.SIDE_EFFECT_CHAIN$7</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.FunProxyInvocationType.SPY$8</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.FunProxyInvocationType.THROWS_MANY$3</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.PropertyProxyInvocationType.SIDE_EFFECT$4</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.PropertyProxyInvocationType.SPY$5</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.PropertyProxyInvocationType.VALUES$3</ID>
    <ID>MagicNumber:KMockMultiSourceAggregator.kt$KMockMultiSourceAggregator$3</ID>
    <ID>MagicNumber:KMockNonIntrusiveInvocationGenerator.kt$KMockNonIntrusiveInvocationGenerator$4</ID>
    <ID>MagicNumber:KMockPublishingConfiguration.kt$KMockPublishingConfiguration$2022</ID>
    <ID>MatchingDeclarationName:Access.kt$AccessMock&lt;L : Alias623&gt; : Access</ID>
    <ID>MatchingDeclarationName:Alias.kt$AliasPlatformMock&lt;K : Any, L&gt; : Platform</ID>
    <ID>MatchingDeclarationName:AsyncFun.kt$AsyncFunMock&lt;L, T&gt; : AsyncFun</ID>
    <ID>MatchingDeclarationName:BuildIn.kt$BuildInMock : BuildIn</ID>
    <ID>MatchingDeclarationName:Collision.kt$CollisionMock : Collision</ID>
    <ID>MatchingDeclarationName:Common.kt$AliasCommonMock : Common</ID>
    <ID>MatchingDeclarationName:Common.kt$CommonMock : Common</ID>
    <ID>MatchingDeclarationName:Common.kt$CommonMock&lt;K : Any, L&gt; : Common</ID>
    <ID>MatchingDeclarationName:Common.kt$CommonMock&lt;L&gt; : Common</ID>
    <ID>MatchingDeclarationName:Common.kt$CommonMultiMock&lt;MultiMock&gt; : Regular1Regular2Regular3</ID>
    <ID>MatchingDeclarationName:Generic3.kt$GenericCommonContract</ID>
    <ID>MatchingDeclarationName:Generic3.kt$GenericPlatformContract</ID>
    <ID>MatchingDeclarationName:Generic3.kt$GenericSharedContract</ID>
    <ID>MatchingDeclarationName:GenericMock.kt$CommonGenericMultiMock&lt;KMockTypeParameter0 : Any, KMockTypeParameter1, KMockTypeParameter2 : Any, KMockTypeParameter3, KMockTypeParameter4, KMockTypeParameter5, MultiMock&gt; : Generic1Generic2Generic3</ID>
    <ID>MatchingDeclarationName:GenericMock.kt$PlatformGenericMultiMock&lt;KMockTypeParameter0 : Any, KMockTypeParameter1, KMockTypeParameter2 : Any, KMockTypeParameter3, KMockTypeParameter4, KMockTypeParameter5, MultiMock&gt; : Generic1Generic2Generic3</ID>
    <ID>MatchingDeclarationName:GenericMock.kt$SharedGenericMultiMock&lt;KMockTypeParameter0 : Any, KMockTypeParameter1, KMockTypeParameter2 : Any, KMockTypeParameter3, KMockTypeParameter4, KMockTypeParameter5, MultiMock&gt; : Generic1Generic2Generic3</ID>
    <ID>MatchingDeclarationName:NoBuildIns.kt$NoBuildInsMock : NoBuildIns</ID>
    <ID>MatchingDeclarationName:Overloaded.kt$OverloadedMock&lt;K : Any, L, U : Int?, W&gt; : Overloaded</ID>
    <ID>MatchingDeclarationName:Platform.kt$AliasPlatformMock : Platform</ID>
    <ID>MatchingDeclarationName:Platform.kt$PlatformMock : Platform</ID>
    <ID>MatchingDeclarationName:Platform.kt$PlatformMock&lt;K : Any, L&gt; : Platform</ID>
    <ID>MatchingDeclarationName:Platform.kt$PlatformMock&lt;L : Alias23&gt; : Platform</ID>
    <ID>MatchingDeclarationName:Platform.kt$PlatformMock&lt;L&gt; : Platform</ID>
    <ID>MatchingDeclarationName:Platform.kt$PlatformMock&lt;Q : List&lt;Int&gt;&gt; : Platform</ID>
    <ID>MatchingDeclarationName:Platform.kt$PlatformMultiMock&lt;MultiMock&gt; : Regular1Regular2Regular3</ID>
    <ID>MatchingDeclarationName:PreventResolving.kt$PreventResolvingMock&lt;L : Alias923&gt; : PreventResolving</ID>
    <ID>MatchingDeclarationName:Property.kt$PropertyMock&lt;L, T&gt; : Property</ID>
    <ID>MatchingDeclarationName:Receiver.kt$ReceiverMock&lt;L : Alias11&gt; : Receiver</ID>
    <ID>MatchingDeclarationName:Refined.kt$RefinedMock&lt;Q : List&lt;Int&gt;&gt; : Refined</ID>
    <ID>MatchingDeclarationName:Regular2.kt$CommonContractRegular</ID>
    <ID>MatchingDeclarationName:Regular2.kt$PlatformContractRegular</ID>
    <ID>MatchingDeclarationName:Regular2.kt$SharedContractRegular</ID>
    <ID>MatchingDeclarationName:RegularMock.kt$CommonMultiMock&lt;MultiMock&gt; : Regular1Regular2Regular3</ID>
    <ID>MatchingDeclarationName:RegularMock.kt$PlatformMultiMock&lt;MultiMock&gt; : Regular1Regular2Regular3</ID>
    <ID>MatchingDeclarationName:RegularMock.kt$SharedMultiMock&lt;MultiMock&gt; : Regular1Regular2Regular3</ID>
    <ID>MatchingDeclarationName:Relaxed.kt$RelaxedMock&lt;K : Any, L&gt; : Relaxed</ID>
    <ID>MatchingDeclarationName:Relaxed.kt$RelaxedMock&lt;L : Alias102&gt; : Relaxed</ID>
    <ID>MatchingDeclarationName:Relaxed.kt$RelaxedMock&lt;L&gt; : Relaxed</ID>
    <ID>MatchingDeclarationName:Relaxer.kt$Fixture</ID>
    <ID>MatchingDeclarationName:Shared.kt$AliasSharedMock : Shared</ID>
    <ID>MatchingDeclarationName:Shared.kt$SharedMock : Shared</ID>
    <ID>MatchingDeclarationName:Shared.kt$SharedMock&lt;K : Any, L&gt; : Shared</ID>
    <ID>MatchingDeclarationName:Shared.kt$SharedMock&lt;T&gt; : Shared</ID>
    <ID>MatchingDeclarationName:Shared.kt$SharedMultiMock&lt;MultiMock&gt; : Regular1Regular2Regular3</ID>
    <ID>MatchingDeclarationName:Spied.kt$SpiedMock&lt;L&gt; : Spied</ID>
    <ID>MatchingDeclarationName:SpiedGenericMock.kt$CommonGenericMultiMock&lt;KMockTypeParameter0 : Any, KMockTypeParameter1, KMockTypeParameter2 : Any, KMockTypeParameter3, KMockTypeParameter4, KMockTypeParameter5, MultiMock&gt; : Generic1Generic2Generic3</ID>
    <ID>MatchingDeclarationName:SpiedGenericMock.kt$PlatformGenericMultiMock&lt;KMockTypeParameter0 : Any, KMockTypeParameter1, KMockTypeParameter2 : Any, KMockTypeParameter3, KMockTypeParameter4, KMockTypeParameter5, MultiMock&gt; : Generic1Generic2Generic3</ID>
    <ID>MatchingDeclarationName:SpiedGenericMock.kt$SharedGenericMultiMock&lt;KMockTypeParameter0 : Any, KMockTypeParameter1, KMockTypeParameter2 : Any, KMockTypeParameter3, KMockTypeParameter4, KMockTypeParameter5, MultiMock&gt; : Generic1Generic2Generic3</ID>
    <ID>MatchingDeclarationName:SpiedReceiverMock.kt$ReceiverMultiMock&lt;KMockTypeParameter0, KMockTypeParameter1, MultiMock&gt; : PropertiesMethods</ID>
    <ID>MatchingDeclarationName:SpiedRegularMock.kt$CommonMultiMock&lt;MultiMock&gt; : Regular1Regular2Regular3</ID>
    <ID>MatchingDeclarationName:SpiedRegularMock.kt$PlatformMultiMock&lt;MultiMock&gt; : Regular1Regular2Regular3</ID>
    <ID>MatchingDeclarationName:SpiedRegularMock.kt$SharedMultiMock&lt;MultiMock&gt; : Regular1Regular2Regular3</ID>
    <ID>MatchingDeclarationName:SuperType.kt$InheritedMock&lt;P&gt; : Inherited</ID>
    <ID>MatchingDeclarationName:SuperType.kt$InheritedMock&lt;R : Alias33&gt; : Inherited</ID>
    <ID>MatchingDeclarationName:SuperType.kt$InheritedMock&lt;R&gt; : Inherited</ID>
    <ID>MatchingDeclarationName:SuperTyped.kt$SuperTypedMock&lt;K : Any, L&gt; : SuperTyped</ID>
    <ID>MatchingDeclarationName:SyncFun.kt$SyncFunMock&lt;L, T&gt; : SyncFun</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"bars|(kotlin.Array&lt;kotlin.Function1&lt;mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;, mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;&gt;&gt;) -&gt; kotlin.Unit|[]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"bar|(kotlin.Array&lt;kotlin.collections.Map&lt;kotlin.String, kotlin.String&gt;&gt;) -&gt; kotlin.collections.Map&lt;kotlin.String, kotlin.String&gt;|[[kotlin.collections.Map&lt;kotlin.String, kotlin.String&gt;]]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"bar|(kotlin.Function1&lt;mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;, mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;&gt;) -&gt; kotlin.Unit|[[kotlin.Function1&lt;mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;, mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;&gt;]]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"bar|(kotlin.Long, kotlin.Array&lt;kotlin.collections.Map&lt;kotlin.String, mock.template.typealiaz.GenericsAccess&lt;kotlin.collections.Map&lt;kotlin.String, kotlin.Int&gt;&gt;&gt;&gt;) -&gt; kotlin.collections.Map&lt;kotlin.String, mock.template.typealiaz.GenericsAccess&lt;kotlin.collections.Map&lt;kotlin.String, kotlin.Int&gt;&gt;&gt;|[[kotlin.collections.Map&lt;kotlin.String, mock.template.typealiaz.GenericsAccess&lt;kotlin.collections.Map&lt;kotlin.String, kotlin.Int&gt;&gt;&gt;]]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"doAnythingElse|(kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;) -&gt; kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;|[]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"doAnythingElse|(mock.template.typealiaz.GenericsAccess&lt;mock.template.typealiaz.GenericsAccess&lt;kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;&gt;&gt;) -&gt; kotlin.Unit|[]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"doMoreElse|(kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;) -&gt; kotlin.Unit|[[kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;], [kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;]]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"doOtherThing|(mock.template.typealiaz.GenericsAccess&lt;mock.template.typealiaz.GenericsAccess&lt;kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;&gt;&gt;, kotlin.Comparable&lt;kotlin.Any&gt;) -&gt; kotlin.Unit|[[mock.template.typealiaz.GenericsAccess&lt;kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;&gt;], [kotlin.Comparable&lt;X&gt;]]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"doSomethingElse|(kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;) -&gt; kotlin.Unit|[[kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;], [kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;]]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"doSomethingElse|(mock.template.typealiaz.GenericsAccess&lt;kotlin.Any?&gt;) -&gt; mock.template.typealiaz.GenericsAccess&lt;kotlin.Any?&gt;|[[mock.template.typealiaz.GenericsAccess&lt;X&gt;], [kotlin.Any?]]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"doSomething|( mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;,) -&gt; kotlin.Any|[]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"foo|(kotlin.Long, kotlin.Array&lt;kotlin.collections.Map&lt;kotlin.String, mock.template.typealiaz.GenericsAccess&lt;kotlin.collections.Map&lt;kotlin.String, kotlin.Int&gt;&gt;&gt;&gt;) -&gt; kotlin.Unit|[[kotlin.collections.Map&lt;kotlin.String, mock.template.typealiaz.GenericsAccess&lt;kotlin.collections.Map&lt;kotlin.String, kotlin.Int&gt;&gt;&gt;]]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$"toll|(mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;) -&gt; kotlin.Unit|[[mock.template.typealiaz.GenericsAccess&lt;X&gt;], [kotlin.CharSequence &amp; kotlin.Comparable&lt;X&gt;]]"</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$(</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$IllegalStateException("""Unknown method ${reference.name} with signature ( mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;,) -&gt; kotlin.Any!""")</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Any, kotlin.collections.Map&lt;kotlin.String, kotlin.String&gt;) -&gt; kotlin.collections.Map&lt;kotlin.String, kotlin.String&gt;!""")</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Array&lt;out kotlin.Function1&lt;mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;, mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Char, kotlin.Array&lt;out kotlin.collections.Map&lt;kotlin.String, kotlin.IntArray&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;) -&gt; kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;!""")</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Int, kotlin.Array&lt;out kotlin.collections.Map&lt;kotlin.String, kotlin.String&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.collections.Map&lt;kotlin.String, kotlin.String&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:Access.kt$AccessMock$IllegalStateException("""Unknown method ${reference.name} with signature (mock.template.typealiaz.GenericsAccess&lt;mock.template.typealiaz.GenericsAccess&lt;kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:ArgumentMatcherSpec.kt$ArgumentMatcherSpec$fun</ID>
    <ID>MaxLineLength:AssertionChainSpec.kt$AssertionChainSpec$error.message mustBe "The given verification chain covers 2 items, but only 0 were expected (${references[0].proxy.id}, ${references[1].proxy.id} were referenced)."</ID>
    <ID>MaxLineLength:AsyncFun.kt$AsyncFunMock$"veryLongMethodNameWithABunchOfVariables|suspend ( kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, L, kotlin.Int, T,) -&gt; kotlin.Unit|[]"</ID>
    <ID>MaxLineLength:AsyncFun.kt$AsyncFunMock$(</ID>
    <ID>MaxLineLength:AsyncFun.kt$AsyncFunMock$IllegalStateException("""Unknown method ${reference.name} with signature suspend ( kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, L, kotlin.Int, T,) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:AsyncFunProxyInvocationsSpec.kt$AsyncFunProxyInvocationsSpec$implementation.fun11</ID>
    <ID>MaxLineLength:AsyncFunProxyInvocationsSpec.kt$AsyncFunProxyInvocationsSpec$implementation.fun12</ID>
    <ID>MaxLineLength:AsyncFunProxyInvocationsSpec.kt$AsyncFunProxyInvocationsSpec$implementation.fun13</ID>
    <ID>MaxLineLength:AsyncFunProxyInvocationsSpec.kt$AsyncFunProxyInvocationsSpec$proxy.sideEffect</ID>
    <ID>MaxLineLength:AsyncFunProxyInvocationsSpec.kt$AsyncFunProxyInvocationsSpec$proxy.sideEffects</ID>
    <ID>MaxLineLength:AsyncFunProxyUnfrozenInvocationsSpec.kt$AsyncFunProxyUnfrozenInvocationsSpec$implementation.fun11</ID>
    <ID>MaxLineLength:AsyncFunProxyUnfrozenInvocationsSpec.kt$AsyncFunProxyUnfrozenInvocationsSpec$implementation.fun12</ID>
    <ID>MaxLineLength:AsyncFunProxyUnfrozenInvocationsSpec.kt$AsyncFunProxyUnfrozenInvocationsSpec$implementation.fun13</ID>
    <ID>MaxLineLength:AsyncFunProxyUnfrozenInvocationsSpec.kt$AsyncFunProxyUnfrozenInvocationsSpec$proxy.sideEffect</ID>
    <ID>MaxLineLength:AsyncFunProxyUnfrozenInvocationsSpec.kt$AsyncFunProxyUnfrozenInvocationsSpec$proxy.sideEffects</ID>
    <ID>MaxLineLength:Common.kt$CommonMock$Something</ID>
    <ID>MaxLineLength:Hint.kt$Hint11$public data</ID>
    <ID>MaxLineLength:Hint.kt$Hint12$public data</ID>
    <ID>MaxLineLength:Hint.kt$Hint13$public data</ID>
    <ID>MaxLineLength:Hint.kt$public inline</ID>
    <ID>MaxLineLength:KMockBuildInMethodGenerator.kt$KMockBuildInMethodGenerator$"${PROXY_FACTORY.simpleName}.$CREATE_SYNC_PROXY(%S, $COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, $IGNORE_ARGUMENT = true)"</ID>
    <ID>MaxLineLength:KMockContract.kt$KMockContract.AssertionContext$*</ID>
    <ID>MaxLineLength:KMockContract.kt$KMockContract.VerificationContext$*</ID>
    <ID>MaxLineLength:KMockFactoryMultiInterfaceGenerator.kt$KMockFactoryMultiInterfaceGenerator.Companion$private const val MULTI_INTERFACE_ARGUMENTS = "$COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, $SPY_ARGUMENT = $SPY_ARGUMENT"</ID>
    <ID>MaxLineLength:KMockFactoryWithoutGenerics.kt$KMockFactoryWithoutGenerics.Companion$private const val ARGUMENTS_WITHOUT_RELAXER_AND_SPY = "$COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $UNIT_RELAXER_ARGUMENT = $UNIT_RELAXER_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT"</ID>
    <ID>MaxLineLength:KMockFactoryWithoutGenerics.kt$KMockFactoryWithoutGenerics.Companion$private const val ARGUMENTS_WITHOUT_SPY = "$COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $RELAXER_ARGUMENT = $RELAXER_ARGUMENT, $UNIT_RELAXER_ARGUMENT = $UNIT_RELAXER_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT"</ID>
    <ID>MaxLineLength:KMockMocksSpec.kt$KMockMocksSpec$fun</ID>
    <ID>MaxLineLength:KMockMultiSourceAggregatorCommonSpec.kt$KMockMultiSourceAggregatorCommonSpec$val packageName1 = "${fixture.fixture&lt;String&gt;(qualifiedBy("stringAlpha"))}.${fixture.fixture&lt;String&gt;(qualifiedBy("stringAlpha"))}.${fixture.fixture&lt;String&gt;(qualifiedBy("stringAlpha"))}"</ID>
    <ID>MaxLineLength:KMockMultiSourceAggregatorPlatformSpec.kt$KMockMultiSourceAggregatorPlatformSpec$val packageName1 = "${fixture.fixture&lt;String&gt;(qualifiedBy("stringAlpha"))}.${fixture.fixture&lt;String&gt;(qualifiedBy("stringAlpha"))}.${fixture.fixture&lt;String&gt;(qualifiedBy("stringAlpha"))}"</ID>
    <ID>MaxLineLength:KMockMultiSourceAggregatorSharedSpec.kt$KMockMultiSourceAggregatorSharedSpec$fun</ID>
    <ID>MaxLineLength:KMockMultiSourceAggregatorSharedSpec.kt$KMockMultiSourceAggregatorSharedSpec$val packageName1 = "${fixture.fixture&lt;String&gt;(qualifiedBy("stringAlpha"))}.${fixture.fixture&lt;String&gt;(qualifiedBy("stringAlpha"))}.${fixture.fixture&lt;String&gt;(qualifiedBy("stringAlpha"))}"</ID>
    <ID>MaxLineLength:KMockPropertyGenerator.kt$KMockPropertyGenerator.Companion$private val template = "${PROXY_FACTORY.simpleName}.$CREATE_PROPERTY_PROXY(%S, $COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT)"</ID>
    <ID>MaxLineLength:KMockSingleSourceAggregatorSharedSpec.kt$KMockSingleSourceAggregatorSharedSpec$fun</ID>
    <ID>MaxLineLength:KSPBridgeSpec.kt$KSPBridgeSpec$fun</ID>
    <ID>MaxLineLength:NonIntrusiveFunConfiguratorSpec.kt$NonIntrusiveFunConfiguratorSpec$fun</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"bliss|() -&gt; kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;kotlin.Any?&gt;&gt;&gt;?|[[kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;X&gt;&gt;&gt;?]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"bliss|(kotlin.Array&lt;kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;kotlin.Any?&gt;&gt;&gt;?&gt;) -&gt; kotlin.Unit|[[kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;X&gt;&gt;&gt;?]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"bliss|(kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;kotlin.Any?&gt;&gt;&gt;?) -&gt; kotlin.Unit|[[kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;X&gt;&gt;&gt;?]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"blubb|(kotlin.Array&lt;kotlin.collections.List&lt;kotlin.Array&lt;kotlin.String?&gt;&gt;&gt;) -&gt; kotlin.Unit|[[kotlin.collections.List&lt;kotlin.Array&lt;kotlin.String?&gt;&gt;]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"brass|(kotlin.Array&lt;kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;kotlin.Any&gt;&gt;&gt;&gt;) -&gt; kotlin.Unit|[[kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;X&gt;&gt;&gt;]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"brass|(kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;kotlin.Any&gt;&gt;&gt;) -&gt; kotlin.Unit|[[kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;X&gt;&gt;&gt;]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"iss|suspend (kotlin.Any?) -&gt; kotlin.Any|[[mock.template.access.SomeGeneric&lt;kotlin.String&gt; &amp; kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;X&gt;&gt;&gt;], [kotlin.Any?]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"iss|suspend (kotlin.Any?, kotlin.Any) -&gt; kotlin.Unit|[[mock.template.access.SomeGeneric&lt;kotlin.String&gt; &amp; kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;X&gt;&gt;&gt;], [kotlin.Any?]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"izz|(kotlin.Array&lt;kotlin.Any&gt;) -&gt; kotlin.Unit|[[mock.template.access.SomeGeneric&lt;kotlin.String&gt; &amp; kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;X&gt;&gt;&gt;]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"kss|(kotlin.Any) -&gt; kotlin.Any|[[X], [mock.template.access.SomeGeneric&lt;kotlin.String&gt; &amp; kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;X&gt;&gt;&gt;]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"kss|(kotlin.Any, kotlin.Any) -&gt; kotlin.Unit|[[X], [mock.template.access.SomeGeneric&lt;kotlin.String&gt; &amp; kotlin.Comparable&lt;kotlin.collections.List&lt;kotlin.Array&lt;X&gt;&gt;&gt;]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"pss|(mock.template.access.SomeGeneric&lt;kotlin.String&gt;) -&gt; mock.template.access.SomeGeneric&lt;kotlin.String&gt;|[[mock.template.access.SomeGeneric&lt;kotlin.String&gt;], [mock.template.access.SomeGeneric&lt;kotlin.String&gt;], [mock.template.access.SomeGeneric&lt;kotlin.String&gt;]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"pss|(mock.template.access.SomeGeneric&lt;kotlin.String&gt;, mock.template.access.SomeGeneric&lt;kotlin.String&gt;) -&gt; kotlin.Unit|[[mock.template.access.SomeGeneric&lt;kotlin.String&gt;], [mock.template.access.SomeGeneric&lt;kotlin.String&gt;], [mock.template.access.SomeGeneric&lt;kotlin.String&gt;]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"rzz|(kotlin.Array&lt;kotlin.Any&gt;) -&gt; kotlin.Unit|[[mock.template.access.SomeGeneric&lt;kotlin.String&gt; &amp; kotlin.collections.Map&lt;kotlin.String, kotlin.String&gt;]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$"tzz|suspend (kotlin.Array&lt;kotlin.Any?&gt;) -&gt; kotlin.Unit|[[mock.template.access.SomeGeneric&lt;kotlin.String&gt;? &amp; kotlin.collections.List&lt;kotlin.String&gt;?]]"</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$(</ID>
    <ID>MaxLineLength:Overloaded.kt$OverloadedMock$IllegalStateException("""Unknown method ${reference.name} with signature ( kotlin.String, kotlin.CharArray, kotlin.Boolean, kotlin.Int,) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:ParentFinderSpec.kt$ParentFinderSpec$fun</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$"bar|(kotlin.Array&lt;mock.template.typealiaz.Alias999&lt;kotlin.String&gt;&gt;) -&gt; mock.template.typealiaz.Alias999&lt;kotlin.String&gt;|[[mock.template.typealiaz.Alias999&lt;kotlin.String&gt;]]"</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$"bar|(kotlin.Long, kotlin.Array&lt;mock.template.typealiaz.Alias999&lt;mock.template.typealiaz.Alias977&lt;mock.template.typealiaz.Alias973&lt;kotlin.Int&gt;&gt;&gt;&gt;) -&gt; mock.template.typealiaz.Alias999&lt;mock.template.typealiaz.Alias977&lt;mock.template.typealiaz.Alias973&lt;kotlin.Int&gt;&gt;&gt;|[[mock.template.typealiaz.Alias999&lt;mock.template.typealiaz.Alias977&lt;mock.template.typealiaz.Alias973&lt;kotlin.Int&gt;&gt;&gt;]]"</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$"doMoreElse|(kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;) -&gt; kotlin.Unit|[[kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;], [kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;]]"</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$"doOtherThing|(mock.template.typealiaz.Alias977&lt;mock.template.typealiaz.Alias977&lt;mock.template.typealiaz.Alias921&gt;&gt;, kotlin.Comparable&lt;kotlin.Any&gt;) -&gt; kotlin.Unit|[[mock.template.typealiaz.Alias977&lt;mock.template.typealiaz.Alias921&gt;], [kotlin.Comparable&lt;X&gt;]]"</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$"doSomethingElse|(mock.template.typealiaz.Alias921, mock.template.typealiaz.Alias923) -&gt; kotlin.Unit|[[mock.template.typealiaz.Alias921], [mock.template.typealiaz.Alias923]]"</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$"doSomethingElse|(mock.template.typealiaz.Alias977&lt;kotlin.Any?&gt;) -&gt; mock.template.typealiaz.Alias977&lt;kotlin.Any?&gt;|[[mock.template.typealiaz.Alias977&lt;X&gt;], [kotlin.Any?]]"</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$"doSomething|( mock.template.typealiaz.Alias977&lt;kotlin.Any&gt;, mock.template.typealiaz.Alias923, mock.template.typealiaz.Alias921,) -&gt; kotlin.Any|[]"</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$"foo|(kotlin.Long, kotlin.Array&lt;mock.template.typealiaz.Alias973&lt;mock.template.typealiaz.Alias977&lt;mock.template.typealiaz.Alias973&lt;kotlin.Int&gt;&gt;&gt;&gt;) -&gt; kotlin.Unit|[[mock.template.typealiaz.Alias973&lt;mock.template.typealiaz.Alias977&lt;mock.template.typealiaz.Alias973&lt;kotlin.Int&gt;&gt;&gt;]]"</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$"toll|(mock.template.typealiaz.Alias977&lt;kotlin.Any&gt;) -&gt; kotlin.Unit|[[mock.template.typealiaz.Alias977&lt;X&gt;], [kotlin.CharSequence &amp; kotlin.Comparable&lt;X&gt;]]"</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$(</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$IllegalStateException("""Unknown method ${reference.name} with signature ( mock.template.typealiaz.Alias977&lt;kotlin.Any&gt;, mock.template.typealiaz.Alias923, mock.template.typealiaz.Alias921,) -&gt; kotlin.Any!""")</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Any, mock.template.typealiaz.Alias973&lt;kotlin.String&gt;?) -&gt; mock.template.typealiaz.Alias973&lt;kotlin.String&gt;!""")</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Char, kotlin.Array&lt;out mock.template.typealiaz.Alias973&lt;kotlin.IntArray&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Int, kotlin.Array&lt;out mock.template.typealiaz.Alias973&lt;kotlin.String&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$IllegalStateException("""Unknown method ${reference.name} with signature (mock.template.typealiaz.Alias921, mock.template.typealiaz.Alias923) -&gt; mock.template.typealiaz.Alias923!""")</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$IllegalStateException("""Unknown method ${reference.name} with signature (mock.template.typealiaz.Alias977&lt;mock.template.typealiaz.Alias977&lt;mock.template.typealiaz.Alias921&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:PreventResolving.kt$PreventResolvingMock$tech.antibytes.kmock.KMockContract</ID>
    <ID>MaxLineLength:ProcessorContract.kt$ProcessorContract.Companion$const val ARGUMENTS_WITHOUT_RELAXER = "$COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $UNIT_RELAXER_ARGUMENT = $UNIT_RELAXER_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, $SPY_ARGUMENT = $SPY_ARGUMENT"</ID>
    <ID>MaxLineLength:ProcessorContract.kt$ProcessorContract.Companion$const val ARGUMENTS_WITH_RELAXER = "$COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $RELAXER_ARGUMENT = $RELAXER_ARGUMENT, $UNIT_RELAXER_ARGUMENT = $UNIT_RELAXER_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, $SPY_ARGUMENT = $SPY_ARGUMENT"</ID>
    <ID>MaxLineLength:ProjectExtensionSpec.kt$ProjectExtensionSpec$fun</ID>
    <ID>MaxLineLength:SideEffectChainSpec.kt$SideEffectChainSpec$fun</ID>
    <ID>MaxLineLength:SideEffectChainUnfrozenSpec.kt$SideEffectChainUnfrozenSpec$fun</ID>
    <ID>MaxLineLength:SourceFilterSpec.kt$SourceFilterSpec$fun</ID>
    <ID>MaxLineLength:SyncFun.kt$SyncFunMock$"veryLongMethodNameWithABunchOfVariables|( kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int,) -&gt; kotlin.Unit|[]"</ID>
    <ID>MaxLineLength:SyncFun.kt$SyncFunMock$(</ID>
    <ID>MaxLineLength:SyncFun.kt$SyncFunMock$IllegalStateException("""Unknown method ${reference.name} with signature ( kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int,) -&gt; kotlin.Unit!""")</ID>
    <ID>MaxLineLength:SyncFunProxyInvocationsSpec.kt$SyncFunProxyInvocationsSpec$implementation.fun11</ID>
    <ID>MaxLineLength:SyncFunProxyInvocationsSpec.kt$SyncFunProxyInvocationsSpec$implementation.fun12</ID>
    <ID>MaxLineLength:SyncFunProxyInvocationsSpec.kt$SyncFunProxyInvocationsSpec$implementation.fun13</ID>
    <ID>MaxLineLength:SyncFunProxyInvocationsSpec.kt$SyncFunProxyInvocationsSpec$proxy.sideEffect</ID>
    <ID>MaxLineLength:SyncFunProxyInvocationsSpec.kt$SyncFunProxyInvocationsSpec$proxy.sideEffects</ID>
    <ID>MaxLineLength:SyncFunProxyUnfrozenInvocationsSpec.kt$SyncFunProxyUnfrozenInvocationsSpec$implementation.fun11</ID>
    <ID>MaxLineLength:SyncFunProxyUnfrozenInvocationsSpec.kt$SyncFunProxyUnfrozenInvocationsSpec$implementation.fun12</ID>
    <ID>MaxLineLength:SyncFunProxyUnfrozenInvocationsSpec.kt$SyncFunProxyUnfrozenInvocationsSpec$implementation.fun13</ID>
    <ID>MaxLineLength:SyncFunProxyUnfrozenInvocationsSpec.kt$SyncFunProxyUnfrozenInvocationsSpec$proxy.sideEffect</ID>
    <ID>MaxLineLength:SyncFunProxyUnfrozenInvocationsSpec.kt$SyncFunProxyUnfrozenInvocationsSpec$proxy.sideEffects</ID>
    <ID>MaxLineLength:UnchainedAssertionSpec.kt$UnchainedAssertionSpec$fun</ID>
    <ID>MaxLineLength:VerificationAndAssertionAsyncSpec.kt$VerificationAndAssertionAsyncSpec$fun</ID>
    <ID>MaxLineLength:VerificationContextSpec.kt$VerificationContextSpec$fun</ID>
    <ID>MemberNameEqualsClassName:Relaxer.kt$Fixture$var fixture: PublicApi.Fixture? = null</ID>
    <ID>MultilineRawStringIndentation:KMockFactoryMultiInterfaceGenerator.kt$KMockFactoryMultiInterfaceGenerator.Companion$""" |return $SHARED_MOCK_FACTORY( | $SPY_ARGUMENT = $SPY_ARGUMENT, | $COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, | $RELAXER_ARGUMENT = false, | $UNIT_RELAXER_ARGUMENT = false, | $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, | %L |) """</ID>
    <ID>MultilineRawStringIndentation:KMockFactoryMultiInterfaceGenerator.kt$KMockFactoryMultiInterfaceGenerator.Companion$""" |return $SHARED_MOCK_FACTORY( | $SPY_ARGUMENT = null, | $COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, | $RELAXER_ARGUMENT = $RELAXER_ARGUMENT, | $UNIT_RELAXER_ARGUMENT = $UNIT_RELAXER_ARGUMENT, | $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, | %L |) """</ID>
    <ID>MultilineRawStringIndentation:KMockFactoryWithGenerics.kt$KMockFactoryWithGenerics.Companion$""" |return $SHARED_MOCK_FACTORY( | $SPY_ARGUMENT = $SPY_ARGUMENT, | $COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, | $RELAXER_ARGUMENT = false, | $UNIT_RELAXER_ARGUMENT = false, | $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, | $TEMPLATE_TYPE_ARGUMENT = $TEMPLATE_TYPE_ARGUMENT, |) """</ID>
    <ID>MultilineRawStringIndentation:KMockFactoryWithGenerics.kt$KMockFactoryWithGenerics.Companion$""" |return $SHARED_MOCK_FACTORY( | $SPY_ARGUMENT = null, | $COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, | $RELAXER_ARGUMENT = $RELAXER_ARGUMENT, | $UNIT_RELAXER_ARGUMENT = $UNIT_RELAXER_ARGUMENT, | $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, | $TEMPLATE_TYPE_ARGUMENT = $TEMPLATE_TYPE_ARGUMENT, |) """</ID>
    <ID>MultilineRawStringIndentation:KMockFactoryWithoutGenerics.kt$KMockFactoryWithoutGenerics.Companion$""" |return $SHARED_MOCK_FACTORY( | $SPY_ARGUMENT = $SPY_ARGUMENT, | $COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, | $RELAXER_ARGUMENT = false, | $UNIT_RELAXER_ARGUMENT = false, | $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, |) """</ID>
    <ID>MultilineRawStringIndentation:KMockFactoryWithoutGenerics.kt$KMockFactoryWithoutGenerics.Companion$""" |return $SHARED_MOCK_FACTORY( | $SPY_ARGUMENT = null, | $COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, | $RELAXER_ARGUMENT = $RELAXER_ARGUMENT, | $UNIT_RELAXER_ARGUMENT = $UNIT_RELAXER_ARGUMENT, | $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, |) """</ID>
    <ID>MultilineRawStringIndentation:KMockGradleConfiguration.kt$KMockGradleConfiguration$"""KMock is generator for Mocks and Spies aiming Kotlin (Multiplatform). |It can work non intrusive, if relaxed or while acting as Spy and supports as well stubbing. |This plugin apply some necessary configuration and takes care of the communication with the processor. """</ID>
    <ID>NestedBlockDepth:KMockGenerics.kt$KMockGenerics$override fun mapProxyGenerics( classScope: Map&lt;String, List&lt;TypeName&gt;&gt;?, generics: Map&lt;String, List&lt;KSTypeReference&gt;&gt;, typeParameterResolver: TypeParameterResolver, ): Map&lt;String, GenericDeclaration&gt;</ID>
    <ID>PackageNaming:Actual.kt$package generatorTest</ID>
    <ID>PackageNaming:Alias.kt$package generatorTest</ID>
    <ID>PackageNaming:CommonActual.kt$package generatorTest</ID>
    <ID>PackageNaming:CommonExpect.kt$package generatorTest</ID>
    <ID>PackageNaming:Generic.kt$package generatorTest</ID>
    <ID>PackageNaming:NoSpy.kt$package generatorTest</ID>
    <ID>PackageNaming:Platform.kt$package generatorTest</ID>
    <ID>PackageNaming:Shared1Expect.kt$package generatorTest</ID>
    <ID>PackageNaming:Shared2Expect.kt$package generatorTest</ID>
    <ID>PackageNaming:SharedActual.kt$package generatorTest</ID>
    <ID>PackageNaming:SharedExpect.kt$package generatorTest</ID>
    <ID>ReturnCount:ArgumentMatcher.kt$internal fun Array&lt;out Any?&gt;.hasBeenCalledWith( vararg constraints: Any?, onFail: (Any?, Int) -&gt; Unit = ::noopClosure, ): Boolean</ID>
    <ID>ReturnCount:ArgumentMatcher.kt$internal fun Array&lt;out Any?&gt;.hasBeenCalledWithout( vararg constraints: Any?, onFail: (Any?, Int) -&gt; Unit = ::noopClosure, ): Boolean</ID>
    <ID>ReturnCount:ArgumentMatcher.kt$internal fun Array&lt;out Any?&gt;.hasBeenStrictlyCalledWith( vararg constraints: Any?, onFail: (Any?, Int) -&gt; Unit = ::noopClosure, ): Boolean</ID>
    <ID>ReturnCount:ArgumentMatcher.kt$internal fun GetOrSet.wasSetTo(constraint: Any?): Boolean</ID>
    <ID>ReturnCount:KMockGenerics.kt$KMockGenerics$private fun List&lt;KSTypeReference&gt;.resolveMultiBoundary( visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, allGenerics: Set&lt;String&gt;, rootNullability: Boolean, resolved: Map&lt;String, GenericDeclaration&gt;, typeParameterResolver: TypeParameterResolver, ): GenericDeclaration?</ID>
    <ID>ReturnCount:KMockReceiverGenerator.kt$KMockReceiverGenerator$private fun resolveSetterProxy( qualifier: String, propertyName: String, isMutable: Boolean, receiverInfo: MemberArgumentTypeInfo, proxyGenerics: Map&lt;String, GenericDeclaration&gt;?, classScopeGenerics: Map&lt;String, List&lt;TypeName&gt;&gt;?, receiverTypeResolver: TypeParameterResolver, ): Pair&lt;ProxyInfo?, PropertySpec?&gt;</ID>
    <ID>ReturnCount:ParameterTypeMapping.kt$private fun List&lt;KSTypeArgument&gt;.mapParameterType( visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, functionScope: Set&lt;String&gt;, rootNullability: Boolean, resolved: Map&lt;String, GenericDeclaration&gt;, typeParameterResolver: TypeParameterResolver, ): ArgumentMappingDecorator?</ID>
    <ID>ReturnCount:StrictVerificationChain.kt$StrictVerificationChain$private fun findProxy(expected: Proxy&lt;*, *&gt;): Int?</ID>
    <ID>ReturnCount:TypeParameterResolver.kt$private fun KSTypeArgument.toTypeNameX( typeParamResolver: TypeParameterResolver, ): TypeName</ID>
    <ID>ReturnCount:VerificationChain.kt$VerificationChain$private fun findProxy(expected: Proxy&lt;*, *&gt;): Int?</ID>
    <ID>SpreadOperator:FunSpecExtensions.kt$( argument.argumentName, argument.methodTypeName, *vararged, )</ID>
    <ID>SpreadOperator:KMockMultiSourceAggregator.kt$KMockMultiSourceAggregator$(shared, *customShared)</ID>
    <ID>SpreadOperator:KMockSingleSourceAggregator.kt$KMockSingleSourceAggregator$(shared, *customShared)</ID>
    <ID>StringShouldBeRawString:Dangerfile.df.kts$"(?:(?:Prepare )?Release \\d{1,3}\\.\\d{1,3}\\.\\d{1,3})"</ID>
    <ID>StringShouldBeRawString:Dangerfile.df.kts$"(?:(?:\\[[A-Z]{2,8}-\\d{1,6}\\]\\s)?(?:Add|Update|Change|Remove|Fix|Bump|Security)\\s.*)"</ID>
    <ID>StringShouldBeRawString:Dangerfile.df.kts$"(?:release\\/(?:\\d{1,3}\\.\\d{1,3}(?:\\.\\d{1,3})?)(?:\\/prepare-\\d{1,3}\\.\\d{1,3}\\.\\d{1,3})?)"</ID>
    <ID>StringShouldBeRawString:Dangerfile.df.kts$"Branch name is not following our pattern:\n" + "\nrelease/1.2(.3)(/prepare-1.2.3)\n" + "\nfeature/add|change|remove|fix|bump|security-feature-title\n" + "\n\n" + "\n Current name: $branchName"</ID>
    <ID>StringShouldBeRawString:KMockFactoriesSpec.kt$KMockFactoriesSpec$"[ \t\r\n]+\n"</ID>
    <ID>StringShouldBeRawString:KMockMocksSpec.kt$KMockMocksSpec$"[ \t\r\n]+\n"</ID>
    <ID>StringShouldBeRawString:KMockMultiInterfaceMocksSpec.kt$KMockMultiInterfaceMocksSpec$"[ \t\r\n]+\n"</ID>
    <ID>StringShouldBeRawString:KMockProxyAccessMethodGenerator.kt$KMockProxyAccessMethodGenerator$"\n\"${member.memberName}|${member.indicator.toProxyKey()}\" to ${member.proxyName},"</ID>
    <ID>StringShouldBeRawString:build.gradle.kts$"^tech\\.antibytes\\.[\\.a-z\\-]+"</ID>
    <ID>StringShouldBeRawString:settings.gradle.kts$"^tech\\.antibytes\\.[\\.a-z\\-]+"</ID>
    <ID>SwallowedException:KmpSourceSetsConfigurator.kt$KmpSourceSetsConfigurator$e: Throwable</ID>
    <ID>SwallowedException:VerificationChain.kt$VerificationChain$e: AssertionError</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:FunProxy.kt$FunProxy$NullPointerException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:PropertyProxy.kt$PropertyProxy$NullPointerException()</ID>
    <ID>TooGenericExceptionCaught:KmpSourceSetsConfigurator.kt$KmpSourceSetsConfigurator$e: Throwable</ID>
    <ID>TooManyFunctions:AsyncFunProxy.kt$AsyncFunProxy&lt;ReturnValue, SideEffect : Function&lt;ReturnValue&gt;&gt; : AsyncFunProxyFunProxy</ID>
    <ID>TooManyFunctions:ExampleContract.kt$ExampleContract$SampleUselessObject</ID>
    <ID>TooManyFunctions:FunProxy.kt$FunProxy&lt;ReturnValue, SideEffect : Function&lt;ReturnValue&gt;&gt; : FunProxy</ID>
    <ID>TooManyFunctions:Hint.kt$tech.antibytes.kmock.Hint.kt</ID>
    <ID>TooManyFunctions:KMockCodeGenerator.kt$KMockCodeGenerator : KmpCodeGenerator</ID>
    <ID>TooManyFunctions:KMockContract.kt$KMockContract$AsyncFunProxy&lt;ReturnValue, SideEffect : Function&lt;ReturnValue&gt;&gt; : FunProxy</ID>
    <ID>TooManyFunctions:KMockContract.kt$KMockContract$SyncFunProxy&lt;ReturnValue, SideEffect : Function&lt;ReturnValue&gt;&gt; : FunProxy</ID>
    <ID>TooManyFunctions:KMockFactoryEntryPointGenerator.kt$KMockFactoryEntryPointGenerator : MockFactoryEntryPointGenerator</ID>
    <ID>TooManyFunctions:KMockFactoryGeneratorUtil.kt$KMockFactoryGeneratorUtil : MockFactoryGeneratorUtil</ID>
    <ID>TooManyFunctions:KMockFactoryMultiInterfaceGenerator.kt$KMockFactoryMultiInterfaceGenerator : MockFactoryMultiInterface</ID>
    <ID>TooManyFunctions:KMockFactoryWithGenerics.kt$KMockFactoryWithGenerics : MockFactoryWithGenerics</ID>
    <ID>TooManyFunctions:KMockFactoryWithoutGenerics.kt$KMockFactoryWithoutGenerics : MockFactoryWithoutGenerics</ID>
    <ID>TooManyFunctions:KMockGenerator.kt$KMockGenerator : MockGenerator</ID>
    <ID>TooManyFunctions:KMockGenerics.kt$KMockGenerics : GenericResolver</ID>
    <ID>TooManyFunctions:KMockMultiSourceAggregator.kt$KMockMultiSourceAggregator : MultiSourceAggregatorBaseSourceAggregator</ID>
    <ID>TooManyFunctions:KMockNonIntrusiveInvocationGenerator.kt$KMockNonIntrusiveInvocationGenerator : NonIntrusiveInvocationGenerator</ID>
    <ID>TooManyFunctions:KMockProcessor.kt$KMockProcessor : SymbolProcessor</ID>
    <ID>TooManyFunctions:KMockProxyAccessMethodGenerator.kt$KMockProxyAccessMethodGenerator : ProxyAccessMethodGenerator</ID>
    <ID>TooManyFunctions:KMockProxyNameSelector.kt$KMockProxyNameSelector : ProxyNameSelectorProxyNameCollector</ID>
    <ID>TooManyFunctions:KMockReceiverGenerator.kt$KMockReceiverGenerator : ReceiverGenerator</ID>
    <ID>TooManyFunctions:KMockSingleSourceAggregator.kt$KMockSingleSourceAggregator : SingleSourceAggregatorBaseSourceAggregator</ID>
    <ID>TooManyFunctions:KmpSourceSetsConfigurator.kt$KmpSourceSetsConfigurator : SourceSetConfigurator</ID>
    <ID>TooManyFunctions:ParameterTypeMapping.kt$tech.antibytes.kmock.processor.kotlinpoet.ParameterTypeMapping.kt</ID>
    <ID>TooManyFunctions:PropertyProxy.kt$PropertyProxy&lt;Value&gt; : PropertyProxy</ID>
    <ID>TooManyFunctions:Shared.kt$tech.antibytes.kmock.processor.kotlinpoet.Shared.kt</ID>
    <ID>TooManyFunctions:SyncFunProxy.kt$SyncFunProxy&lt;ReturnValue, SideEffect : Function&lt;ReturnValue&gt;&gt; : SyncFunProxyFunProxy</ID>
    <ID>TooManyFunctions:VerificationAndAssertion.kt$tech.antibytes.kmock.verification.VerificationAndAssertion.kt</ID>
    <ID>TooManyFunctions:VerificationChain.kt$VerificationChain : AssertionChainChainedAssertion</ID>
    <ID>UnnecessaryParentheses:ArgumentMatcherSpec.kt$ArgumentMatcherSpec$(array.map { value -&gt; isSame(value) }.toTypedArray())</ID>
    <ID>UnnecessaryParentheses:KMockFactoryEntryPointGenerator.kt$KMockFactoryEntryPointGenerator$( template.hasGenerics() || spyContainer.isSpyable(null, template.packageName, template.templateName) )</ID>
    <ID>UnnecessaryParentheses:KMockProxyNameSelector.kt$KMockProxyNameSelector$(name in nameCollector || "_$name" in nameCollector)</ID>
    <ID>UnnecessaryParentheses:MemberReturnTypeInfoExtensions.kt$(this.generic != null &amp;&amp; (this.generic.types.size &gt; 1 || this.generic.doCastReturnType))</ID>
    <ID>UnnecessaryParentheses:ProxyResolving.kt$(proxyType.isNullable || isMarkedNullable)</ID>
    <ID>UnnecessaryParentheses:SampleControllerAutoSpyFactorySpec.kt$SampleControllerAutoSpyFactorySpec$(actual as Any)</ID>
    <ID>UnnecessaryParentheses:SampleControllerAutoSpyFactorySpec.kt$SampleControllerAutoSpyFactorySpec$(domainObject as Any)</ID>
    <ID>UnnecessaryParentheses:SampleControllerAutoSpyFactorySpec.kt$SampleControllerAutoSpyFactorySpec$(domainObjectInstance as Any)</ID>
    <ID>UnusedImports:Common.kt$import mock.template.relaxed.relaxed</ID>
    <ID>UnusedImports:Platform.kt$import mock.template.relaxed.relaxed</ID>
    <ID>UnusedImports:Regular1.kt$import multi.template.mixed.PlatformContractRegular</ID>
    <ID>UnusedImports:Regular3.kt$import tech.antibytes.kmock.MultiMockCommon</ID>
    <ID>UnusedImports:Relaxed.kt$import mock.template.methodreceiver.relaxed</ID>
    <ID>UnusedImports:Relaxed.kt$import mock.template.propertyreceiver.relaxed</ID>
    <ID>UnusedImports:Relaxed.kt$import mock.template.spy.relaxed</ID>
    <ID>UnusedImports:Relaxed.kt$import mock.template.typealiaz.smooth</ID>
    <ID>UnusedImports:Shared.kt$import mock.template.relaxed.relaxed</ID>
    <ID>UnusedImports:Shared.kt$import tech.antibytes.kmock.MockShared</ID>
    <ID>UnusedImports:build.gradle.kts$import org.jetbrains.kotlin.gradle.dsl.KotlinMultiplatformExtension</ID>
    <ID>UnusedImports:build.gradle.kts$import tech.antibytes.gradle.configuration.isIdea</ID>
    <ID>UnusedParameter:Relaxed.kt$id: String</ID>
    <ID>UnusedPrivateProperty:AndroidSampleControllerAutoStubSpec.kt$AndroidSampleControllerAutoStubSpec$private val androidThing = AndroidThingMock()</ID>
    <ID>UnusedPrivateProperty:KMockFactoryGenerator.kt$KMockFactoryGenerator$private val logger: KSPLogger</ID>
    <ID>UnusedPrivateProperty:KMockGenerator.kt$KMockGenerator$private val logger: KSPLogger</ID>
    <ID>UnusedPrivateProperty:KMockMethodGenerator.kt$KMockMethodGenerator$private val logger: KSPLogger</ID>
    <ID>UnusedPrivateProperty:KMockMultiInterfaceBinder.kt$KMockMultiInterfaceBinder$private val logger: KSPLogger</ID>
    <ID>UnusedPrivateProperty:KMockProcessor.kt$KMockProcessor$private val logger: KSPLogger</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val androidInstrumentedTest by getting { dependsOn(concurrentTest) dependencies { implementation(antibytesCatalog.jvm.test.junit.junit4) implementation(antibytesCatalog.jvm.test.kotlin.junit4) implementation(antibytesCatalog.android.test.junit.core) implementation(antibytesCatalog.android.test.junit.ktx) implementation(antibytesCatalog.android.test.compose.junit4) implementation(antibytesCatalog.android.test.espresso.core) implementation(antibytesCatalog.android.test.uiAutomator) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val androidInstrumentedTest by getting { dependsOn(concurrentTest) kotlin.srcDir("build/generated/ksp/android/androidInstrumentedTest") dependencies { implementation(antibytesCatalog.android.test.junit.core) implementation(antibytesCatalog.android.test.junit.ktx) implementation(antibytesCatalog.android.test.compose.junit4) implementation(antibytesCatalog.android.test.espresso.core) implementation(antibytesCatalog.android.test.uiAutomator) implementation(antibytesCatalog.jvm.test.junit.junit4) implementation(antibytesCatalog.jvm.test.kotlin.junit4) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val androidMain by getting { dependencies { implementation(antibytesCatalog.jvm.kotlin.stdlib.jdk8) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val androidMain by getting { dependsOn(concurrentMain) dependencies { implementation(antibytesCatalog.jvm.kotlin.stdlib.jdk8) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val androidUnitTest by getting { dependencies { implementation(antibytesCatalog.android.test.junit.core) implementation(antibytesCatalog.jvm.test.kotlin.junit4) implementation(antibytesCatalog.android.test.robolectric) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val androidUnitTest by getting { dependsOn(concurrentTest) dependencies { implementation(antibytesCatalog.jvm.test.junit.junit4) implementation(antibytesCatalog.jvm.test.kotlin.junit4) implementation(antibytesCatalog.android.test.robolectric) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val androidUnitTest by getting { dependsOn(concurrentTest) kotlin.srcDir("build/generated/ksp/android/androidUnitTest") dependencies { implementation(antibytesCatalog.jvm.test.junit.junit4) implementation(antibytesCatalog.jvm.test.kotlin.junit4) implementation(antibytesCatalog.android.test.robolectric) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val appleMain by getting { dependsOn(nativeMain) }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val appleTest by getting { dependsOn(nativeTest) }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val commonMain by getting { dependencies { implementation(antibytesCatalog.common.kotlin.stdlib) implementation(antibytesCatalog.common.kotlinx.atomicfu.core) implementation(antibytesCatalog.common.stately.collections) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val commonTest by getting { dependencies { implementation(antibytesCatalog.common.test.kotlin.core) implementation(antibytesCatalog.testUtils.core) implementation(antibytesCatalog.testUtils.annotations) implementation(antibytesCatalog.testUtils.coroutine) implementation(antibytesCatalog.kfixture) implementation(antibytesCatalog.common.test.kotlinx.coroutines) implementation(antibytesCatalog.common.stately.collections) implementation(antibytesCatalog.common.stately.concurrency) implementation(antibytesCatalog.common.stately.freeze) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val iosSimulatorArm64Main by getting { dependsOn(iosMain) }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val iosSimulatorArm64Test by getting { dependsOn(iosTest) }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val iosX64Test by getting { kotlin.srcDir("build/generated/ksp/iosX64/iosX64Test") dependsOn(iosTest) }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val jsMain by getting { dependencies { implementation(antibytesCatalog.js.kotlin.stdlib) implementation(antibytesCatalog.js.kotlinx.nodeJs) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val jsTest by getting { dependencies { implementation(antibytesCatalog.js.test.kotlin.core) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val jsTest by getting { kotlin.srcDir("build/generated/ksp/js/jsTest") dependencies { implementation(antibytesCatalog.js.test.kotlin.core) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val jvmMain by getting { dependencies { implementation(antibytesCatalog.jvm.kotlin.stdlib.jdk) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val jvmMain by getting { dependsOn(concurrentMain) dependencies { implementation(antibytesCatalog.jvm.kotlin.stdlib.jdk) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val jvmTest by getting { dependencies { implementation(antibytesCatalog.jvm.test.kotlin.core) implementation(antibytesCatalog.jvm.test.junit.junit4) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val jvmTest by getting { dependsOn(concurrentTest) dependencies { implementation(antibytesCatalog.jvm.test.kotlin.core) implementation(antibytesCatalog.jvm.test.junit.junit4) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val jvmTest by getting { kotlin.srcDir("build/generated/ksp/jvm/jvmTest") dependsOn(concurrentTest) dependencies { implementation(antibytesCatalog.jvm.test.kotlin.core) implementation(antibytesCatalog.jvm.test.junit.junit4) } }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val linuxX64Main by getting { dependsOn(nativeMain) }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val linuxX64Main by getting { dependsOn(otherMain) }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val linuxX64Test by getting { dependsOn(nativeTest) }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val linuxX64Test by getting { kotlin.srcDir("src-gen/generated/ksp/linuxX64/linuxX64Test") dependsOn(otherTest) }</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val nativeMain by getting</ID>
    <ID>UnusedPrivateProperty:build.gradle.kts$val nativeTest by getting</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature ( mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;,) -&gt; kotlin.Any!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (L) -&gt; kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (T) -&gt; T!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (T) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (T, L) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Any, kotlin.collections.Map&lt;kotlin.String, kotlin.String&gt;) -&gt; kotlin.collections.Map&lt;kotlin.String, kotlin.String&gt;!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Array&lt;out T&gt;) -&gt; T!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Array&lt;out kotlin.Function1&lt;mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;, mock.template.typealiaz.GenericsAccess&lt;kotlin.Any&gt;&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Char, kotlin.Array&lt;out kotlin.collections.Map&lt;kotlin.String, kotlin.IntArray&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;) -&gt; kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Int, kotlin.Array&lt;out kotlin.collections.Map&lt;kotlin.String, kotlin.String&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Long, kotlin.Array&lt;out T&gt;) -&gt; T!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Long, kotlin.Array&lt;out T&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.collections.Map&lt;kotlin.String, kotlin.String&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (mock.template.typealiaz.GenericsAccess&lt;T&gt;, X) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (mock.template.typealiaz.GenericsAccess&lt;mock.template.typealiaz.GenericsAccess&lt;kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Access.kt$AccessMock$throw IllegalStateException("""Unknown property ${reference.name}!""")</ID>
    <ID>UseCheckOrError:AssertionsStub.kt$AssertionsStub$throw IllegalStateException("Missing SideEffect hasBeenCalledAtIndex.")</ID>
    <ID>UseCheckOrError:AssertionsStub.kt$AssertionsStub$throw IllegalStateException("Missing SideEffect hasBeenCalledWithAtIndex.")</ID>
    <ID>UseCheckOrError:AssertionsStub.kt$AssertionsStub$throw IllegalStateException("Missing SideEffect hasBeenCalledWithVoidAtIndex.")</ID>
    <ID>UseCheckOrError:AssertionsStub.kt$AssertionsStub$throw IllegalStateException("Missing SideEffect hasBeenCalledWithoutAtIndex.")</ID>
    <ID>UseCheckOrError:AssertionsStub.kt$AssertionsStub$throw IllegalStateException("Missing SideEffect hasBeenStrictlyCalledWithAtIndex.")</ID>
    <ID>UseCheckOrError:AssertionsStub.kt$AssertionsStub$throw IllegalStateException("Missing SideEffect wasGottenAtIndex.")</ID>
    <ID>UseCheckOrError:AssertionsStub.kt$AssertionsStub$throw IllegalStateException("Missing SideEffect wasSetAtIndex.")</ID>
    <ID>UseCheckOrError:AssertionsStub.kt$AssertionsStub$throw IllegalStateException("Missing SideEffect wasSetToAtIndex.")</ID>
    <ID>UseCheckOrError:AsyncFun.kt$AsyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend ( kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, L, kotlin.Int, T,) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:AsyncFun.kt$AsyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend () -&gt; L!""")</ID>
    <ID>UseCheckOrError:AsyncFun.kt$AsyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend () -&gt; T!""")</ID>
    <ID>UseCheckOrError:AsyncFun.kt$AsyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend () -&gt; kotlin.Int!""")</ID>
    <ID>UseCheckOrError:AsyncFun.kt$AsyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend () -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:AsyncFun.kt$AsyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend (T) -&gt; T!""")</ID>
    <ID>UseCheckOrError:AsyncFun.kt$AsyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend (kotlin.Array&lt;out L&gt;) -&gt; kotlin.Any!""")</ID>
    <ID>UseCheckOrError:AsyncFun.kt$AsyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend (kotlin.Array&lt;out kotlin.Int&gt;) -&gt; kotlin.Any!""")</ID>
    <ID>UseCheckOrError:AsyncFun.kt$AsyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend (kotlin.Int, kotlin.Any) -&gt; kotlin.Any!""")</ID>
    <ID>UseCheckOrError:BuildIn.kt$BuildInMock$throw IllegalStateException("""Unknown method ${reference.name} with signature () -&gt; kotlin.Int!""")</ID>
    <ID>UseCheckOrError:BuildIn.kt$BuildInMock$throw IllegalStateException("""Unknown method ${reference.name} with signature () -&gt; kotlin.String!""")</ID>
    <ID>UseCheckOrError:BuildIn.kt$BuildInMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Any?) -&gt; kotlin.Boolean!""")</ID>
    <ID>UseCheckOrError:BuildIn.kt$BuildInMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Int, kotlin.Any) -&gt; kotlin.Any!""")</ID>
    <ID>UseCheckOrError:KMockCodeGenerator.kt$KMockCodeGenerator$throw IllegalStateException("Failed to make parent directories of ${file.nameWithoutExtension}.")</ID>
    <ID>UseCheckOrError:KMockProxyNameSelector.kt$KMockProxyNameSelector$throw IllegalStateException("Unexpected Type ${type::class.simpleName}!")</ID>
    <ID>UseCheckOrError:KSExtensions.kt$throw IllegalStateException("Malformed class name!")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature ( kotlin.String, kotlin.CharArray, kotlin.Boolean, kotlin.Int,) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature () -&gt; T!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature () -&gt; T?!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature () -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (T) -&gt; R!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (T) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (T, R) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (T?) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (U) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (W) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Any) -&gt; kotlin.String!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Any) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Array&lt;out T&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Array&lt;out T?&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Array&lt;out kotlin.Array&lt;kotlin.Any&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Int) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend () -&gt; T!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend (R, kotlin.Array&lt;out T&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend (T) -&gt; R!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend (T) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend (T, R) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown method ${reference.name} with signature suspend (kotlin.Array&lt;out T&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:Overloaded.kt$OverloadedMock$throw IllegalStateException("""Unknown property ${reference.name}!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature ( mock.template.typealiaz.Alias977&lt;kotlin.Any&gt;, mock.template.typealiaz.Alias923, mock.template.typealiaz.Alias921,) -&gt; kotlin.Any!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (L) -&gt; mock.template.typealiaz.Alias921!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (T) -&gt; T!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (T) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (T, L) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Any, mock.template.typealiaz.Alias973&lt;kotlin.String&gt;?) -&gt; mock.template.typealiaz.Alias973&lt;kotlin.String&gt;!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Array&lt;out T&gt;) -&gt; T!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Char, kotlin.Array&lt;out mock.template.typealiaz.Alias973&lt;kotlin.IntArray&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Function1&lt;kotlin.Any, kotlin.Unit&gt;, kotlin.Function1&lt;kotlin.Any, kotlin.Any&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Int, kotlin.Array&lt;out mock.template.typealiaz.Alias973&lt;kotlin.String&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Long, kotlin.Array&lt;out T&gt;) -&gt; T!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Long, kotlin.Array&lt;out T&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (mock.template.typealiaz.Alias921, mock.template.typealiaz.Alias923) -&gt; mock.template.typealiaz.Alias923!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (mock.template.typealiaz.Alias977&lt;T&gt;, X) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (mock.template.typealiaz.Alias977&lt;mock.template.typealiaz.Alias977&lt;mock.template.typealiaz.Alias921&gt;&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (mock.template.typealiaz.Alias999&lt;kotlin.String&gt;) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:PreventResolving.kt$PreventResolvingMock$throw IllegalStateException("""Unknown property ${reference.name}!""")</ID>
    <ID>UseCheckOrError:Property.kt$PropertyMock$throw IllegalStateException("""Unknown property ${reference.name}!""")</ID>
    <ID>UseCheckOrError:SideEffectChain.kt$SideEffectChain$throw IllegalStateException("No SideEffect was stored.")</ID>
    <ID>UseCheckOrError:StringExtension.kt$throw IllegalStateException("Expected non null class name!")</ID>
    <ID>UseCheckOrError:SyncFun.kt$SyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature ( kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int, kotlin.Int,) -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:SyncFun.kt$SyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature () -&gt; L!""")</ID>
    <ID>UseCheckOrError:SyncFun.kt$SyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature () -&gt; T!""")</ID>
    <ID>UseCheckOrError:SyncFun.kt$SyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature () -&gt; kotlin.Int!""")</ID>
    <ID>UseCheckOrError:SyncFun.kt$SyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature () -&gt; kotlin.Unit!""")</ID>
    <ID>UseCheckOrError:SyncFun.kt$SyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (T) -&gt; T!""")</ID>
    <ID>UseCheckOrError:SyncFun.kt$SyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Array&lt;out kotlin.Any&gt;) -&gt; kotlin.Any!""")</ID>
    <ID>UseCheckOrError:SyncFun.kt$SyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Array&lt;out kotlin.Int&gt;) -&gt; kotlin.Any!""")</ID>
    <ID>UseCheckOrError:SyncFun.kt$SyncFunMock$throw IllegalStateException("""Unknown method ${reference.name} with signature (kotlin.Int, kotlin.Any) -&gt; kotlin.Any!""")</ID>
    <ID>UseCheckOrError:TypeParameterResolver.kt$Resolver$throw IllegalStateException( "Unknown type parameter $index, only ${parametersMap.keys} are known.", )</ID>
    <ID>UseDataClass:NonIntrusiveFunConfiguratorSpec.kt$NonIntrusiveFunConfiguratorSpec$MockOfMocks</ID>
    <ID>UseDataClass:PropertyProxySpec.kt$PropertyProxySpec$Implementation&lt;T&gt;</ID>
    <ID>UseDataClass:PropertyProxyUnfrozenSpec.kt$PropertyProxyUnfrozenSpec$Implementation&lt;T&gt;</ID>
    <ID>UseIfInsteadOfWhen:Actual.kt$when (Mock::class) { factory.template.mixed.CommonMock::class -&gt; factory.template.mixed.CommonMock&lt;L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.mixed.Common&lt;L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:Actual.kt$when (Mock::class) { factory.template.mixed.PlatformMock::class -&gt; factory.template.mixed.PlatformMock&lt;P&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.mixed.Platform&lt;P&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:Actual.kt$when (Mock::class) { factory.template.mixed.SharedMock::class -&gt; factory.template.mixed.SharedMock&lt;K&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.mixed.Shared&lt;K&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:ActualFactory.kt$when (Mock::class) { multi.CommonMultiMock::class -&gt; multi.CommonMultiMock&lt;multi.CommonMultiMock&lt;*&gt;&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:ArgumentMatcher.kt$when (this) { !is GetOrSet.Set -&gt; false else -&gt; { val expected = wrapValue(constraint) return expected.matches(this.value) } }</ID>
    <ID>UseIfInsteadOfWhen:CommonActual.kt$when (Mock::class) { factory.template.alias.AliasCommonMock::class -&gt; factory.template.alias.AliasCommonMock(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.alias.Common?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:CommonActual.kt$when (Mock::class) { factory.template.freeze.CommonMock::class -&gt; factory.template.freeze.CommonMock(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.freeze.Common?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:CommonActual.kt$when (Mock::class) { factory.template.generic.CommonMock::class -&gt; factory.template.generic.CommonMock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.generic.Common&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:CommonActual.kt$when (Mock::class) { factory.template.interfaze.Common1Mock::class -&gt; factory.template.interfaze.Common1Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.interfaze.Common1&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:CommonActual.kt$when (Mock::class) { factory.template.regular.CommonMock::class -&gt; factory.template.regular.CommonMock(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.regular.Common?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:CommonActual.kt$when (Mock::class) { factory.template.relaxed.CommonMock::class -&gt; factory.template.relaxed.CommonMock(collector = collector, relaxed = relaxed, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.relaxed.Common?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:CommonActual.kt$when (Mock::class) { factory.template.spiesonly.Common1Mock::class -&gt; factory.template.spiesonly.Common1Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.spiesonly.Common1&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:CommonActual.kt$when (Mock::class) { factory.template.spiesonly.Common2Mock::class -&gt; factory.template.spiesonly.Common2Mock(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.spiesonly.Common2?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:CommonActual.kt$when (Mock::class) { factory.template.spy.Common1Mock::class -&gt; factory.template.spy.Common1Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.spy.Common1&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:CommonActual.kt$when (Mock::class) { factory.template.spy.Common2Mock::class -&gt; factory.template.spy.Common2Mock(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.spy.Common2?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:Dangerfile.df.kts$when { pullRequest.body == null -&gt; warn("Please include a description of your PR changes") else -&gt; {/* do nothing*/} }</ID>
    <ID>UseIfInsteadOfWhen:Generic.kt$when (Mock::class) { factory.template.alias.AliasGenericMock::class -&gt; factory.template.alias.AliasGenericMock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.alias.Generic&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:Platform.kt$when (Mock::class) { factory.template.alias.AliasPlatformMock::class -&gt; factory.template.alias.AliasPlatformMock(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.alias.Platform?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:Platform.kt$when (Mock::class) { factory.template.freeze.PlatformMock::class -&gt; factory.template.freeze.PlatformMock(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.freeze.Platform?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:Platform.kt$when (Mock::class) { factory.template.generic.PlatformMock::class -&gt; factory.template.generic.PlatformMock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.generic.Platform&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:Platform.kt$when (Mock::class) { factory.template.regular.PlatformMock::class -&gt; factory.template.regular.PlatformMock(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.regular.Platform?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:Platform.kt$when (Mock::class) { factory.template.relaxed.PlatformMock::class -&gt; factory.template.relaxed.PlatformMock(collector = collector, relaxed = relaxed, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.relaxed.Platform?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:Platform.kt$when (Mock::class) { factory.template.spiesonly.Platform1Mock::class -&gt; factory.template.spiesonly.Platform1Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.spiesonly.Platform1&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:Platform.kt$when (Mock::class) { factory.template.spy.Platform1Mock::class -&gt; factory.template.spy.Platform1Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.spy.Platform1&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:RegularActualFactory.kt$when (Mock::class) { multi.CommonMultiMock::class -&gt; multi.CommonMultiMock&lt;multi.CommonMultiMock&lt;*&gt;&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:RegularActualFactory.kt$when (Mock::class) { multi.PlatformMultiMock::class -&gt; multi.PlatformMultiMock&lt;multi.PlatformMultiMock&lt;*&gt;&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:RegularActualFactory.kt$when (Mock::class) { multi.SharedMultiMock::class -&gt; multi.SharedMultiMock&lt;multi.SharedMultiMock&lt;*&gt;&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SharedActual.kt$when (Mock::class) { factory.template.customshared.Shared1Mock::class -&gt; factory.template.customshared.Shared1Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.customshared.Shared1&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SharedActual.kt$when (Mock::class) { factory.template.customshared.Shared2Mock::class -&gt; factory.template.customshared.Shared2Mock(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.customshared.Shared2?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SharedActual.kt$when (Mock::class) { factory.template.generic.Shared1Mock::class -&gt; factory.template.generic.Shared1Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.generic.Shared1&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SharedActual.kt$when (Mock::class) { factory.template.generic.Shared2Mock::class -&gt; factory.template.generic.Shared2Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.generic.Shared2&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SharedActual.kt$when (Mock::class) { factory.template.generic.Shared3Mock::class -&gt; factory.template.generic.Shared3Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.generic.Shared3&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SharedActual.kt$when (Mock::class) { factory.template.interfaze.Shared1Mock::class -&gt; factory.template.interfaze.Shared1Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.interfaze.Shared1&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SharedActual.kt$when (Mock::class) { factory.template.interfaze.Shared4Mock::class -&gt; factory.template.interfaze.Shared4Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.interfaze.Shared.Shared4&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SharedActual.kt$when (Mock::class) { factory.template.spiesonly.Shared1Mock::class -&gt; factory.template.spiesonly.Shared1Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.spiesonly.Shared1&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SharedActual.kt$when (Mock::class) { factory.template.spiesonly.Shared2Mock::class -&gt; factory.template.spiesonly.Shared2Mock(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.spiesonly.Shared2?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SharedActual.kt$when (Mock::class) { factory.template.spy.Shared1Mock::class -&gt; factory.template.spy.Shared1Mock&lt;K, L&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.spy.Shared1&lt;K, L&gt;?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SharedActual.kt$when (Mock::class) { factory.template.spy.Shared2Mock::class -&gt; factory.template.spy.Shared2Mock(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze, spyOn = spyOn as factory.template.spy.Shared2?) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SpiedRegularActualFactory.kt$when (Mock::class) { multi.CommonMultiMock::class -&gt; multi.CommonMultiMock&lt;multi.CommonMultiMock&lt;*&gt;&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SpiedRegularActualFactory.kt$when (Mock::class) { multi.PlatformMultiMock::class -&gt; multi.PlatformMultiMock&lt;multi.PlatformMultiMock&lt;*&gt;&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseIfInsteadOfWhen:SpiedRegularActualFactory.kt$when (Mock::class) { multi.SharedMultiMock::class -&gt; multi.SharedMultiMock&lt;multi.SharedMultiMock&lt;*&gt;&gt;(collector = collector, relaxUnitFun = relaxUnitFun, freeze = freeze) as Mock else -&gt; throw RuntimeException("Unknown Interface ${Mock::class.simpleName}.") }</ID>
    <ID>UseLet:MethodGeneratorHelper.kt$MethodGeneratorHelper$if (generics == null) { null } else { genericResolver.mapProxyGenerics( classScope, generics, methodWideResolver, ) }</ID>
    <ID>UseLet:SpyGuard.kt$if (this != null) { spyOn } else { null }</ID>
    <ID>UseRequire:Operators.kt$throw IllegalArgumentException("$method cannot be applied to handles which refer to different proxies.")</ID>
    <ID>UseRequire:and.kt$and$throw IllegalArgumentException("and should not be empty!")</ID>
    <ID>UseRequire:or.kt$or$throw IllegalArgumentException("or should not be empty!")</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _barWithAlias699: KMockContract.SyncFunProxy&lt;Unit, (Alias699&lt;String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_barWithAlias699", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _barWithLongTAlias699s: KMockContract.SyncFunProxy&lt;Alias699&lt;out Alias677&lt;Alias673&lt;Int&gt;&gt;&gt;, (Long, Array&lt;out Alias699&lt;out Alias677&lt;Alias673&lt;Int&gt;&gt;&gt;&gt;) -&gt; Alias699&lt;out Alias677&lt;Alias673&lt;Int&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_barWithLongTAlias699s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _barWithTAlias699s: KMockContract.SyncFunProxy&lt;Alias699&lt;String&gt;, (Array&lt;out Alias699&lt;String&gt;&gt;) -&gt; Alias699&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_barWithTAlias699s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _barWithTAlias703: KMockContract.SyncFunProxy&lt;Unit, (Alias703&lt;Alias623, in Alias677&lt;Alias673&lt;Int&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_barWithTAlias703", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _bars: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Alias703&lt;Alias623, in Alias677&lt;Alias673&lt;Int&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_bars", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _doAnythingElseWithAlias621Alias623: KMockContract.SyncFunProxy&lt;Alias623, (Alias621, Alias623) -&gt; Alias623&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_doAnythingElseWithAlias621Alias623", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _doAnythingElseWithAlias677: KMockContract.SyncFunProxy&lt;Unit, (Alias677&lt;Alias677&lt;Alias621&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_doAnythingElseWithAlias677", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _doElse: KMockContract.SyncFunProxy&lt;Unit, (Function1&lt;Any, Unit&gt;, Function1&lt;Any, Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_doElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _doMoreElse: KMockContract.SyncFunProxy&lt;Unit, (Function1&lt;Any, Unit&gt;, Function1&lt;Any, Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_doMoreElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _doOtherThing: KMockContract.SyncFunProxy&lt;Unit, (Alias677&lt;Alias677&lt;Alias621&gt;&gt;, Comparable&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_doOtherThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Any, ( Alias677&lt;Any&gt;, Alias623, Alias621, ) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _doSomethingElseWithTAlias621LAlias623: KMockContract.SyncFunProxy&lt;Unit, (Alias621, Alias623) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_doSomethingElseWithTAlias621LAlias623", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _doSomethingElseWithTAlias677: KMockContract.SyncFunProxy&lt;Alias677&lt;Any?&gt;, (Alias677&lt;Any?&gt;) -&gt; Alias677&lt;Any?&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_doSomethingElseWithTAlias677", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _fooWithAnyAlias673: KMockContract.SyncFunProxy&lt;Alias673&lt;String&gt;, (Any, Alias673&lt;String&gt;) -&gt; Alias673&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_fooWithAnyAlias673", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _fooWithCharAlias673s: KMockContract.SyncFunProxy&lt;Unit, (Char, Array&lt;out Alias673&lt;IntArray&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_fooWithCharAlias673s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _fooWithIntAlias673s: KMockContract.SyncFunProxy&lt;Unit, (Int, Array&lt;out Alias673&lt;out String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_fooWithIntAlias673s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _fooWithLongTAlias673s: KMockContract.SyncFunProxy&lt;Unit, (Long, Array&lt;out Alias673&lt;out Alias677&lt;Alias673&lt;Int&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_fooWithLongTAlias673s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _fooWithTAlias673: KMockContract.SyncFunProxy&lt;Unit, (Alias673&lt;Any?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_fooWithTAlias673", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _prop: KMockContract.PropertyProxy&lt;Alias673&lt;String&gt;&gt; = ProxyFactory.createPropertyProxy("mock.template.typealiaz.AccessMock#_prop", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _rol: KMockContract.SyncFunProxy&lt;Unit, (Alias700&lt;Any?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_rol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _run: KMockContract.SyncFunProxy&lt;Alias621, (L) -&gt; Alias621&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_run", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Access.kt$AccessMock$public val _toll: KMockContract.SyncFunProxy&lt;Unit, (Alias677&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.AccessMock#_toll", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$private val __spyOn: Platform&lt;K, L&gt;? = spyOn</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$public val _barWithInt: KMockContract.SyncFunProxy&lt;Any, (Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.AliasPlatformMock#_barWithInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$public val _barWithInts: KMockContract.SyncFunProxy&lt;Any, (IntArray) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.AliasPlatformMock#_barWithInts", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$public val _buzzWithString: KMockContract.AsyncFunProxy&lt;L, suspend (String) -&gt; L&gt; = ProxyFactory.createAsyncFunProxy("mock.template.spy.AliasPlatformMock#_buzzWithString", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$public val _buzzWithStrings: KMockContract.AsyncFunProxy&lt;L, suspend (Array&lt;out String&gt;) -&gt; L&gt; = ProxyFactory.createAsyncFunProxy("mock.template.spy.AliasPlatformMock#_buzzWithStrings", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.AliasPlatformMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.AliasPlatformMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$public val _fooWithZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.AliasPlatformMock#_fooWithZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.AliasPlatformMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.AliasPlatformMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$public val _ozz: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.spy.AliasPlatformMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.spy.AliasPlatformMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Alias.kt$AliasPlatformMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.AliasPlatformMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:AsserterBase.kt$AsserterBase$protected abstract val _references: MutableList&lt;Reference&gt;</ID>
    <ID>VariableNaming:AsyncFun.kt$AsyncFunMock$public val _bar: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.AsyncFunMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:AsyncFun.kt$AsyncFunMock$public val _fol: KMockContract.AsyncFunProxy&lt;Any, suspend () -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.AsyncFunMock#_fol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:AsyncFun.kt$AsyncFunMock$public val _foo: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.AsyncFunMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:AsyncFun.kt$AsyncFunMock$public val _izz: KMockContract.AsyncFunProxy&lt;Any, suspend (Array&lt;out L&gt;) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.AsyncFunMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:AsyncFun.kt$AsyncFunMock$public val _lol: KMockContract.AsyncFunProxy&lt;Any?, suspend (Any?) -&gt; Any?&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.AsyncFunMock#_lol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:AsyncFun.kt$AsyncFunMock$public val _ozz: KMockContract.AsyncFunProxy&lt;Any, suspend (IntArray) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.AsyncFunMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:AsyncFun.kt$AsyncFunMock$public val _tuz: KMockContract.AsyncFunProxy&lt;Int, suspend () -&gt; Int&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.AsyncFunMock#_tuz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:AsyncFun.kt$AsyncFunMock$public val _tzz: KMockContract.AsyncFunProxy&lt;T, suspend () -&gt; T&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.AsyncFunMock#_tzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:AsyncFun.kt$AsyncFunMock$public val _uz: KMockContract.AsyncFunProxy&lt;L, suspend () -&gt; L&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.AsyncFunMock#_uz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:AsyncFun.kt$AsyncFunMock$public val _uzz: KMockContract.AsyncFunProxy&lt;Unit, suspend () -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.AsyncFunMock#_uzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:AsyncFun.kt$AsyncFunMock$public val _veryLongMethodNameWithABunchOfVariables: KMockContract.AsyncFunProxy&lt;Unit, suspend ( Int, Int, Int, Int, Int, Int, Int, L, Int, T, ) -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.AsyncFunMock#_veryLongMethodNameWithABunchOfVariables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:BuildIn.kt$BuildInMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.BuildInMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:BuildIn.kt$BuildInMock$public val _foo: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.BuildInMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:BuildIn.kt$BuildInMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.BuildInMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:BuildIn.kt$BuildInMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.BuildInMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _bar: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.CollisionMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _buzz: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.CollisionMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.CollisionMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _foo: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.overloaded.CollisionMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _foo: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.CollisionMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _fooWithAnyInt: KMockContract.SyncFunProxy&lt;Any, (Any, Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CollisionMock#_fooWithAnyInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _fooWithAnyString: KMockContract.SyncFunProxy&lt;Any, (Any, String) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CollisionMock#_fooWithAnyString", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _fooWithAnys: KMockContract.SyncFunProxy&lt;Any, (Array&lt;out Any&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CollisionMock#_fooWithAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _fooWithFunction1: KMockContract.SyncFunProxy&lt;Any, (Function1&lt;Any, Unit&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CollisionMock#_fooWithFunction1", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _fooWithIntAny: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CollisionMock#_fooWithIntAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _fooWithStringAbc: KMockContract.SyncFunProxy&lt;Any, (String, Abc) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CollisionMock#_fooWithStringAbc", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _fooWithStringAny: KMockContract.SyncFunProxy&lt;Any, (String, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CollisionMock#_fooWithStringAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _fooWithStringScopedAbc: KMockContract.SyncFunProxy&lt;Any, (String, Scope.Abc) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CollisionMock#_fooWithStringScopedAbc", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _fooWithTCollision: KMockContract.SyncFunProxy&lt;Unit, (Collision) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CollisionMock#_fooWithTCollision", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _fooWithTLPG: KMockContract.SyncFunProxy&lt;Unit, (LPG) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CollisionMock#_fooWithTLPG", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CollisionMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _hashCode: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.overloaded.CollisionMock#_hashCode", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _hashCode: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.CollisionMock#_hashCode", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _hashCodeWithVoid: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.CollisionMock#_hashCodeWithVoid", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Collision.kt$CollisionMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.CollisionMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Common.kt$AliasCommonMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.alias.AliasCommonMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$AliasCommonMock$public val _foo: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.alias.AliasCommonMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$private val __spyOn: Common&lt;K, L&gt;? = spyOn</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ar: KMockContract.AsyncFunProxy&lt;String, suspend (Array&lt;out Any&gt;) -&gt; String&gt; = ProxyFactory.createAsyncFunProxy("mock.template.relaxed.CommonMock#_ar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ar: KMockContract.SyncFunProxy&lt;Any, (IntArray) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.CommonMock#_ar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bar: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.async.CommonMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bar: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.kmock.CommonMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bar: KMockContract.AsyncFunProxy&lt;String, suspend (Any) -&gt; String&gt; = ProxyFactory.createAsyncFunProxy("mock.template.relaxed.CommonMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bar: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.CommonMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bar: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.property.CommonMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.renamed.CommonMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.CommonMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.sync.CommonMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _barWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_barWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _barWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_barWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _barWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String&gt;&gt;, () -&gt; List&lt;Array&lt;String&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_barWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _blaWithTInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_blaWithTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _blaWithTInts: KMockContract.SyncFunProxy&lt;Unit, (IntArray) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_blaWithTInts", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _blaWithVoid: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_blaWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _blissWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?, () -&gt; Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_blissWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _blissWithZTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_blissWithZTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _blissWithZTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_blissWithZTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _blubbWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_blubbWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _blubbWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String?&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_blubbWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _blubbWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String?&gt;&gt;, () -&gt; List&lt;Array&lt;String?&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_blubbWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bossWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_bossWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bossWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_bossWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bossWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;?&gt;, () -&gt; List&lt;Array&lt;Int&gt;?&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_bossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _brassWithTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_brassWithTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _brassWithTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_brassWithTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _brassWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;, () -&gt; Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_brassWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bussWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_bussWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bussWithZTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_bussWithZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _bussWithZTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_bussWithZTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _buzz: KMockContract.AsyncFunProxy&lt;L, suspend (String) -&gt; L&gt; = ProxyFactory.createAsyncFunProxy("mock.template.spy.CommonMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _buzz: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.CommonMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _buzz: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.property.CommonMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _buzz: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.relaxed.CommonMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _buzzWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_buzzWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _buzzWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_buzzWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.relaxed.CommonMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _doInsideReceiver: KMockContract.SyncFunProxy&lt;Int, (AnythingElse.SomethingInside) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.CommonMock#_doInsideReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _doNothingElse: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.CommonMock#_doNothingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _doNothingElseReceiver: KMockContract.SyncFunProxy&lt;Unit, ( Any, Any, Comparable&lt;Any&gt;, ) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.CommonMock#_doNothingElseReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _doNothingReceiverWithTAny: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.CommonMock#_doNothingReceiverWithTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _doNothingReceiverWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.CommonMock#_doNothingReceiverWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Any, ( Any, Alias0, Alias1, ) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.CommonMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.mixedannotation.CommonMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;Unit, (SomethingElse&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.CommonMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _doSomethingElseReceiver: KMockContract.SyncFunProxy&lt;List&lt;Any&gt;, (SomethingElse&lt;Any&gt;) -&gt; List&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.CommonMock#_doSomethingElseReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _doSomethingReceiver: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.CommonMock#_doSomethingReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.CommonMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.renamed.CommonMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.CommonMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _equalsReceiver: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.CommonMock#_equalsReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _extensionGetter: KMockContract.SyncFunProxy&lt;Int, (Common&lt;*&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_extensionGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _extensionSetter: KMockContract.SyncFunProxy&lt;Unit, (Common&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_extensionSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _foo: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.async.CommonMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _foo: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.kmock.CommonMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _foo: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.overloaded.CommonMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _foo: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.CommonMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _foo: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.property.CommonMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _foo: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.sync.CommonMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _foo: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.CommonMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooBarWithTAny: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.relaxed.CommonMock#_fooBarWithTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooBarWithVoid: KMockContract.SyncFunProxy&lt;K?, () -&gt; K?&gt; = ProxyFactory.createSyncFunProxy("mock.template.relaxed.CommonMock#_fooBarWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithAny: KMockContract.SyncFunProxy&lt;String, (Any) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.relaxed.CommonMock#_fooWithAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithAnyInt: KMockContract.SyncFunProxy&lt;Any, (Any, Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CommonMock#_fooWithAnyInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithAnyString: KMockContract.SyncFunProxy&lt;Any, (Any, String) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CommonMock#_fooWithAnyString", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithAnys: KMockContract.SyncFunProxy&lt;Any, (Array&lt;out Any&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CommonMock#_fooWithAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithFunction1: KMockContract.SyncFunProxy&lt;Any, (Function1&lt;Any, Unit&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CommonMock#_fooWithFunction1", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithIntAny: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CommonMock#_fooWithIntAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithString: KMockContract.SyncFunProxy&lt;L, (String) -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.relaxed.CommonMock#_fooWithString", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithStringAbc: KMockContract.SyncFunProxy&lt;Any, (String, Abc) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CommonMock#_fooWithStringAbc", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithStringAny: KMockContract.SyncFunProxy&lt;Any, (String, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CommonMock#_fooWithStringAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithTCommon: KMockContract.SyncFunProxy&lt;Unit, (Common) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CommonMock#_fooWithTCommon", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithTLPG: KMockContract.SyncFunProxy&lt;Unit, (LPG) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CommonMock#_fooWithTLPG", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_fooWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("mock.template.relaxed.CommonMock#_fooWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.CommonMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _getOtherThing: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_getOtherThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _hashCode: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.overloaded.CommonMock#_hashCode", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.CommonMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.CommonMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _iDo: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.CommonMock#_iDo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _insideGetter: KMockContract.SyncFunProxy&lt;Int, (AnythingElse.SomethingInside) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_insideGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _issWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_issWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _issWithZTAnyRSomeGenericRComparable: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_issWithZTAnyRSomeGenericRComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _izz: KMockContract.AsyncFunProxy&lt;Any, suspend (Array&lt;out Any&gt;) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.async.CommonMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _izz: KMockContract.AsyncFunProxy&lt;Any, suspend (Array&lt;out Any&gt;) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.kmock.CommonMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.CommonMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, (Array&lt;out Any&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.sync.CommonMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _izzWithTSomeGenericTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_izzWithTSomeGenericTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _izzWithTSomeGenericTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_izzWithTSomeGenericTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _izzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_izzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _kssWithTSomeGenericTComparable: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_kssWithTSomeGenericTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _kssWithTSomeGenericTComparableRSomeGenericRComparable: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_kssWithTSomeGenericTComparableRSomeGenericRComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _lolWithArray: KMockContract.SyncFunProxy&lt;Any, (Array&lt;Any?&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_lolWithArray", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _lolWithZTAny: KMockContract.SyncFunProxy&lt;Array&lt;Any?&gt;, (Any?) -&gt; Array&lt;Any?&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_lolWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _lossWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_lossWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _lossWithTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Map&lt;String, String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_lossWithTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _lossWithVoid: KMockContract.SyncFunProxy&lt;Map&lt;String, String&gt;, () -&gt; Map&lt;String, String&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_lossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _lzzWithTSomeGenericTList: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_lzzWithTSomeGenericTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _lzzWithTSomeGenericTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_lzzWithTSomeGenericTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _lzzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_lzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _mutabor: KMockContract.SyncFunProxy&lt;Unit, (Common&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.CommonMock#_mutabor", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _mutaborReceiver: KMockContract.SyncFunProxy&lt;Int, (Common&lt;*&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.CommonMock#_mutaborReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _myThing: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.propertyreceiver.CommonMock#_myThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _nothingGetterWithTL: KMockContract.SyncFunProxy&lt;L, (L) -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_nothingGetterWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _nothingGetterWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_nothingGetterWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _nothingSetterWithTL: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_nothingSetterWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _nothingSetterWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_nothingSetterWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _oo: KMockContract.SyncFunProxy&lt;String, (Array&lt;out Any&gt;) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.relaxed.CommonMock#_oo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _oo: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.CommonMock#_oo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ossWithZRAnyZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Any?, Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_ossWithZRAnyZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ossWithZTAny: KMockContract.SyncFunProxy&lt;Any?, (Any?) -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_ossWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ossWithZTAnyZRAny: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_ossWithZTAnyZRAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _otherThingGetter: KMockContract.SyncFunProxy&lt;String, (L) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_otherThingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _otherThingSetter: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_otherThingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ozz: KMockContract.AsyncFunProxy&lt;Any, suspend (IntArray) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.async.CommonMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ozz: KMockContract.AsyncFunProxy&lt;Any, suspend (IntArray) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.kmock.CommonMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ozz: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.renamed.CommonMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ozz: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.spy.CommonMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ozz: KMockContract.SyncFunProxy&lt;Any, (IntArray) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.sync.CommonMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ozzWithTL: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_ozzWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ozzWithTLs: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out L&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_ozzWithTLs", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _ozzWithVoid: KMockContract.SyncFunProxy&lt;L, () -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_ozzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _pssWithTSomeGeneric: KMockContract.SyncFunProxy&lt;SomeGeneric&lt;String&gt;, (SomeGeneric&lt;String&gt;) -&gt; SomeGeneric&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_pssWithTSomeGeneric", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _pssWithTSomeGenericRSomeGeneric: KMockContract.SyncFunProxy&lt;Unit, (SomeGeneric&lt;String&gt;, SomeGeneric&lt;String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_pssWithTSomeGenericRSomeGeneric", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _rrrWithRSequenceTList: KMockContract.SyncFunProxy&lt;Unit, (Sequence&lt;List&lt;Any&gt;&gt;, List&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_rrrWithRSequenceTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _rrrWithTListRSequence: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Any&gt;, Sequence&lt;List&lt;Any&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_rrrWithTListRSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _rzzWithTSomeGenericTMap: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_rzzWithTSomeGenericTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _rzzWithTSomeGenericTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_rzzWithTSomeGenericTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _rzzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_rzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.generic.CommonMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.relaxed.CommonMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.renamed.CommonMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.spy.CommonMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _thingGetter: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_thingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _thingSetter: KMockContract.SyncFunProxy&lt;Unit, (Something) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_thingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _thingsGetter: KMockContract.SyncFunProxy&lt;List&lt;Any&gt;, (SomethingElse&lt;Any&gt;) -&gt; List&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.CommonMock#_thingsGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.CommonMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.renamed.CommonMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.CommonMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _trrWithTCharSequenceTComparableKCharSequenceKComparable: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_trrWithTCharSequenceTComparableKCharSequenceKComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _trrWithTKString: KMockContract.SyncFunProxy&lt;Unit, (K, String) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_trrWithTKString", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _tzzWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_tzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _tzzWithZTSomeGenericZTList: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_tzzWithZTSomeGenericZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _tzzWithZTSomeGenericZTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_tzzWithZTSomeGenericZTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _uzz: KMockContract.AsyncFunProxy&lt;L, suspend (Array&lt;out String&gt;) -&gt; L&gt; = ProxyFactory.createAsyncFunProxy("mock.template.spy.CommonMock#_uzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _uzzWithTSomeGenericTList: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_uzzWithTSomeGenericTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _uzzWithTSomeGenericTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_uzzWithTSomeGenericTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _uzzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_uzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _xssWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_xssWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMock$public val _xssWithZTAnyRSequenceRCharSequence: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.CommonMock#_xssWithZTAnyRSequenceRCharSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMultiMock$public val _anything: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("multi.CommonMultiMock#_anything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMultiMock$public val _doAnything: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonMultiMock#_doAnything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.CommonMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMultiMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.CommonMultiMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMultiMock$public val _something: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("multi.CommonMultiMock#_something", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Common.kt$CommonMultiMock$public val _somethingElse: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("multi.CommonMultiMock#_somethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _barWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_barWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _barWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_barWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _barWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String&gt;&gt;, () -&gt; List&lt;Array&lt;String&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_barWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _blaWithTInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blaWithTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _blaWithTInts: KMockContract.SyncFunProxy&lt;Unit, (IntArray) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blaWithTInts", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _blaWithVoid: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blaWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _blissWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?, () -&gt; Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blissWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _blissWithZTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blissWithZTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _blissWithZTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blissWithZTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _blubbWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blubbWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _blubbWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String?&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blubbWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _blubbWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String?&gt;&gt;, () -&gt; List&lt;Array&lt;String?&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blubbWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _bossWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_bossWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _bossWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_bossWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _bossWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;?&gt;, () -&gt; List&lt;Array&lt;Int&gt;?&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_bossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _brassWithTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_brassWithTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _brassWithTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_brassWithTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _brassWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;, () -&gt; Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_brassWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _bussWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_bussWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _bussWithZTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_bussWithZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _bussWithZTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_bussWithZTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _buzzWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_buzzWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _buzzWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_buzzWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _compareTo: KMockContract.SyncFunProxy&lt;Int, (GenericCommonContract.Generic3&lt;KMockTypeParameter5, KMockTypeParameter4&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_compareTo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;KMockTypeParameter5, (KMockTypeParameter4) -&gt; KMockTypeParameter5&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _fooWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_fooWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _fooWithZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_fooWithZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _iss: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_iss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _kss: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_kss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _lol: KMockContract.PropertyProxy&lt;KMockTypeParameter2&gt; = ProxyFactory.createPropertyProxy("multi.CommonGenericMultiMock#_lol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _lossWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_lossWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _lossWithTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Map&lt;String, String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_lossWithTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _lossWithVoid: KMockContract.SyncFunProxy&lt;Map&lt;String, String&gt;, () -&gt; Map&lt;String, String&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_lossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _lzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_lzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _ossWithZRAnyZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Any?, Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_ossWithZRAnyZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _ossWithZTAny: KMockContract.SyncFunProxy&lt;Any?, (Any?) -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_ossWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _ossWithZTAnyZRAny: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_ossWithZTAnyZRAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _ozzWithTKMockTypeParameter3: KMockContract.SyncFunProxy&lt;Unit, (KMockTypeParameter3) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_ozzWithTKMockTypeParameter3", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _ozzWithTKMockTypeParameter3s: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out KMockTypeParameter3&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_ozzWithTKMockTypeParameter3s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _ozzWithVoid: KMockContract.SyncFunProxy&lt;KMockTypeParameter1, () -&gt; KMockTypeParameter1&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_ozzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _pss: KMockContract.SyncFunProxy&lt;SomeGeneric&lt;String&gt;, (SomeGeneric&lt;String&gt;) -&gt; SomeGeneric&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_pss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _rzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_rzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _template: KMockContract.PropertyProxy&lt;KMockTypeParameter1&gt; = ProxyFactory.createPropertyProxy("multi.CommonGenericMultiMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _tzz: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_tzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _uzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_uzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _xssWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_xssWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$CommonGenericMultiMock$public val _xssWithZTAnyRSequenceRCharSequence: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_xssWithZTAnyRSequenceRCharSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _barWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_barWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _barWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_barWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _barWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String&gt;&gt;, () -&gt; List&lt;Array&lt;String&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_barWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _blaWithTInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blaWithTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _blaWithTInts: KMockContract.SyncFunProxy&lt;Unit, (IntArray) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blaWithTInts", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _blaWithVoid: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blaWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _blissWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?, () -&gt; Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blissWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _blissWithZTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blissWithZTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _blissWithZTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blissWithZTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _blubbWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blubbWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _blubbWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String?&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blubbWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _blubbWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String?&gt;&gt;, () -&gt; List&lt;Array&lt;String?&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blubbWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _bossWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_bossWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _bossWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_bossWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _bossWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;?&gt;, () -&gt; List&lt;Array&lt;Int&gt;?&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_bossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _brassWithTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_brassWithTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _brassWithTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_brassWithTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _brassWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;, () -&gt; Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_brassWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _bussWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_bussWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _bussWithZTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_bussWithZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _bussWithZTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_bussWithZTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _buzzWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_buzzWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _buzzWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_buzzWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _compareTo: KMockContract.SyncFunProxy&lt;Int, (GenericPlatformContract.Generic3&lt;KMockTypeParameter5, KMockTypeParameter4&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_compareTo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;KMockTypeParameter5, (KMockTypeParameter4) -&gt; KMockTypeParameter5&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _fooWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_fooWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _fooWithZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_fooWithZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _iss: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_iss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _kss: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_kss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _lol: KMockContract.PropertyProxy&lt;KMockTypeParameter2&gt; = ProxyFactory.createPropertyProxy("multi.PlatformGenericMultiMock#_lol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _lossWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_lossWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _lossWithTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Map&lt;String, String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_lossWithTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _lossWithVoid: KMockContract.SyncFunProxy&lt;Map&lt;String, String&gt;, () -&gt; Map&lt;String, String&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_lossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _lzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_lzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _ossWithZRAnyZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Any?, Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_ossWithZRAnyZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _ossWithZTAny: KMockContract.SyncFunProxy&lt;Any?, (Any?) -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_ossWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _ossWithZTAnyZRAny: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_ossWithZTAnyZRAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _ozzWithTKMockTypeParameter3: KMockContract.SyncFunProxy&lt;Unit, (KMockTypeParameter3) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_ozzWithTKMockTypeParameter3", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _ozzWithTKMockTypeParameter3s: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out KMockTypeParameter3&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_ozzWithTKMockTypeParameter3s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _ozzWithVoid: KMockContract.SyncFunProxy&lt;KMockTypeParameter1, () -&gt; KMockTypeParameter1&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_ozzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _pss: KMockContract.SyncFunProxy&lt;SomeGeneric&lt;String&gt;, (SomeGeneric&lt;String&gt;) -&gt; SomeGeneric&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_pss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _rzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_rzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _template: KMockContract.PropertyProxy&lt;KMockTypeParameter1&gt; = ProxyFactory.createPropertyProxy("multi.PlatformGenericMultiMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _tzz: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_tzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _uzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_uzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _xssWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_xssWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$PlatformGenericMultiMock$public val _xssWithZTAnyRSequenceRCharSequence: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_xssWithZTAnyRSequenceRCharSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _barWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_barWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _barWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_barWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _barWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String&gt;&gt;, () -&gt; List&lt;Array&lt;String&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_barWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _blaWithTInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blaWithTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _blaWithTInts: KMockContract.SyncFunProxy&lt;Unit, (IntArray) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blaWithTInts", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _blaWithVoid: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blaWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _blissWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?, () -&gt; Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blissWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _blissWithZTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blissWithZTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _blissWithZTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blissWithZTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _blubbWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blubbWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _blubbWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String?&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blubbWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _blubbWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String?&gt;&gt;, () -&gt; List&lt;Array&lt;String?&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blubbWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _bossWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_bossWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _bossWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_bossWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _bossWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;?&gt;, () -&gt; List&lt;Array&lt;Int&gt;?&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_bossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _brassWithTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_brassWithTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _brassWithTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_brassWithTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _brassWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;, () -&gt; Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_brassWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _bussWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_bussWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _bussWithZTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_bussWithZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _bussWithZTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_bussWithZTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _buzzWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_buzzWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _buzzWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_buzzWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _compareTo: KMockContract.SyncFunProxy&lt;Int, (GenericSharedContract.Generic3&lt;KMockTypeParameter5, KMockTypeParameter4&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_compareTo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;KMockTypeParameter5, (KMockTypeParameter4) -&gt; KMockTypeParameter5&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _fooWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_fooWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _fooWithZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_fooWithZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _iss: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_iss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _kss: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_kss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _lol: KMockContract.PropertyProxy&lt;KMockTypeParameter2&gt; = ProxyFactory.createPropertyProxy("multi.SharedGenericMultiMock#_lol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _lossWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_lossWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _lossWithTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Map&lt;String, String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_lossWithTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _lossWithVoid: KMockContract.SyncFunProxy&lt;Map&lt;String, String&gt;, () -&gt; Map&lt;String, String&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_lossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _lzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_lzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _ossWithZRAnyZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Any?, Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_ossWithZRAnyZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _ossWithZTAny: KMockContract.SyncFunProxy&lt;Any?, (Any?) -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_ossWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _ossWithZTAnyZRAny: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_ossWithZTAnyZRAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _ozzWithTKMockTypeParameter3: KMockContract.SyncFunProxy&lt;Unit, (KMockTypeParameter3) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_ozzWithTKMockTypeParameter3", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _ozzWithTKMockTypeParameter3s: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out KMockTypeParameter3&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_ozzWithTKMockTypeParameter3s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _ozzWithVoid: KMockContract.SyncFunProxy&lt;KMockTypeParameter1, () -&gt; KMockTypeParameter1&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_ozzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _pss: KMockContract.SyncFunProxy&lt;SomeGeneric&lt;String&gt;, (SomeGeneric&lt;String&gt;) -&gt; SomeGeneric&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_pss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _rzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_rzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _template: KMockContract.PropertyProxy&lt;KMockTypeParameter1&gt; = ProxyFactory.createPropertyProxy("multi.SharedGenericMultiMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _tzz: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_tzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _uzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_uzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _xssWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_xssWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:GenericMock.kt$SharedGenericMultiMock$public val _xssWithZTAnyRSequenceRCharSequence: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_xssWithZTAnyRSequenceRCharSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:NoBuildIns.kt$NoBuildInsMock$public val _equalsWithInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.NoBuildInsMock#_equalsWithInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:NoBuildIns.kt$NoBuildInsMock$public val _hashCodeWithAny: KMockContract.SyncFunProxy&lt;Int, (Any) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.NoBuildInsMock#_hashCodeWithAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:NoBuildIns.kt$NoBuildInsMock$public val _toStringWithInt: KMockContract.SyncFunProxy&lt;String, (Int) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.NoBuildInsMock#_toStringWithInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _barWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_barWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _barWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_barWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _barWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String&gt;&gt;, () -&gt; List&lt;Array&lt;String&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_barWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _blaWithTInt: KMockContract.AsyncFunProxy&lt;Unit, suspend (Int) -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.OverloadedMock#_blaWithTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _blaWithTInts: KMockContract.AsyncFunProxy&lt;Unit, suspend (IntArray) -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.OverloadedMock#_blaWithTInts", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _blaWithVoid: KMockContract.AsyncFunProxy&lt;Int, suspend () -&gt; Int&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.OverloadedMock#_blaWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _blissWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?, () -&gt; Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_blissWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _blissWithZTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_blissWithZTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _blissWithZTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_blissWithZTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _blubbWithStringCharArrayBooleanInt: KMockContract.SyncFunProxy&lt;Unit, ( String, CharArray, Boolean, Int, ) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_blubbWithStringCharArrayBooleanInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _blubbWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_blubbWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _blubbWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String?&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_blubbWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _blubbWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String?&gt;&gt;, () -&gt; List&lt;Array&lt;String?&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_blubbWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _bossWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_bossWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _bossWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_bossWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _bossWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;?&gt;, () -&gt; List&lt;Array&lt;Int&gt;?&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_bossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _brassWithTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_brassWithTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _brassWithTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_brassWithTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _brassWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;, () -&gt; Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_brassWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _bussWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_bussWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _bussWithZTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_bussWithZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _bussWithZTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_bussWithZTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _buzzWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_buzzWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _buzzWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_buzzWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _fooWithAny: KMockContract.SyncFunProxy&lt;String, (Any) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_fooWithAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _fooWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_fooWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _fooWithZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_fooWithZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _issWithZTAny: KMockContract.AsyncFunProxy&lt;Any, suspend (Any?) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.OverloadedMock#_issWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _issWithZTAnyRSomeGenericRComparable: KMockContract.AsyncFunProxy&lt;Unit, suspend (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.OverloadedMock#_issWithZTAnyRSomeGenericRComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _izzWithTSomeGenericTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_izzWithTSomeGenericTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _izzWithTSomeGenericTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_izzWithTSomeGenericTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _izzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_izzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _krrWithTInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_krrWithTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _krrWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_krrWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _krrWithZTInt: KMockContract.SyncFunProxy&lt;Unit, (Int?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_krrWithZTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _kssWithTSomeGenericTComparable: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_kssWithTSomeGenericTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _kssWithTSomeGenericTComparableRSomeGenericRComparable: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_kssWithTSomeGenericTComparableRSomeGenericRComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _lolWithArrays: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Array&lt;out Any&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_lolWithArrays", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _lolWithInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_lolWithInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _lossWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_lossWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _lossWithTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Map&lt;String, String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_lossWithTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _lossWithVoid: KMockContract.SyncFunProxy&lt;Map&lt;String, String&gt;, () -&gt; Map&lt;String, String&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_lossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _lzzWithTSomeGenericTList: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_lzzWithTSomeGenericTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _lzzWithTSomeGenericTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_lzzWithTSomeGenericTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _lzzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_lzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _ossWithZRAnyZTAnys: KMockContract.AsyncFunProxy&lt;Unit, suspend (Any?, Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.OverloadedMock#_ossWithZRAnyZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _ossWithZTAny: KMockContract.AsyncFunProxy&lt;Any?, suspend (Any?) -&gt; Any?&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.OverloadedMock#_ossWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _ossWithZTAnyZRAny: KMockContract.AsyncFunProxy&lt;Unit, suspend (Any?, Any?) -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.OverloadedMock#_ossWithZTAnyZRAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _ozzWithTL: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_ozzWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _ozzWithTLs: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out L&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_ozzWithTLs", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _ozzWithVoid: KMockContract.SyncFunProxy&lt;L, () -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_ozzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _pssWithTSomeGeneric: KMockContract.SyncFunProxy&lt;SomeGeneric&lt;String&gt;, (SomeGeneric&lt;String&gt;) -&gt; SomeGeneric&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_pssWithTSomeGeneric", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _pssWithTSomeGenericRSomeGeneric: KMockContract.SyncFunProxy&lt;Unit, (SomeGeneric&lt;String&gt;, SomeGeneric&lt;String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_pssWithTSomeGenericRSomeGeneric", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _rzzWithTSomeGenericTMap: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_rzzWithTSomeGenericTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _rzzWithTSomeGenericTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_rzzWithTSomeGenericTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _rzzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_rzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.access.OverloadedMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _trrWithAny: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_trrWithAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _trrWithInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_trrWithInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _trrWithVoid: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_trrWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _tzzWithVoid: KMockContract.AsyncFunProxy&lt;Any?, suspend () -&gt; Any?&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.OverloadedMock#_tzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _tzzWithZTSomeGenericZTList: KMockContract.AsyncFunProxy&lt;Unit, suspend (Any?) -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.OverloadedMock#_tzzWithZTSomeGenericZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _tzzWithZTSomeGenericZTLists: KMockContract.AsyncFunProxy&lt;Unit, suspend (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.access.OverloadedMock#_tzzWithZTSomeGenericZTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _urrWithU: KMockContract.SyncFunProxy&lt;Unit, (U) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_urrWithU", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _urrWithVoid: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_urrWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _urrWithW: KMockContract.SyncFunProxy&lt;Unit, (W) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_urrWithW", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _urrWithZUCharSequence: KMockContract.SyncFunProxy&lt;Unit, (CharSequence?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_urrWithZUCharSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _uzzWithTSomeGenericTList: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_uzzWithTSomeGenericTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _uzzWithTSomeGenericTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_uzzWithTSomeGenericTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _uzzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_uzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _xssWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_xssWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Overloaded.kt$OverloadedMock$public val _xssWithZTAnyRSequenceRCharSequence: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.OverloadedMock#_xssWithZTAnyRSequenceRCharSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$AliasPlatformMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.alias.AliasPlatformMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$AliasPlatformMock$public val _foo: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.alias.AliasPlatformMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$private val __spyOn: Platform&lt;K, L&gt;? = spyOn</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _ar: KMockContract.AsyncFunProxy&lt;String, suspend (Array&lt;out Any&gt;) -&gt; String&gt; = ProxyFactory.createAsyncFunProxy("mock.template.relaxed.PlatformMock#_ar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bar: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.async.PlatformMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bar: KMockContract.AsyncFunProxy&lt;String, suspend (Any) -&gt; String&gt; = ProxyFactory.createAsyncFunProxy("mock.template.relaxed.PlatformMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bar: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.PlatformMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bar: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.kmock.PlatformMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bar: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.property.PlatformMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.renamed.PlatformMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.sync.PlatformMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _barWithAlias99: KMockContract.SyncFunProxy&lt;Unit, (Alias99&lt;String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_barWithAlias99", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _barWithInt: KMockContract.SyncFunProxy&lt;Any, (Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.PlatformMock#_barWithInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _barWithInts: KMockContract.SyncFunProxy&lt;Any, (IntArray) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.PlatformMock#_barWithInts", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _barWithLongTAlias99s: KMockContract.SyncFunProxy&lt;Alias99&lt;out Alias77&lt;Alias73&lt;Int&gt;&gt;&gt;, (Long, Array&lt;out Alias99&lt;out Alias77&lt;Alias73&lt;Int&gt;&gt;&gt;&gt;) -&gt; Alias99&lt;out Alias77&lt;Alias73&lt;Int&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_barWithLongTAlias99s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _barWithTAlias99s: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Alias99&lt;String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_barWithTAlias99s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _barWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_barWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _barWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_barWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _barWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String&gt;&gt;, () -&gt; List&lt;Array&lt;String&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_barWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _blaWithTInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_blaWithTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _blaWithTInts: KMockContract.SyncFunProxy&lt;Unit, (IntArray) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_blaWithTInts", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _blaWithVoid: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_blaWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _blissWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?, () -&gt; Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_blissWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _blissWithZTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_blissWithZTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _blissWithZTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_blissWithZTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _blubbWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_blubbWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _blubbWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String?&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_blubbWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _blubbWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String?&gt;&gt;, () -&gt; List&lt;Array&lt;String?&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_blubbWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _boo: KMockContract.PropertyProxy&lt;Enum&lt;*&gt;&gt; = ProxyFactory.createPropertyProxy("mock.template.property.PlatformMock#_boo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bossWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_bossWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bossWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_bossWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bossWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;?&gt;, () -&gt; List&lt;Array&lt;Int&gt;?&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_bossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _brassWithTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_brassWithTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _brassWithTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_brassWithTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _brassWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;, () -&gt; Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_brassWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bussWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_bussWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bussWithZTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_bussWithZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _bussWithZTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_bussWithZTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _buzz: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.PlatformMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _buzz: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.kmock.PlatformMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _buzz: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.property.PlatformMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _buzz: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.relaxed.PlatformMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _buzzWithString: KMockContract.AsyncFunProxy&lt;L, suspend (String) -&gt; L&gt; = ProxyFactory.createAsyncFunProxy("mock.template.spy.PlatformMock#_buzzWithString", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _buzzWithStrings: KMockContract.AsyncFunProxy&lt;L, suspend (Array&lt;out String&gt;) -&gt; L&gt; = ProxyFactory.createAsyncFunProxy("mock.template.spy.PlatformMock#_buzzWithStrings", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _buzzWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_buzzWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _buzzWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_buzzWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.relaxed.PlatformMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _colWithTFunction0RSequence: KMockContract.SyncFunProxy&lt;Unit, (Function0&lt;*&gt;, Sequence&lt;Function0&lt;*&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_colWithTFunction0RSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _colWithTListsRSequence: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;*&gt;&gt;, Sequence&lt;List&lt;*&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_colWithTListsRSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doAnythingElseWithAlias21Alias23: KMockContract.SyncFunProxy&lt;Unit, (Alias21, Alias23) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_doAnythingElseWithAlias21Alias23", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doAnythingElseWithAlias78: KMockContract.SyncFunProxy&lt;Unit, (Alias78&lt;Alias77&lt;Alias21&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_doAnythingElseWithAlias78", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doInsideReceiver: KMockContract.SyncFunProxy&lt;Int, (AnythingElse.SomethingInside) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.PlatformMock#_doInsideReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doMore: KMockContract.SyncFunProxy&lt;Any, (List&lt;Alias73a&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_doMore", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doNothingElse: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.PlatformMock#_doNothingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doNothingElseReceiver: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.PlatformMock#_doNothingElseReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doNothingReceiverWithTAny: KMockContract.AsyncFunProxy&lt;Unit, suspend (Any) -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.methodreceiver.PlatformMock#_doNothingReceiverWithTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doNothingReceiverWithTSomethingTComparable: KMockContract.AsyncFunProxy&lt;Unit, suspend (Any) -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.methodreceiver.PlatformMock#_doNothingReceiverWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doOtherThing: KMockContract.SyncFunProxy&lt;Unit, (Alias77&lt;Alias77&lt;Alias21&gt;&gt;, Comparable&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_doOtherThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Any, ( Alias77&lt;Any&gt;, Alias23, Alias21, ) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.mixedannotation.PlatformMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;Unit, (SomethingElse&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.PlatformMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doSomethingElseReceiverWithSomethingElse: KMockContract.SyncFunProxy&lt;List&lt;Any&gt;, (SomethingElse&lt;Any&gt;) -&gt; List&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.PlatformMock#_doSomethingElseReceiverWithSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doSomethingElseReceiverWithZTAny: KMockContract.SyncFunProxy&lt;L, (Any?) -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.PlatformMock#_doSomethingElseReceiverWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doSomethingElseWithTAlias21LAlias23: KMockContract.SyncFunProxy&lt;Unit, (Alias21, Alias23) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_doSomethingElseWithTAlias21LAlias23", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doSomethingElseWithTAlias77: KMockContract.SyncFunProxy&lt;Unit, (Alias77&lt;Any?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_doSomethingElseWithTAlias77", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _doSomethingReceiver: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.PlatformMock#_doSomethingReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.PlatformMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.renamed.PlatformMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.PlatformMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _equalsReceiver: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.PlatformMock#_equalsReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _extensionGetter: KMockContract.SyncFunProxy&lt;Int, (Platform&lt;*&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_extensionGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _extensionSetter: KMockContract.SyncFunProxy&lt;Unit, (Platform&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_extensionSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fol: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_fol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _foo: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.async.PlatformMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _foo: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.overloaded.PlatformMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _foo: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.PlatformMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _foo: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.kmock.PlatformMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _foo: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.property.PlatformMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _foo: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.sync.PlatformMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _foo: KMockContract.SyncFunProxy&lt;String, (Any) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.relaxed.PlatformMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithAny: KMockContract.SyncFunProxy&lt;String, (Any) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_fooWithAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithAnyAlias73: KMockContract.SyncFunProxy&lt;Unit, (Any, Alias73&lt;String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_fooWithAnyAlias73", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithAnyInt: KMockContract.SyncFunProxy&lt;Any, (Any?, Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithAnyInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithAnyString: KMockContract.SyncFunProxy&lt;Any, (Any, String) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithAnyString", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithAnys: KMockContract.SyncFunProxy&lt;Any, (Array&lt;out Any&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithCharAlias73s: KMockContract.SyncFunProxy&lt;Unit, (Char, Array&lt;out Alias73&lt;IntArray&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_fooWithCharAlias73s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithFunction1: KMockContract.SyncFunProxy&lt;Any, (Function1&lt;Any, Unit&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithFunction1", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithIntAlias73s: KMockContract.SyncFunProxy&lt;Unit, (Int, Array&lt;out Alias73&lt;out String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_fooWithIntAlias73s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithIntAny: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithIntAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithLongTAlias73s: KMockContract.SyncFunProxy&lt;Unit, (Long, Array&lt;out Alias73&lt;out Alias77&lt;Alias73&lt;Int&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_fooWithLongTAlias73s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithQ: KMockContract.SyncFunProxy&lt;Unit, (Q) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithQ", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithStringAbc: KMockContract.SyncFunProxy&lt;Any, (String, Abc) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithStringAbc", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithStringAny: KMockContract.SyncFunProxy&lt;Any, (String, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithStringAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithTAlias73: KMockContract.SyncFunProxy&lt;Unit, (Alias73&lt;Any?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_fooWithTAlias73", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithTCharSequenceTComparable: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithTCharSequenceTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithTCharSequenceTComparableQCharSequenceQComparable: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithTCharSequenceTComparableQCharSequenceQComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithTLPG: KMockContract.SyncFunProxy&lt;Unit, (LPG) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithTLPG", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithTList: KMockContract.SyncFunProxy&lt;Any, (List&lt;Alias73a&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_fooWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithTPlatform: KMockContract.SyncFunProxy&lt;Unit, (Platform&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithTPlatform", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithTQString: KMockContract.SyncFunProxy&lt;Unit, (Q, String) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithTQString", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_fooWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.PlatformMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.PlatformMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_fooWithZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _fooWithZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.PlatformMock#_fooWithZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _getOtherThing: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_getOtherThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _hashCode: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.overloaded.PlatformMock#_hashCode", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.PlatformMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.PlatformMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _iDo: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.PlatformMock#_iDo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _insideGetter: KMockContract.SyncFunProxy&lt;Int, (AnythingElse.SomethingInside) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_insideGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _issWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_issWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _issWithZTAnyRSomeGenericRComparable: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_issWithZTAnyRSomeGenericRComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _izz: KMockContract.AsyncFunProxy&lt;Any, suspend (Array&lt;out Any&gt;) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.async.PlatformMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.PlatformMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, (Array&lt;out Any&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.sync.PlatformMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _izzWithTSomeGenericTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_izzWithTSomeGenericTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _izzWithTSomeGenericTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_izzWithTSomeGenericTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _izzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_izzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _kssWithTSomeGenericTComparable: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_kssWithTSomeGenericTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _kssWithTSomeGenericTComparableRSomeGenericRComparable: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_kssWithTSomeGenericTComparableRSomeGenericRComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _lol: KMockContract.SyncFunProxy&lt;Unit, (Alias73&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_lol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _lolWithArray: KMockContract.SyncFunProxy&lt;Any, (Array&lt;Any?&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_lolWithArray", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _lolWithArrays: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Array&lt;out Any&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_lolWithArrays", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _lolWithTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;in Char&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_lolWithTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _lolWithTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;in Char&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_lolWithTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _lossWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_lossWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _lossWithTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Map&lt;String, String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_lossWithTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _lossWithVoid: KMockContract.SyncFunProxy&lt;Map&lt;String, String&gt;, () -&gt; Map&lt;String, String&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_lossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _lzzWithTSomeGenericTList: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_lzzWithTSomeGenericTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _lzzWithTSomeGenericTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_lzzWithTSomeGenericTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _lzzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_lzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _mutabor: KMockContract.SyncFunProxy&lt;Unit, (Platform&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.PlatformMock#_mutabor", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _mutaborReceiver: KMockContract.SyncFunProxy&lt;Int, (Platform&lt;*&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.PlatformMock#_mutaborReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _myThing: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.propertyreceiver.PlatformMock#_myThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _nolWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, Any?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_nolWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _nolWithTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Map&lt;String, Any?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_nolWithTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _nothingGetterWithTL: KMockContract.SyncFunProxy&lt;L, (L) -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_nothingGetterWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _nothingGetterWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_nothingGetterWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _nothingSetterWithTL: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_nothingSetterWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _nothingSetterWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_nothingSetterWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _oo: KMockContract.SyncFunProxy&lt;String, (Array&lt;out Any&gt;) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.relaxed.PlatformMock#_oo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _ossWithZRAnyZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Any?, Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_ossWithZRAnyZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _ossWithZTAny: KMockContract.SyncFunProxy&lt;Any?, (Any?) -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_ossWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _ossWithZTAnyZRAny: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_ossWithZTAnyZRAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _otherThingGetter: KMockContract.SyncFunProxy&lt;String, (L) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_otherThingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _otherThingSetter: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_otherThingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _othingGetter: KMockContract.SyncFunProxy&lt;L?, (L) -&gt; L?&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_othingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _othingSetter: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_othingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _ozz: KMockContract.AsyncFunProxy&lt;Any, suspend (IntArray) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.async.PlatformMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _ozz: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.renamed.PlatformMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _ozz: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.spy.PlatformMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _ozz: KMockContract.SyncFunProxy&lt;Any, (IntArray) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.sync.PlatformMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _ozzWithTL: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_ozzWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _ozzWithTLs: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out L&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_ozzWithTLs", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _ozzWithVoid: KMockContract.SyncFunProxy&lt;L, () -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_ozzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _polWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_polWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _polWithTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Map&lt;String, Any&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_polWithTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _prop: KMockContract.PropertyProxy&lt;Alias73&lt;String&gt;&gt; = ProxyFactory.createPropertyProxy("mock.template.typealiaz.PlatformMock#_prop", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _pssWithTSomeGeneric: KMockContract.SyncFunProxy&lt;SomeGeneric&lt;String&gt;, (SomeGeneric&lt;String&gt;) -&gt; SomeGeneric&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_pssWithTSomeGeneric", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _pssWithTSomeGenericRSomeGeneric: KMockContract.SyncFunProxy&lt;Unit, (SomeGeneric&lt;String&gt;, SomeGeneric&lt;String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_pssWithTSomeGenericRSomeGeneric", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _rol: KMockContract.SyncFunProxy&lt;Unit, (Alias73&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_rol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _rolWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_rolWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _rolWithTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Map&lt;String, Any&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_rolWithTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _run: KMockContract.SyncFunProxy&lt;Alias21, (L) -&gt; Alias21&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PlatformMock#_run", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _rzzWithTSomeGenericTMap: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_rzzWithTSomeGenericTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _rzzWithTSomeGenericTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_rzzWithTSomeGenericTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _rzzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_rzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.generic.PlatformMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.renamed.PlatformMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.spy.PlatformMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _thingGetter: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_thingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _thingSetter: KMockContract.SyncFunProxy&lt;Unit, (Something) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_thingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _thingsGetter: KMockContract.SyncFunProxy&lt;List&lt;Any&gt;, (SomethingElse&lt;Any&gt;) -&gt; List&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.PlatformMock#_thingsGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.PlatformMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.renamed.PlatformMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.PlatformMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _tzzWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_tzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _tzzWithZTSomeGenericZTList: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_tzzWithZTSomeGenericZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _tzzWithZTSomeGenericZTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_tzzWithZTSomeGenericZTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _uzzWithTSomeGenericTList: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_uzzWithTSomeGenericTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _uzzWithTSomeGenericTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_uzzWithTSomeGenericTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _uzzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_uzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _xssWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_xssWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMock$public val _xssWithZTAnyRSequenceRCharSequence: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.PlatformMock#_xssWithZTAnyRSequenceRCharSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMultiMock$public val _anything: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("multi.PlatformMultiMock#_anything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMultiMock$public val _doAnything: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformMultiMock#_doAnything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMultiMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformMultiMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMultiMock$public val _something: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("multi.PlatformMultiMock#_something", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Platform.kt$PlatformMultiMock$public val _somethingElse: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("multi.PlatformMultiMock#_somethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _barWithAlias999: KMockContract.SyncFunProxy&lt;Unit, (Alias999&lt;String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_barWithAlias999", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _barWithLongTAlias999s: KMockContract.SyncFunProxy&lt;Alias999&lt;out Alias977&lt;Alias973&lt;Int&gt;&gt;&gt;, (Long, Array&lt;out Alias999&lt;out Alias977&lt;Alias973&lt;Int&gt;&gt;&gt;&gt;) -&gt; Alias999&lt;out Alias977&lt;Alias973&lt;Int&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_barWithLongTAlias999s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _barWithTAlias999s: KMockContract.SyncFunProxy&lt;Alias999&lt;String&gt;, (Array&lt;out Alias999&lt;String&gt;&gt;) -&gt; Alias999&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_barWithTAlias999s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _doAnythingElseWithAlias921Alias923: KMockContract.SyncFunProxy&lt;Alias923, (Alias921, Alias923) -&gt; Alias923&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_doAnythingElseWithAlias921Alias923", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _doAnythingElseWithAlias977: KMockContract.SyncFunProxy&lt;Unit, (Alias977&lt;Alias977&lt;Alias921&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_doAnythingElseWithAlias977", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _doElse: KMockContract.SyncFunProxy&lt;Unit, (Function1&lt;Any, Unit&gt;, Function1&lt;Any, Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_doElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _doMoreElse: KMockContract.SyncFunProxy&lt;Unit, (Function1&lt;Any, Unit&gt;, Function1&lt;Any, Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_doMoreElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _doOtherThing: KMockContract.SyncFunProxy&lt;Unit, (Alias977&lt;Alias977&lt;Alias921&gt;&gt;, Comparable&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_doOtherThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Any, ( Alias977&lt;Any&gt;, Alias923, Alias921, ) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _doSomethingElseWithTAlias921LAlias923: KMockContract.SyncFunProxy&lt;Unit, (Alias921, Alias923) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_doSomethingElseWithTAlias921LAlias923", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _doSomethingElseWithTAlias977: KMockContract.SyncFunProxy&lt;Alias977&lt;Any?&gt;, (Alias977&lt;Any?&gt;) -&gt; Alias977&lt;Any?&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_doSomethingElseWithTAlias977", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _fooWithAnyAlias973: KMockContract.SyncFunProxy&lt;Alias973&lt;String&gt;, (Any, Alias973&lt;String&gt;?) -&gt; Alias973&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_fooWithAnyAlias973", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _fooWithCharAlias973s: KMockContract.SyncFunProxy&lt;Unit, (Char, Array&lt;out Alias973&lt;IntArray&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_fooWithCharAlias973s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _fooWithIntAlias973s: KMockContract.SyncFunProxy&lt;Unit, (Int, Array&lt;out Alias973&lt;out String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_fooWithIntAlias973s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _fooWithLongTAlias973s: KMockContract.SyncFunProxy&lt;Unit, (Long, Array&lt;out Alias973&lt;out Alias977&lt;Alias973&lt;Int&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_fooWithLongTAlias973s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _fooWithTAlias973: KMockContract.SyncFunProxy&lt;Unit, (Alias973&lt;Any?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_fooWithTAlias973", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _prop: KMockContract.PropertyProxy&lt;Alias973&lt;String&gt;&gt; = ProxyFactory.createPropertyProxy("mock.template.typealiaz.PreventResolvingMock#_prop", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _rol: KMockContract.SyncFunProxy&lt;Unit, (Alias1000&lt;Any?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_rol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _run: KMockContract.SyncFunProxy&lt;Alias921, (L) -&gt; Alias921&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_run", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:PreventResolving.kt$PreventResolvingMock$public val _toll: KMockContract.SyncFunProxy&lt;Unit, (Alias977&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.PreventResolvingMock#_toll", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Property.kt$PropertyMock$public val _bar: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.access.PropertyMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Property.kt$PropertyMock$public val _buzz: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.access.PropertyMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Property.kt$PropertyMock$public val _foo: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.access.PropertyMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Property.kt$PropertyMock$public val _izz: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.access.PropertyMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Property.kt$PropertyMock$public val _tuz: KMockContract.PropertyProxy&lt;T&gt; = ProxyFactory.createPropertyProxy("mock.template.access.PropertyMock#_tuz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Property.kt$PropertyMock$public val _uzz: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.access.PropertyMock#_uzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Receiver.kt$ReceiverMock$public val _anyGetter: KMockContract.SyncFunProxy&lt;Int, (List&lt;Alias3&lt;Any&gt;&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.ReceiverMock#_anyGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Receiver.kt$ReceiverMock$public val _doAnythingElse: KMockContract.SyncFunProxy&lt;Unit, (Alias3&lt;Alias3&lt;Alias11&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.ReceiverMock#_doAnythingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Receiver.kt$ReceiverMock$public val _doAnythingElseReceiver: KMockContract.SyncFunProxy&lt;Unit, ( Alias3&lt;Comparable&lt;Any&gt;&gt;, Alias11, Alias2, ) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.ReceiverMock#_doAnythingElseReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Receiver.kt$ReceiverMock$public val _doOtherThingReceiver: KMockContract.SyncFunProxy&lt;Unit, ( Alias3&lt;Alias2&gt;, Alias3&lt;Alias3&lt;Alias2&gt;&gt;, Comparable&lt;Any&gt;, ) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.ReceiverMock#_doOtherThingReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Receiver.kt$ReceiverMock$public val _doSomethingElseReceiverWithLAlias2TAlias11LAlias2: KMockContract.SyncFunProxy&lt;Unit, ( Alias2, Alias11, Alias2, ) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.ReceiverMock#_doSomethingElseReceiverWithLAlias2TAlias11LAlias2", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Receiver.kt$ReceiverMock$public val _doSomethingElseReceiverWithTAlias3TAlias3: KMockContract.SyncFunProxy&lt;Unit, (Alias3&lt;Any?&gt;, Alias3&lt;Any?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.ReceiverMock#_doSomethingElseReceiverWithTAlias3TAlias3", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Receiver.kt$ReceiverMock$public val _doSomethingReceiver: KMockContract.SyncFunProxy&lt;Any, ( Alias11, Alias3&lt;Any&gt;, Alias2, Alias11, ) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.ReceiverMock#_doSomethingReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Receiver.kt$ReceiverMock$public val _memberGetter: KMockContract.SyncFunProxy&lt;Alias3&lt;Any&gt;, (Alias3&lt;Any&gt;) -&gt; Alias3&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.ReceiverMock#_memberGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Receiver.kt$ReceiverMock$public val _memberSetter: KMockContract.SyncFunProxy&lt;Unit, (Alias3&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.ReceiverMock#_memberSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Receiver.kt$ReceiverMock$public val _run: KMockContract.SyncFunProxy&lt;Alias11, (L) -&gt; Alias11&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.ReceiverMock#_run", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _foo: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.overloaded.RefinedMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithAlias: KMockContract.SyncFunProxy&lt;Any, (alias) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithAlias", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithAnyString: KMockContract.SyncFunProxy&lt;Any, (Any, String) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithAnyString", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithArray_Any: KMockContract.SyncFunProxy&lt;Any, (Array&lt;in Any&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithArray_Any", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithArray_Any: KMockContract.SyncFunProxy&lt;Any, (Array&lt;out Any&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithArray_Any", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithComparable_Array_Map_String_Any: KMockContract.SyncFunProxy&lt;Any, (Comparable&lt;Array&lt;Map&lt;String, Any&gt;&gt;&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithComparable_Array_Map_String_Any", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithComparable_Array_Map_String_TZAny: KMockContract.SyncFunProxy&lt;Any, (Comparable&lt;Array&lt;Map&lt;String, Any?&gt;&gt;&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithComparable_Array_Map_String_TZAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithComparable_Array_Map_TZAny_Any: KMockContract.SyncFunProxy&lt;Any, (Comparable&lt;Array&lt;Map&lt;Any?, Any&gt;&gt;&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithComparable_Array_Map_TZAny_Any", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithFunction1_Any_Unit: KMockContract.SyncFunProxy&lt;Any, (Function1&lt;Any, Unit&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithFunction1_Any_Unit", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithIntAny: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithIntAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithQ: KMockContract.SyncFunProxy&lt;Unit, (Q) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithQ", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithRList_Any: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithRList_Any", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithRList_ZAny: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Any?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithRList_ZAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithStringAny: KMockContract.SyncFunProxy&lt;Any, (String, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithStringAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithTCharSequenceTZComparable_AnyAbc: KMockContract.SyncFunProxy&lt;Any, (Any, Abc) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithTCharSequenceTZComparable_AnyAbc", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithTComparable_Q: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;Q&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithTComparable_Q", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithTComparable_ZAny: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithTComparable_ZAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithTComparable_ZQ: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;Q?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithTComparable_ZQ", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithTLPG: KMockContract.SyncFunProxy&lt;Unit, (LPG) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithTLPG", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithTQString: KMockContract.SyncFunProxy&lt;Unit, (Q, String) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithTQString", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithTRefined_ZAny: KMockContract.SyncFunProxy&lt;Unit, (Refined&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithTRefined_ZAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithTZAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithTZAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithTZCharSequenceTZComparable_AnyQCharSequenceQZComparable_Any: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithTZCharSequenceTZComparable_AnyQCharSequenceQZComparable_Any", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithTZCharSequenceTZComparable_ZAnyAbc: KMockContract.SyncFunProxy&lt;Any, (Any?, Abc) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithTZCharSequenceTZComparable_ZAnyAbc", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithZAnyInt: KMockContract.SyncFunProxy&lt;Any, (Any?, Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithZAnyInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithZQ: KMockContract.SyncFunProxy&lt;Unit, (Q?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithZQ", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithZStringAbc: KMockContract.SyncFunProxy&lt;Any, (String?, Abc) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithZStringAbc", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithZTCharSequenceZTComparable_AnyAbc: KMockContract.SyncFunProxy&lt;Any, (Any?, Abc) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithZTCharSequenceZTComparable_AnyAbc", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _fooWithZTZCharSequenceZTComparable_AnyAbc: KMockContract.SyncFunProxy&lt;Any, (Any?, Abc) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_fooWithZTZCharSequenceZTComparable_AnyAbc", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _hashCode: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.overloaded.RefinedMock#_hashCode", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _ooWithAnyArray_RRR_TZAny: KMockContract.SyncFunProxy&lt;Any, (Any, Array&lt;out RRR&lt;Any?&gt;&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_ooWithAnyArray_RRR_TZAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _ooWithAnyArray_TZAny: KMockContract.SyncFunProxy&lt;Any, (Any, Array&lt;*&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_ooWithAnyArray_TZAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _ooWithIntArray_Any: KMockContract.SyncFunProxy&lt;Any, (Int, Array&lt;out Any&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_ooWithIntArray_Any", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Refined.kt$RefinedMock$public val _ooWithZAnyArray_Int: KMockContract.SyncFunProxy&lt;Any, (Any?, IntArray) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.RefinedMock#_ooWithZAnyArray_Int", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$CommonMultiMock$public val _anything: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("multi.CommonMultiMock#_anything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$CommonMultiMock$public val _doAnything: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonMultiMock#_doAnything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$CommonMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.CommonMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$CommonMultiMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.CommonMultiMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$CommonMultiMock$public val _something: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("multi.CommonMultiMock#_something", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$CommonMultiMock$public val _somethingElse: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("multi.CommonMultiMock#_somethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$PlatformMultiMock$public val _anything: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("multi.PlatformMultiMock#_anything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$PlatformMultiMock$public val _doAnything: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformMultiMock#_doAnything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$PlatformMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$PlatformMultiMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformMultiMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$PlatformMultiMock$public val _something: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("multi.PlatformMultiMock#_something", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$PlatformMultiMock$public val _somethingElse: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("multi.PlatformMultiMock#_somethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$SharedMultiMock$public val _anything: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("multi.SharedMultiMock#_anything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$SharedMultiMock$public val _doAnything: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedMultiMock#_doAnything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$SharedMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.SharedMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$SharedMultiMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.SharedMultiMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$SharedMultiMock$public val _something: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("multi.SharedMultiMock#_something", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:RegularMock.kt$SharedMultiMock$public val _somethingElse: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("multi.SharedMultiMock#_somethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$private val __spyOn: Relaxed&lt;K, L&gt;? = spyOn</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.RelaxedMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _buzz: KMockContract.AsyncFunProxy&lt;L, suspend (String) -&gt; L&gt; = ProxyFactory.createAsyncFunProxy("mock.template.spy.RelaxedMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doAnythingElseWithAlias101Alias102: KMockContract.SyncFunProxy&lt;Unit, (Alias101, Alias102) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.RelaxedMock#_doAnythingElseWithAlias101Alias102", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doAnythingElseWithAlias107: KMockContract.SyncFunProxy&lt;Unit, (Alias107&lt;Alias107&lt;Alias101&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.RelaxedMock#_doAnythingElseWithAlias107", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doInsideReceiver: KMockContract.SyncFunProxy&lt;Int, (AnythingElse.SomethingInside) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_doInsideReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doNothingElse: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_doNothingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doNothingElseReceiver: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_doNothingElseReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doNothingReceiverWithTAny: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_doNothingReceiverWithTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doNothingReceiverWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_doNothingReceiverWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doOtherThing: KMockContract.SyncFunProxy&lt;Alias107&lt;Alias101&gt;, (Alias107&lt;Alias107&lt;Alias101&gt;&gt;, Comparable&lt;Any&gt;) -&gt; Alias107&lt;Alias101&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.RelaxedMock#_doOtherThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Any, ( Alias107&lt;Any&gt;, Alias102, Alias101, ) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.RelaxedMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;Unit, (SomethingElse&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doSomethingElseReceiverWithSomethingElse: KMockContract.SyncFunProxy&lt;List&lt;Any&gt;, (SomethingElse&lt;Any&gt;) -&gt; List&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_doSomethingElseReceiverWithSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doSomethingElseReceiverWithZTAny: KMockContract.SyncFunProxy&lt;L, (Any?) -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_doSomethingElseReceiverWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doSomethingElseWithTAlias101LAlias102: KMockContract.SyncFunProxy&lt;Alias102, (Alias101, Alias102) -&gt; Alias102&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.RelaxedMock#_doSomethingElseWithTAlias101LAlias102", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doSomethingElseWithTAlias107: KMockContract.SyncFunProxy&lt;Alias107&lt;Any?&gt;, (Alias107&lt;Any?&gt;) -&gt; Alias107&lt;Any?&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.RelaxedMock#_doSomethingElseWithTAlias107", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _doSomethingReceiver: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_doSomethingReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.RelaxedMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _equalsReceiver: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_equalsReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _extensionGetter: KMockContract.SyncFunProxy&lt;Int, (Relaxed&lt;*&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_extensionGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _extensionSetter: KMockContract.SyncFunProxy&lt;Unit, (Relaxed&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_extensionSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _foo: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.RelaxedMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _getOtherThing: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_getOtherThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.RelaxedMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _iDo: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_iDo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _insideGetter: KMockContract.SyncFunProxy&lt;Int, (AnythingElse.SomethingInside) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_insideGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.RelaxedMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _mutabor: KMockContract.SyncFunProxy&lt;Unit, (Relaxed&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_mutabor", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _mutaborReceiver: KMockContract.SyncFunProxy&lt;Int, (Relaxed&lt;*&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.RelaxedMock#_mutaborReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _myThing: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.propertyreceiver.RelaxedMock#_myThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _nextThingGetter: KMockContract.SyncFunProxy&lt;L, (L) -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_nextThingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _nextThingSetter: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_nextThingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _nothingGetterWithTL: KMockContract.SyncFunProxy&lt;L, (L) -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_nothingGetterWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _nothingGetterWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_nothingGetterWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _nothingSetterWithTL: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_nothingSetterWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _nothingSetterWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_nothingSetterWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _otherThingGetterWithL: KMockContract.SyncFunProxy&lt;String, (L) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_otherThingGetterWithL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _otherThingGetterWithTL: KMockContract.SyncFunProxy&lt;L, (L) -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_otherThingGetterWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _otherThingSetterWithL: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_otherThingSetterWithL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _otherThingSetterWithTL: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_otherThingSetterWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _ozz: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.spy.RelaxedMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _run: KMockContract.SyncFunProxy&lt;Alias101, (L) -&gt; Alias101&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.RelaxedMock#_run", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.spy.RelaxedMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _thingGetter: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_thingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _thingSetter: KMockContract.SyncFunProxy&lt;Unit, (Something) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_thingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _thingsGetter: KMockContract.SyncFunProxy&lt;List&lt;Any&gt;, (SomethingElse&lt;Any&gt;) -&gt; List&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.RelaxedMock#_thingsGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Relaxed.kt$RelaxedMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.RelaxedMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Shared.kt$AliasSharedMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.alias.AliasSharedMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$AliasSharedMock$public val _foo: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.alias.AliasSharedMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$private val __spyOn: Shared&lt;K, L&gt;? = spyOn</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bar: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.async.SharedMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bar: KMockContract.AsyncFunProxy&lt;String, suspend (Any) -&gt; String&gt; = ProxyFactory.createAsyncFunProxy("mock.template.relaxed.SharedMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bar: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.SharedMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bar: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.property.SharedMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.renamed.SharedMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.SharedMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.customshared.SharedMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.kmock.SharedMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.sync.SharedMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _barWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_barWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _barWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String&gt;&gt;, () -&gt; List&lt;Array&lt;String&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_barWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _blaWithTCharSequenceTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_blaWithTCharSequenceTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _blaWithTCharSequenceTComparableKCharSequenceKComparable: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_blaWithTCharSequenceTComparableKCharSequenceKComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _blaWithTInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_blaWithTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _blaWithVoid: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_blaWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _blaWithZTInt: KMockContract.SyncFunProxy&lt;Unit, (Int?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_blaWithZTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _blissWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?, () -&gt; Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_blissWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _blissWithZTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_blissWithZTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _blubbWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_blubbWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _blubbWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String?&gt;&gt;, () -&gt; List&lt;Array&lt;String?&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_blubbWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bossWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_bossWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bossWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;?&gt;, () -&gt; List&lt;Array&lt;Int&gt;?&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_bossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _brassWithTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_brassWithTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _brassWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;, () -&gt; Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_brassWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bussWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_bussWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _bussWithZTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_bussWithZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _buzz: KMockContract.AsyncFunProxy&lt;L, suspend (String) -&gt; L&gt; = ProxyFactory.createAsyncFunProxy("mock.template.spy.SharedMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _buzz: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.SharedMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _buzz: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.property.SharedMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _buzz: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.relaxed.SharedMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _buzzWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_buzzWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.relaxed.SharedMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Any, ( Any, Alias00, Alias01, ) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.SharedMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.mixedannotation.SharedMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _enum: KMockContract.PropertyProxy&lt;Enum&lt;*&gt;&gt; = ProxyFactory.createPropertyProxy("mock.template.property.SharedMock#_enum", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.SharedMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.renamed.SharedMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.SharedMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _foo: KMockContract.AsyncFunProxy&lt;Any, suspend (Int, Any) -&gt; Any&gt; = ProxyFactory.createAsyncFunProxy("mock.template.async.SharedMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _foo: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("mock.template.overloaded.SharedMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _foo: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.buildIn.SharedMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _foo: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.property.SharedMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _foo: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.customshared.SharedMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _foo: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.kmock.SharedMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _foo: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.sync.SharedMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _foo: KMockContract.SyncFunProxy&lt;String, (Any) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.relaxed.SharedMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _foo: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.SharedMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithAnyInt: KMockContract.SyncFunProxy&lt;Any, (Any, Int) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.SharedMock#_fooWithAnyInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithAnyString: KMockContract.SyncFunProxy&lt;Any, (Any, String) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.SharedMock#_fooWithAnyString", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithArray: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;in Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.SharedMock#_fooWithArray", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithFunction1: KMockContract.SyncFunProxy&lt;Any, (Function1&lt;Any, Unit&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.SharedMock#_fooWithFunction1", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithIntAny: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.SharedMock#_fooWithIntAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithStringAbc: KMockContract.SyncFunProxy&lt;Any, (String, Abc) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.SharedMock#_fooWithStringAbc", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithStringAny: KMockContract.SyncFunProxy&lt;Any, (String, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.SharedMock#_fooWithStringAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithTAbc: KMockContract.SyncFunProxy&lt;Unit, (Abc) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.SharedMock#_fooWithTAbc", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithTLPG: KMockContract.SyncFunProxy&lt;Unit, (LPG) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.SharedMock#_fooWithTLPG", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithTShared: KMockContract.SyncFunProxy&lt;Unit, (Shared) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.SharedMock#_fooWithTShared", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_fooWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.overloaded.SharedMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _hashCode: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.overloaded.SharedMock#_hashCode", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.SharedMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.SharedMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _issWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_issWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _issWithZTAnyRSomeGenericRComparable: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_issWithZTAnyRSomeGenericRComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _izzWithTSomeGenericTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_izzWithTSomeGenericTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _izzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_izzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _kssWithTSomeGenericTComparable: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_kssWithTSomeGenericTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _kssWithTSomeGenericTComparableRSomeGenericRComparable: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_kssWithTSomeGenericTComparableRSomeGenericRComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _lol: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;in Int&gt;&gt;, Sequence&lt;List&lt;Array&lt;in Int&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_lol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _lossWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_lossWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _lossWithVoid: KMockContract.SyncFunProxy&lt;Map&lt;String, String&gt;, () -&gt; Map&lt;String, String&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_lossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _lzzWithTSomeGenericTList: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_lzzWithTSomeGenericTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _lzzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_lzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _nol: KMockContract.SyncFunProxy&lt;Any, (Enum&lt;*&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.sync.SharedMock#_nol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _nol: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;*&gt;&gt;, Sequence&lt;List&lt;Array&lt;*&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_nol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _ossWithZTAny: KMockContract.SyncFunProxy&lt;Any?, (Any?) -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_ossWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _ossWithZTAnyZRAny: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_ossWithZTAnyZRAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _ozz: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.renamed.SharedMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _ozz: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("mock.template.spy.SharedMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _ozzWithTL: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_ozzWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _ozzWithVoid: KMockContract.SyncFunProxy&lt;L, () -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_ozzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _pssWithTSomeGeneric: KMockContract.SyncFunProxy&lt;SomeGeneric&lt;String&gt;, (SomeGeneric&lt;String&gt;) -&gt; SomeGeneric&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_pssWithTSomeGeneric", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _pssWithTSomeGenericRSomeGeneric: KMockContract.SyncFunProxy&lt;Unit, (SomeGeneric&lt;String&gt;, SomeGeneric&lt;String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_pssWithTSomeGenericRSomeGeneric", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _rol: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;out Int&gt;&gt;, Sequence&lt;List&lt;Array&lt;out Int&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_rol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _rrr: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Any&gt;, Sequence&lt;List&lt;Any&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_rrr", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _rzzWithTSomeGenericTMap: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_rzzWithTSomeGenericTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _rzzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_rzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.generic.SharedMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.renamed.SharedMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _template: KMockContract.PropertyProxy&lt;L&gt; = ProxyFactory.createPropertyProxy("mock.template.spy.SharedMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.buildIn.SharedMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.renamed.SharedMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.spy.SharedMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _tzzWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_tzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _tzzWithZTSomeGenericZTList: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_tzzWithZTSomeGenericZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _uzz: KMockContract.PropertyProxy&lt;T&gt; = ProxyFactory.createPropertyProxy("mock.template.relaxed.SharedMock#_uzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _uzzWithTSomeGenericTList: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_uzzWithTSomeGenericTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _uzzWithVoid: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_uzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _xssWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_xssWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _xssWithZTAnyRSequenceRCharSequence: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_xssWithZTAnyRSequenceRCharSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMock$public val _zok: KMockContract.SyncFunProxy&lt;Unit, (Enum&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SharedMock#_zok", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMultiMock$public val _anything: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("multi.SharedMultiMock#_anything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMultiMock$public val _doAnything: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedMultiMock#_doAnything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.SharedMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMultiMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.SharedMultiMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMultiMock$public val _something: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("multi.SharedMultiMock#_something", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Shared.kt$SharedMultiMock$public val _somethingElse: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("multi.SharedMultiMock#_somethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SourceFilterSpec.kt$SourceFilterSpec$val source0_0: KSClassDeclaration = mockk()</ID>
    <ID>VariableNaming:SourceFilterSpec.kt$SourceFilterSpec$val source0_1: KSClassDeclaration = mockk()</ID>
    <ID>VariableNaming:SourceFilterSpec.kt$SourceFilterSpec$val source1_0: KSClassDeclaration = mockk()</ID>
    <ID>VariableNaming:SourceFilterSpec.kt$SourceFilterSpec$val source1_1: KSClassDeclaration = mockk()</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$private val __spyOn: Spied&lt;L&gt;? = spyOn</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _doInsideReceiver: KMockContract.SyncFunProxy&lt;Int, (AnythingElse.SomethingInside) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_doInsideReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _doNothingElse: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_doNothingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _doNothingElseReceiver: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_doNothingElseReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _doNothingReceiverWithTAny: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_doNothingReceiverWithTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _doNothingReceiverWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_doNothingReceiverWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;Unit, (SomethingElse&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _doSomethingElseReceiverWithSomethingElse: KMockContract.SyncFunProxy&lt;List&lt;Any&gt;, (SomethingElse&lt;Any&gt;) -&gt; List&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_doSomethingElseReceiverWithSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _doSomethingElseReceiverWithZTAny: KMockContract.SyncFunProxy&lt;L, (Any?) -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_doSomethingElseReceiverWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _doSomethingReceiver: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_doSomethingReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _equalsReceiver: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_equalsReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _extensionGetter: KMockContract.SyncFunProxy&lt;Int, (Spied&lt;*&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_extensionGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _extensionSetter: KMockContract.SyncFunProxy&lt;Unit, (Spied&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_extensionSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _getOtherThing: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_getOtherThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _iDo: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_iDo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _insideGetter: KMockContract.SyncFunProxy&lt;Int, (AnythingElse.SomethingInside) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_insideGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _mutabor: KMockContract.SyncFunProxy&lt;Unit, (Spied&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_mutabor", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _mutaborReceiver: KMockContract.SyncFunProxy&lt;Int, (Spied&lt;*&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_mutaborReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _myThing: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.propertyreceiver.SpiedMock#_myThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _nothingGetterWithTL: KMockContract.SyncFunProxy&lt;L, (L) -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_nothingGetterWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _nothingGetterWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_nothingGetterWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _nothingSetterWithTL: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_nothingSetterWithTL", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _nothingSetterWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_nothingSetterWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _otherThingGetter: KMockContract.SyncFunProxy&lt;String, (L) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_otherThingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _otherThingSetter: KMockContract.SyncFunProxy&lt;Unit, (L) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_otherThingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _thingGetter: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_thingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _thingSetter: KMockContract.SyncFunProxy&lt;Unit, (Something) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_thingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _thingsGetter: KMockContract.SyncFunProxy&lt;List&lt;Any&gt;, (SomethingElse&lt;Any&gt;) -&gt; List&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_thingsGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.SpiedMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:Spied.kt$SpiedMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.SpiedMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$private val __spyOn: MultiMock? = spyOn</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _barWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_barWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _barWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_barWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _barWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String&gt;&gt;, () -&gt; List&lt;Array&lt;String&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_barWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _blaWithTInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blaWithTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _blaWithTInts: KMockContract.SyncFunProxy&lt;Unit, (IntArray) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blaWithTInts", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _blaWithVoid: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blaWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _blissWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?, () -&gt; Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blissWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _blissWithZTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blissWithZTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _blissWithZTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blissWithZTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _blubbWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blubbWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _blubbWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String?&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blubbWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _blubbWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String?&gt;&gt;, () -&gt; List&lt;Array&lt;String?&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_blubbWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _bossWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_bossWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _bossWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_bossWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _bossWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;?&gt;, () -&gt; List&lt;Array&lt;Int&gt;?&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_bossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _brassWithTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_brassWithTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _brassWithTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_brassWithTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _brassWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;, () -&gt; Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_brassWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _bussWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_bussWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _bussWithZTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_bussWithZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _bussWithZTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_bussWithZTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _buzzWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_buzzWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _buzzWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_buzzWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _compareTo: KMockContract.SyncFunProxy&lt;Int, (GenericCommonContract.Generic3&lt;KMockTypeParameter5, KMockTypeParameter4&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_compareTo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;KMockTypeParameter5, (KMockTypeParameter4) -&gt; KMockTypeParameter5&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _fooWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_fooWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _fooWithZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_fooWithZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _iss: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_iss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _kss: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_kss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _lol: KMockContract.PropertyProxy&lt;KMockTypeParameter2&gt; = ProxyFactory.createPropertyProxy("multi.CommonGenericMultiMock#_lol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _lossWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_lossWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _lossWithTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Map&lt;String, String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_lossWithTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _lossWithVoid: KMockContract.SyncFunProxy&lt;Map&lt;String, String&gt;, () -&gt; Map&lt;String, String&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_lossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _lzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_lzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _ossWithZRAnyZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Any?, Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_ossWithZRAnyZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _ossWithZTAny: KMockContract.SyncFunProxy&lt;Any?, (Any?) -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_ossWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _ossWithZTAnyZRAny: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_ossWithZTAnyZRAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _ozzWithTKMockTypeParameter3: KMockContract.SyncFunProxy&lt;Unit, (KMockTypeParameter3) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_ozzWithTKMockTypeParameter3", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _ozzWithTKMockTypeParameter3s: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out KMockTypeParameter3&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_ozzWithTKMockTypeParameter3s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _ozzWithVoid: KMockContract.SyncFunProxy&lt;KMockTypeParameter1, () -&gt; KMockTypeParameter1&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_ozzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _pss: KMockContract.SyncFunProxy&lt;SomeGeneric&lt;String&gt;, (SomeGeneric&lt;String&gt;) -&gt; SomeGeneric&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_pss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _rzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_rzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _template: KMockContract.PropertyProxy&lt;KMockTypeParameter1&gt; = ProxyFactory.createPropertyProxy("multi.CommonGenericMultiMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _tzz: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_tzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _uzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_uzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _xssWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_xssWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$CommonGenericMultiMock$public val _xssWithZTAnyRSequenceRCharSequence: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.CommonGenericMultiMock#_xssWithZTAnyRSequenceRCharSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$private val __spyOn: MultiMock? = spyOn</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _barWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_barWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _barWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_barWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _barWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String&gt;&gt;, () -&gt; List&lt;Array&lt;String&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_barWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _blaWithTInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blaWithTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _blaWithTInts: KMockContract.SyncFunProxy&lt;Unit, (IntArray) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blaWithTInts", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _blaWithVoid: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blaWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _blissWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?, () -&gt; Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blissWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _blissWithZTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blissWithZTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _blissWithZTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blissWithZTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _blubbWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blubbWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _blubbWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String?&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blubbWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _blubbWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String?&gt;&gt;, () -&gt; List&lt;Array&lt;String?&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_blubbWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _bossWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_bossWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _bossWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_bossWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _bossWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;?&gt;, () -&gt; List&lt;Array&lt;Int&gt;?&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_bossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _brassWithTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_brassWithTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _brassWithTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_brassWithTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _brassWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;, () -&gt; Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_brassWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _bussWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_bussWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _bussWithZTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_bussWithZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _bussWithZTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_bussWithZTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _buzzWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_buzzWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _buzzWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_buzzWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _compareTo: KMockContract.SyncFunProxy&lt;Int, (GenericPlatformContract.Generic3&lt;KMockTypeParameter5, KMockTypeParameter4&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_compareTo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;KMockTypeParameter5, (KMockTypeParameter4) -&gt; KMockTypeParameter5&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _fooWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_fooWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _fooWithZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_fooWithZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _iss: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_iss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _kss: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_kss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _lol: KMockContract.PropertyProxy&lt;KMockTypeParameter2&gt; = ProxyFactory.createPropertyProxy("multi.PlatformGenericMultiMock#_lol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _lossWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_lossWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _lossWithTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Map&lt;String, String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_lossWithTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _lossWithVoid: KMockContract.SyncFunProxy&lt;Map&lt;String, String&gt;, () -&gt; Map&lt;String, String&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_lossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _lzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_lzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _ossWithZRAnyZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Any?, Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_ossWithZRAnyZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _ossWithZTAny: KMockContract.SyncFunProxy&lt;Any?, (Any?) -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_ossWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _ossWithZTAnyZRAny: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_ossWithZTAnyZRAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _ozzWithTKMockTypeParameter3: KMockContract.SyncFunProxy&lt;Unit, (KMockTypeParameter3) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_ozzWithTKMockTypeParameter3", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _ozzWithTKMockTypeParameter3s: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out KMockTypeParameter3&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_ozzWithTKMockTypeParameter3s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _ozzWithVoid: KMockContract.SyncFunProxy&lt;KMockTypeParameter1, () -&gt; KMockTypeParameter1&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_ozzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _pss: KMockContract.SyncFunProxy&lt;SomeGeneric&lt;String&gt;, (SomeGeneric&lt;String&gt;) -&gt; SomeGeneric&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_pss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _rzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_rzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _template: KMockContract.PropertyProxy&lt;KMockTypeParameter1&gt; = ProxyFactory.createPropertyProxy("multi.PlatformGenericMultiMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _tzz: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_tzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _uzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_uzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _xssWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_xssWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$PlatformGenericMultiMock$public val _xssWithZTAnyRSequenceRCharSequence: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformGenericMultiMock#_xssWithZTAnyRSequenceRCharSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$private val __spyOn: MultiMock? = spyOn</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _barWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_barWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _barWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_barWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _barWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String&gt;&gt;, () -&gt; List&lt;Array&lt;String&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_barWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _blaWithTInt: KMockContract.SyncFunProxy&lt;Unit, (Int) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blaWithTInt", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _blaWithTInts: KMockContract.SyncFunProxy&lt;Unit, (IntArray) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blaWithTInts", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _blaWithVoid: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blaWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _blissWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?, () -&gt; Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blissWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _blissWithZTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blissWithZTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _blissWithZTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any?&gt;&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blissWithZTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _blubbWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;String?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blubbWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _blubbWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;String?&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blubbWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _blubbWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;String?&gt;&gt;, () -&gt; List&lt;Array&lt;String?&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_blubbWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _bossWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_bossWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _bossWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;?&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_bossWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _bossWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;?&gt;, () -&gt; List&lt;Array&lt;Int&gt;?&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_bossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _brassWithTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_brassWithTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _brassWithTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_brassWithTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _brassWithVoid: KMockContract.SyncFunProxy&lt;Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;, () -&gt; Comparable&lt;List&lt;Array&lt;Any&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_brassWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _bussWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_bussWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _bussWithZTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_bussWithZTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _bussWithZTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_bussWithZTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _buzzWithTList: KMockContract.SyncFunProxy&lt;Unit, (List&lt;Array&lt;Int&gt;&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_buzzWithTList", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _buzzWithTLists: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_buzzWithTLists", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _buzzWithVoid: KMockContract.SyncFunProxy&lt;List&lt;Array&lt;Int&gt;&gt;?, () -&gt; List&lt;Array&lt;Int&gt;&gt;?&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_buzzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _compareTo: KMockContract.SyncFunProxy&lt;Int, (GenericSharedContract.Generic3&lt;KMockTypeParameter5, KMockTypeParameter4&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_compareTo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;KMockTypeParameter5, (KMockTypeParameter4) -&gt; KMockTypeParameter5&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _fooWithVoid: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_fooWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _fooWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_fooWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _fooWithZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_fooWithZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _iss: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_iss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _kss: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_kss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _lol: KMockContract.PropertyProxy&lt;KMockTypeParameter2&gt; = ProxyFactory.createPropertyProxy("multi.SharedGenericMultiMock#_lol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _lossWithTMap: KMockContract.SyncFunProxy&lt;Unit, (Map&lt;String, String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_lossWithTMap", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _lossWithTMaps: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Map&lt;String, String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_lossWithTMaps", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _lossWithVoid: KMockContract.SyncFunProxy&lt;Map&lt;String, String&gt;, () -&gt; Map&lt;String, String&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_lossWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _lzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_lzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _ossWithZRAnyZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Any?, Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_ossWithZRAnyZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _ossWithZTAny: KMockContract.SyncFunProxy&lt;Any?, (Any?) -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_ossWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _ossWithZTAnyZRAny: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_ossWithZTAnyZRAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _ozzWithTKMockTypeParameter3: KMockContract.SyncFunProxy&lt;Unit, (KMockTypeParameter3) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_ozzWithTKMockTypeParameter3", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _ozzWithTKMockTypeParameter3s: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out KMockTypeParameter3&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_ozzWithTKMockTypeParameter3s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _ozzWithVoid: KMockContract.SyncFunProxy&lt;KMockTypeParameter1, () -&gt; KMockTypeParameter1&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_ozzWithVoid", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _pss: KMockContract.SyncFunProxy&lt;SomeGeneric&lt;String&gt;, (SomeGeneric&lt;String&gt;) -&gt; SomeGeneric&lt;String&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_pss", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _rzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_rzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _template: KMockContract.PropertyProxy&lt;KMockTypeParameter1&gt; = ProxyFactory.createPropertyProxy("multi.SharedGenericMultiMock#_template", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _tzz: KMockContract.SyncFunProxy&lt;Any?, () -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_tzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _uzz: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_uzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _xssWithZTAny: KMockContract.SyncFunProxy&lt;Any, (Any?) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_xssWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedGenericMock.kt$SharedGenericMultiMock$public val _xssWithZTAnyRSequenceRCharSequence: KMockContract.SyncFunProxy&lt;Unit, (Any?, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.SharedGenericMultiMock#_xssWithZTAnyRSequenceRCharSequence", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$private val __spyOn: MultiMock? = spyOn</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _doInsideReceiver: KMockContract.SyncFunProxy&lt;Int, (AnythingElse.SomethingInside) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_doInsideReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _doNothingElse: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_doNothingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _doNothingElseReceiver: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_doNothingElseReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _doNothingReceiverWithTAny: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_doNothingReceiverWithTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _doNothingReceiverWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_doNothingReceiverWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;Unit, (SomethingElse&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _doSomethingElseReceiverWithSomethingElse: KMockContract.SyncFunProxy&lt;List&lt;Any&gt;, (SomethingElse&lt;Any&gt;) -&gt; List&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_doSomethingElseReceiverWithSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _doSomethingElseReceiverWithZTAny: KMockContract.SyncFunProxy&lt;KMockTypeParameter1, (Any?) -&gt; KMockTypeParameter1&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_doSomethingElseReceiverWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _doSomethingReceiver: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_doSomethingReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _equalsReceiver: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_equalsReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _extensionGetter: KMockContract.SyncFunProxy&lt;Int, (Properties&lt;*&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_extensionGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _extensionSetter: KMockContract.SyncFunProxy&lt;Unit, (Properties&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_extensionSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _getOtherThing: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_getOtherThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _iDo: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_iDo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _insideGetter: KMockContract.SyncFunProxy&lt;Int, (AnythingElse.SomethingInside) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_insideGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _mutabor: KMockContract.SyncFunProxy&lt;Unit, (Methods&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_mutabor", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _mutaborReceiver: KMockContract.SyncFunProxy&lt;Int, (Methods&lt;*&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_mutaborReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _myThing: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("multi.ReceiverMultiMock#_myThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _nothingGetterWithTKMockTypeParameter0: KMockContract.SyncFunProxy&lt;KMockTypeParameter0, (KMockTypeParameter0) -&gt; KMockTypeParameter0&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_nothingGetterWithTKMockTypeParameter0", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _nothingGetterWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_nothingGetterWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _nothingSetterWithTKMockTypeParameter0: KMockContract.SyncFunProxy&lt;Unit, (KMockTypeParameter0) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_nothingSetterWithTKMockTypeParameter0", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _nothingSetterWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_nothingSetterWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _otherThingGetter: KMockContract.SyncFunProxy&lt;String, (KMockTypeParameter0) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_otherThingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _otherThingSetter: KMockContract.SyncFunProxy&lt;Unit, (KMockTypeParameter0) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_otherThingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _thingGetter: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_thingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _thingSetter: KMockContract.SyncFunProxy&lt;Unit, (Something) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_thingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _thingsGetter: KMockContract.SyncFunProxy&lt;List&lt;Any&gt;, (SomethingElse&lt;Any&gt;) -&gt; List&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_thingsGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedReceiverMock.kt$ReceiverMultiMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.ReceiverMultiMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$CommonMultiMock$private val __spyOn: MultiMock? = spyOn</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$CommonMultiMock$public val _anything: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("multi.CommonMultiMock#_anything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$CommonMultiMock$public val _doAnything: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.CommonMultiMock#_doAnything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$CommonMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.CommonMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$CommonMultiMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.CommonMultiMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$CommonMultiMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("multi.CommonMultiMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$CommonMultiMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.CommonMultiMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$CommonMultiMock$public val _something: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("multi.CommonMultiMock#_something", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$CommonMultiMock$public val _somethingElse: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("multi.CommonMultiMock#_somethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$CommonMultiMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.CommonMultiMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$PlatformMultiMock$private val __spyOn: MultiMock? = spyOn</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$PlatformMultiMock$public val _anything: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("multi.PlatformMultiMock#_anything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$PlatformMultiMock$public val _doAnything: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformMultiMock#_doAnything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$PlatformMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$PlatformMultiMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformMultiMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$PlatformMultiMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformMultiMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$PlatformMultiMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformMultiMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$PlatformMultiMock$public val _something: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("multi.PlatformMultiMock#_something", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$PlatformMultiMock$public val _somethingElse: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("multi.PlatformMultiMock#_somethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$PlatformMultiMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.PlatformMultiMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$SharedMultiMock$private val __spyOn: MultiMock? = spyOn</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$SharedMultiMock$public val _anything: KMockContract.PropertyProxy&lt;Any&gt; = ProxyFactory.createPropertyProxy("multi.SharedMultiMock#_anything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$SharedMultiMock$public val _doAnything: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("multi.SharedMultiMock#_doAnything", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$SharedMultiMock$public val _doSomething: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.SharedMultiMock#_doSomething", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$SharedMultiMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.SharedMultiMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$SharedMultiMock$public val _equals: KMockContract.SyncFunProxy&lt;Boolean, (Any?) -&gt; Boolean&gt; = ProxyFactory.createSyncFunProxy("multi.SharedMultiMock#_equals", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$SharedMultiMock$public val _hashCode: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("multi.SharedMultiMock#_hashCode", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$SharedMultiMock$public val _something: KMockContract.PropertyProxy&lt;Int&gt; = ProxyFactory.createPropertyProxy("multi.SharedMultiMock#_something", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$SharedMultiMock$public val _somethingElse: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("multi.SharedMultiMock#_somethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SpiedRegularMock.kt$SharedMultiMock$public val _toString: KMockContract.SyncFunProxy&lt;String, () -&gt; String&gt; = ProxyFactory.createSyncFunProxy("multi.SharedMultiMock#_toString", collector = collector, freeze = freeze, ignorableForVerification = true)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _barWithAlias199: KMockContract.SyncFunProxy&lt;Unit, (Alias199&lt;String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_barWithAlias199", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _barWithLongTAlias199s: KMockContract.SyncFunProxy&lt;Alias199&lt;out Alias97&lt;Alias93&lt;Int&gt;&gt;&gt;, (Long, Array&lt;out Alias199&lt;out Alias97&lt;Alias93&lt;Int&gt;&gt;&gt;&gt;) -&gt; Alias199&lt;out Alias97&lt;Alias93&lt;Int&gt;&gt;&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_barWithLongTAlias199s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _barWithTAlias199s: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Alias199&lt;String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_barWithTAlias199s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _barWithTAlias200s: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Alias200&lt;Alias33, out Alias97&lt;Alias93&lt;Int&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_barWithTAlias200s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doAnythingElseWithAlias31Alias33: KMockContract.SyncFunProxy&lt;Unit, (Alias31, Alias33) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_doAnythingElseWithAlias31Alias33", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doAnythingElseWithAlias97: KMockContract.SyncFunProxy&lt;Unit, (Alias97&lt;Alias97&lt;Alias31&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_doAnythingElseWithAlias97", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doInsideReceiver: KMockContract.SyncFunProxy&lt;Int, (AnythingElse.SomethingInside) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.InheritedMock#_doInsideReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doNothingElse: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.InheritedMock#_doNothingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doNothingElseReceiver: KMockContract.SyncFunProxy&lt;Unit, (Any, Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.InheritedMock#_doNothingElseReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doNothingReceiverWithTAny: KMockContract.AsyncFunProxy&lt;Unit, suspend (Any) -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.methodreceiver.InheritedMock#_doNothingReceiverWithTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doNothingReceiverWithTSomethingTComparable: KMockContract.AsyncFunProxy&lt;Unit, suspend (Any) -&gt; Unit&gt; = ProxyFactory.createAsyncFunProxy("mock.template.methodreceiver.InheritedMock#_doNothingReceiverWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doOtherThing: KMockContract.SyncFunProxy&lt;Unit, (Alias97&lt;Alias97&lt;Alias31&gt;&gt;, Comparable&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_doOtherThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doSomethingElse: KMockContract.SyncFunProxy&lt;Unit, (SomethingElse&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.InheritedMock#_doSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doSomethingElseReceiverWithSomethingElse: KMockContract.SyncFunProxy&lt;List&lt;Any&gt;, (SomethingElse&lt;Any&gt;) -&gt; List&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.InheritedMock#_doSomethingElseReceiverWithSomethingElse", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doSomethingElseReceiverWithZTAny: KMockContract.SyncFunProxy&lt;P, (Any?) -&gt; P&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.InheritedMock#_doSomethingElseReceiverWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doSomethingElseWithTAlias31LAlias33: KMockContract.SyncFunProxy&lt;Unit, (Alias31, Alias33) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_doSomethingElseWithTAlias31LAlias33", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doSomethingElseWithTAlias97: KMockContract.SyncFunProxy&lt;Unit, (Alias97&lt;Any?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_doSomethingElseWithTAlias97", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doSomethingReceiver: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.InheritedMock#_doSomethingReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doSomethingWithAlias97: KMockContract.SyncFunProxy&lt;Any, (Alias97&lt;String&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_doSomethingWithAlias97", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _doSomethingWithAlias97Alias33Alias31: KMockContract.SyncFunProxy&lt;Any, ( Alias97&lt;Any&gt;, Alias33, Alias31, ) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_doSomethingWithAlias97Alias33Alias31", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _equalsReceiver: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.InheritedMock#_equalsReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _extensionGetter: KMockContract.SyncFunProxy&lt;Int, (Platform&lt;*&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_extensionGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _extensionSetter: KMockContract.SyncFunProxy&lt;Unit, (Platform&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_extensionSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _fooWithAnyAlias93: KMockContract.SyncFunProxy&lt;Unit, (Any, Alias93&lt;String&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_fooWithAnyAlias93", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _fooWithCharAlias93s: KMockContract.SyncFunProxy&lt;Unit, (Char, Array&lt;out Alias93&lt;IntArray&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_fooWithCharAlias93s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _fooWithIntAlias93s: KMockContract.SyncFunProxy&lt;Unit, (Int, Array&lt;out Alias93&lt;out String&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_fooWithIntAlias93s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _fooWithLongTAlias93s: KMockContract.SyncFunProxy&lt;Unit, (Long, Array&lt;out Alias93&lt;out Alias97&lt;Alias93&lt;Int&gt;&gt;&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_fooWithLongTAlias93s", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _fooWithTAlias93: KMockContract.SyncFunProxy&lt;Unit, (Alias93&lt;Any?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_fooWithTAlias93", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _getOtherThing: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_getOtherThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _iDo: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.InheritedMock#_iDo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _insideGetter: KMockContract.SyncFunProxy&lt;Int, (AnythingElse.SomethingInside) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_insideGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _mutabor: KMockContract.SyncFunProxy&lt;Unit, (Platform&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.InheritedMock#_mutabor", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _mutaborReceiver: KMockContract.SyncFunProxy&lt;Int, (Platform&lt;*&gt;) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.methodreceiver.InheritedMock#_mutaborReceiver", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _myThing: KMockContract.PropertyProxy&lt;String&gt; = ProxyFactory.createPropertyProxy("mock.template.propertyreceiver.InheritedMock#_myThing", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _nothingGetterWithTR: KMockContract.SyncFunProxy&lt;R, (R) -&gt; R&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_nothingGetterWithTR", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _nothingGetterWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Any, (Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_nothingGetterWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _nothingSetterWithTR: KMockContract.SyncFunProxy&lt;Unit, (R) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_nothingSetterWithTR", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _nothingSetterWithTSomethingTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_nothingSetterWithTSomethingTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _otherThingGetter: KMockContract.SyncFunProxy&lt;String, (R) -&gt; String&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_otherThingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _otherThingSetter: KMockContract.SyncFunProxy&lt;Unit, (R) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_otherThingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _prop: KMockContract.PropertyProxy&lt;Alias93&lt;String&gt;&gt; = ProxyFactory.createPropertyProxy("mock.template.typealiaz.InheritedMock#_prop", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _run: KMockContract.SyncFunProxy&lt;Alias31, (R) -&gt; Alias31&gt; = ProxyFactory.createSyncFunProxy("mock.template.typealiaz.InheritedMock#_run", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _thingGetter: KMockContract.SyncFunProxy&lt;Int, (Something) -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_thingGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _thingSetter: KMockContract.SyncFunProxy&lt;Unit, (Something) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_thingSetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperType.kt$InheritedMock$public val _thingsGetter: KMockContract.SyncFunProxy&lt;List&lt;Any&gt;, (SomethingElse&lt;Any&gt;) -&gt; List&lt;Any&gt;&gt; = ProxyFactory.createSyncFunProxy("mock.template.propertyreceiver.InheritedMock#_thingsGetter", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _buzz: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out List&lt;Array&lt;Int&gt;&gt;?&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_buzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _lolWithZKAnyTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any?, Comparable&lt;Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_lolWithZKAnyTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _lolWithZKAnyTComparables: KMockContract.SyncFunProxy&lt;Unit, (Any?, Array&lt;out Comparable&lt;Any&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_lolWithZKAnyTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _lolWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_lolWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _lolWithZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_lolWithZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _narvWithArrays: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Array&lt;out Any&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_narvWithArrays", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _narvWithIntArrays: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out IntArray&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_narvWithIntArrays", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _narvWithLs: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out L&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_narvWithLs", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _ooWithAnyCharArray: KMockContract.SyncFunProxy&lt;Any, (Any, CharArray) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_ooWithAnyCharArray", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _ooWithAnyInts: KMockContract.SyncFunProxy&lt;Any, (Any?, IntArray) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_ooWithAnyInts", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _ooWithAnyRRRs: KMockContract.SyncFunProxy&lt;Any, (Any, Array&lt;out RRR&lt;*&gt;&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_ooWithAnyRRRs", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _ooWithAnyZTAnys: KMockContract.SyncFunProxy&lt;Any, (Any, Array&lt;*&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_ooWithAnyZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _ooWithIntAnys: KMockContract.SyncFunProxy&lt;Any, (Int, Array&lt;out Any&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_ooWithIntAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _pptWithTCharSequenceTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Any&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_pptWithTCharSequenceTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _pptWithTComparables: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;out Comparable&lt;Any&gt;&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_pptWithTComparables", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _pptWithZTAny: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_pptWithZTAny", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _pptWithZTAnys: KMockContract.SyncFunProxy&lt;Unit, (Array&lt;*&gt;) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_pptWithZTAnys", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _pptWithZTCharSequenceZTComparable: KMockContract.SyncFunProxy&lt;Unit, (Any?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_pptWithZTCharSequenceZTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _pptWithZTComparable: KMockContract.SyncFunProxy&lt;Unit, (Comparable&lt;Any?&gt;?) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_pptWithZTComparable", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SuperTyped.kt$SuperTypedMock$public val _roo: KMockContract.SyncFunProxy&lt;Any, (Any, Array&lt;out RRR&lt;*&gt;&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.generic.SuperTypedMock#_roo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SyncFun.kt$SyncFunMock$public val _bar: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.SyncFunMock#_bar", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SyncFun.kt$SyncFunMock$public val _fol: KMockContract.SyncFunProxy&lt;Any, () -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.SyncFunMock#_fol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SyncFun.kt$SyncFunMock$public val _foo: KMockContract.SyncFunProxy&lt;Any, (Int, Any) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.SyncFunMock#_foo", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SyncFun.kt$SyncFunMock$public val _izz: KMockContract.SyncFunProxy&lt;Any, (Array&lt;out Any&gt;) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.SyncFunMock#_izz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SyncFun.kt$SyncFunMock$public val _lol: KMockContract.SyncFunProxy&lt;Any?, (Any?) -&gt; Any?&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.SyncFunMock#_lol", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SyncFun.kt$SyncFunMock$public val _ozz: KMockContract.SyncFunProxy&lt;Any, (IntArray) -&gt; Any&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.SyncFunMock#_ozz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SyncFun.kt$SyncFunMock$public val _tuz: KMockContract.SyncFunProxy&lt;Int, () -&gt; Int&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.SyncFunMock#_tuz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SyncFun.kt$SyncFunMock$public val _tzz: KMockContract.SyncFunProxy&lt;T, () -&gt; T&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.SyncFunMock#_tzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SyncFun.kt$SyncFunMock$public val _uz: KMockContract.SyncFunProxy&lt;L, () -&gt; L&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.SyncFunMock#_uz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SyncFun.kt$SyncFunMock$public val _uzz: KMockContract.SyncFunProxy&lt;Unit, () -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.SyncFunMock#_uzz", collector = collector, freeze = freeze)</ID>
    <ID>VariableNaming:SyncFun.kt$SyncFunMock$public val _veryLongMethodNameWithABunchOfVariables: KMockContract.SyncFunProxy&lt;Unit, ( Int, Int, Int, Int, Int, Int, Int, Int, Int, Int, ) -&gt; Unit&gt; = ProxyFactory.createSyncFunProxy("mock.template.access.SyncFunMock#_veryLongMethodNameWithABunchOfVariables", collector = collector, freeze = freeze)</ID>
    <ID>WrongEqualsTypeParameter:NoBuildIns.kt$NoBuildInsMock$public override fun equals(other: Int): Unit</ID>
  </CurrentIssues>
</SmellBaseline>
