<?xml version="1.0" ?>
<SmellBaseline>
  <ManuallySuppressedIssues></ManuallySuppressedIssues>
  <CurrentIssues>
    <ID>CyclomaticComplexMethod:KMockGenerator.kt$KMockGenerator$private fun buildMock( mockName: String, enableSpy: Boolean, parents: TemplateMultiSource?, template: KSClassDeclaration, generics: Map&lt;String, List&lt;KSTypeReference&gt;&gt;?, relaxer: Relaxer?, ): TypeSpec</ID>
    <ID>CyclomaticComplexMethod:KMockOptionExtractor.kt$KMockOptionExtractor$override fun convertOptions( kspRawOptions: Map&lt;String, String&gt;, ): Options</ID>
    <ID>CyclomaticComplexMethod:eq.kt$eq$override fun matches(actual: Any?): Boolean</ID>
    <ID>FunctionNaming:SampleComposable.kt$@Composable fun SampleComposable(viewModel: AppContract.SampleViewModel)</ID>
    <ID>FunctionNaming:SampleComposablePreview.kt$@Preview @Composable fun SampleComposablePreview()</ID>
    <ID>LargeClass:KMockProxyAccessMethodGenerator.kt$KMockProxyAccessMethodGenerator : ProxyAccessMethodGenerator</ID>
    <ID>LongMethod:KMockGenerator.kt$KMockGenerator$private fun buildMock( mockName: String, enableSpy: Boolean, parents: TemplateMultiSource?, template: KSClassDeclaration, generics: Map&lt;String, List&lt;KSTypeReference&gt;&gt;?, relaxer: Relaxer?, ): TypeSpec</ID>
    <ID>LongMethod:KMockOptionExtractor.kt$KMockOptionExtractor$override fun convertOptions( kspRawOptions: Map&lt;String, String&gt;, ): Options</ID>
    <ID>LongMethod:KMockProcessorProvider.kt$KMockProcessorProvider$override fun create(environment: SymbolProcessorEnvironment): SymbolProcessor</ID>
    <ID>LongMethod:ParameterTypeMapping.kt$private fun KSType.mapParameterType( visited: Set&lt;String&gt;, classScope: Set&lt;String&gt;, functionScope: Set&lt;String&gt;, resolved: Map&lt;String, GenericDeclaration&gt;, typeArguments: List&lt;KSTypeArgument&gt;, rootNullability: Boolean, typeParameterResolver: TypeParameterResolver, ): TypeName</ID>
    <ID>LongParameterList:Hint.kt$( type0: KClass&lt;Type0&gt; = Type0::class, type1: KClass&lt;Type1&gt; = Type1::class, type2: KClass&lt;Type2&gt; = Type2::class, type3: KClass&lt;Type3&gt; = Type3::class, type4: KClass&lt;Type4&gt; = Type4::class, type5: KClass&lt;Type5&gt; = Type5::class, type6: KClass&lt;Type6&gt; = Type6::class, type7: KClass&lt;Type7&gt; = Type7::class, type8: KClass&lt;Type8&gt; = Type8::class, type9: KClass&lt;Type9&gt; = Type9::class, )</ID>
    <ID>LongParameterList:Hint.kt$( type0: KClass&lt;Type0&gt; = Type0::class, type1: KClass&lt;Type1&gt; = Type1::class, type2: KClass&lt;Type2&gt; = Type2::class, type3: KClass&lt;Type3&gt; = Type3::class, type4: KClass&lt;Type4&gt; = Type4::class, type5: KClass&lt;Type5&gt; = Type5::class, type6: KClass&lt;Type6&gt; = Type6::class, type7: KClass&lt;Type7&gt; = Type7::class, type8: KClass&lt;Type8&gt; = Type8::class, type9: KClass&lt;Type9&gt; = Type9::class, type10: KClass&lt;Type10&gt; = Type10::class, )</ID>
    <ID>LongParameterList:Hint.kt$( type0: KClass&lt;Type0&gt; = Type0::class, type1: KClass&lt;Type1&gt; = Type1::class, type2: KClass&lt;Type2&gt; = Type2::class, type3: KClass&lt;Type3&gt; = Type3::class, type4: KClass&lt;Type4&gt; = Type4::class, type5: KClass&lt;Type5&gt; = Type5::class, type6: KClass&lt;Type6&gt; = Type6::class, type7: KClass&lt;Type7&gt; = Type7::class, type8: KClass&lt;Type8&gt; = Type8::class, type9: KClass&lt;Type9&gt; = Type9::class, type10: KClass&lt;Type10&gt; = Type10::class, type11: KClass&lt;Type11&gt; = Type11::class, )</ID>
    <ID>LongParameterList:Hint.kt$( type0: KClass&lt;Type0&gt; = Type0::class, type1: KClass&lt;Type1&gt; = Type1::class, type2: KClass&lt;Type2&gt; = Type2::class, type3: KClass&lt;Type3&gt; = Type3::class, type4: KClass&lt;Type4&gt; = Type4::class, type5: KClass&lt;Type5&gt; = Type5::class, type6: KClass&lt;Type6&gt; = Type6::class, type7: KClass&lt;Type7&gt; = Type7::class, type8: KClass&lt;Type8&gt; = Type8::class, type9: KClass&lt;Type9&gt; = Type9::class, type10: KClass&lt;Type10&gt; = Type10::class, type11: KClass&lt;Type11&gt; = Type11::class, type12: KClass&lt;Type12&gt; = Type12::class, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, arg10: Arg10, arg11: Arg11, arg12: Arg12, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, arg10: Arg10, arg11: Arg11, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, arg10: Arg10, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.AsyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, suspend () -&gt; ReturnValue&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, arg10: Arg10, arg11: Arg11, arg12: Arg12, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, arg10: Arg10, arg11: Arg11, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, arg10: Arg10, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, arg9: Arg9, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockContract.kt$KMockContract.SyncFunProxy$( arg0: Arg0, arg1: Arg1, arg2: Arg2, arg3: Arg3, arg4: Arg4, arg5: Arg5, arg6: Arg6, arg7: Arg7, arg8: Arg8, nonIntrusiveHook: NonIntrusiveFunConfigurator&lt;ReturnValue, Function0&lt;ReturnValue&gt;&gt;.() -&gt; Unit = {}, )</ID>
    <ID>LongParameterList:KMockFactoryEntryPointGenerator.kt$KMockFactoryEntryPointGenerator$( private val isKmp: Boolean, private val rootPackage: String, private val spyContainer: SpyContainer, private val spiesOnly: Boolean, private val utils: MockFactoryGeneratorUtil, private val genericResolver: GenericResolver, private val codeGenerator: KmpCodeGenerator, )</ID>
    <ID>LongParameterList:KMockFactoryGenerator.kt$KMockFactoryGenerator$( private val logger: KSPLogger, private val rootPackage: String, private val isKmp: Boolean, private val spyContainer: SpyContainer, private val spiesOnly: Boolean, private val nonGenericGenerator: MockFactoryWithoutGenerics, private val genericGenerator: MockFactoryWithGenerics, private val multiInterfaceGenerator: MockFactoryMultiInterface, private val utils: MockFactoryGeneratorUtil, private val codeGenerator: CodeGenerator, )</ID>
    <ID>LongParameterList:KMockGenerator.kt$KMockGenerator$( private val logger: KSPLogger, freezeOnDefault: Boolean, private val enableProxyAccessMethodGenerator: Boolean, private val spyContainer: SpyContainer, private val useBuildInProxiesOn: Set&lt;String&gt;, private val codeGenerator: KmpCodeGenerator, private val genericsResolver: GenericResolver, private val nameCollector: ProxyNameCollector, private val parentFinder: ParentFinder, private val propertyGenerator: PropertyGenerator, private val methodGenerator: MethodGenerator, private val buildInGenerator: BuildInMethodGenerator, private val receiverGenerator: ReceiverGenerator, private val proxyAccessMethodGeneratorFactory: ProxyAccessMethodGeneratorFactory, private val preventResolvingOfAliases: Set&lt;String&gt;, )</ID>
    <ID>LongParameterList:KMockProcessor.kt$KMockProcessor$( private val logger: KSPLogger, private val isKmp: Boolean, private val codeGenerator: KmpCodeGenerator, private val interfaceGenerator: MultiInterfaceBinder, private val mockGenerator: MockGenerator, private val factoryGenerator: MockFactoryGenerator, private val entryPointGenerator: MockFactoryEntryPointGenerator, private val multiSourceAggregator: MultiSourceAggregator, private val singleSourceAggregator: SingleSourceAggregator, private val relaxationAggregator: RelaxationAggregator, private val filter: SourceFilter, )</ID>
    <ID>LongParameterList:KMockReceiverGenerator.kt$KMockReceiverGenerator$( proxyInfo: ProxyInfo, generics: Map&lt;String, List&lt;KSTypeReference&gt;&gt;?, isSuspending: Boolean, enableSpy: Boolean, receiverInfo: MemberArgumentTypeInfo, arguments: Array&lt;MemberArgumentTypeInfo&gt;, typeParameter: List&lt;TypeName&gt;, returnType: MemberReturnTypeInfo, typeResolver: TypeParameterResolver, relaxer: Relaxer?, )</ID>
    <ID>MagicNumber:Dangerfile.df.kts$1000</ID>
    <ID>MagicNumber:Dangerfile.df.kts$20</ID>
    <ID>MagicNumber:Dangerfile.df.kts$2000</ID>
    <ID>MagicNumber:Dangerfile.df.kts$500</ID>
    <ID>MagicNumber:KMockCodeGenerator.kt$KMockCodeGenerator$4</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.FunProxyInvocationType.RETURN_VALUE$4</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.FunProxyInvocationType.RETURN_VALUES$5</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.FunProxyInvocationType.SIDE_EFFECT$6</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.FunProxyInvocationType.SIDE_EFFECT_CHAIN$7</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.FunProxyInvocationType.SPY$8</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.FunProxyInvocationType.THROWS_MANY$3</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.PropertyProxyInvocationType.SIDE_EFFECT$4</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.PropertyProxyInvocationType.SPY$5</ID>
    <ID>MagicNumber:KMockContract.kt$KMockContract.PropertyProxyInvocationType.VALUES$3</ID>
    <ID>MagicNumber:KMockMultiSourceAggregator.kt$KMockMultiSourceAggregator$3</ID>
    <ID>MagicNumber:KMockNonIntrusiveInvocationGenerator.kt$KMockNonIntrusiveInvocationGenerator$4</ID>
    <ID>MagicNumber:KMockPublishingConfiguration.kt$KMockPublishingConfiguration$2022</ID>
    <ID>MagicNumber:build.gradle.kts$0.90</ID>
    <ID>MagicNumber:build.gradle.kts$0.95</ID>
    <ID>MagicNumber:build.gradle.kts$21</ID>
    <ID>MagicNumber:build.gradle.kts$30</ID>
    <ID>MaxLineLength:AnnotationFilter.kt$AnnotationFilter$((annotation.arguments[0].value as List&lt;*&gt;).size == 0 || (annotation.arguments[0].value as List&lt;*&gt;).random() is KSType)</ID>
    <ID>MaxLineLength:AnnotationFilter.kt$AnnotationFilter$((annotation.arguments[1].value as List&lt;*&gt;).size == 0 || (annotation.arguments[1].value as List&lt;*&gt;).random() is KSType)</ID>
    <ID>MaxLineLength:AsyncFunProxy.kt$AsyncFunProxy$(retrieveSideEffect() as suspend (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9) -&gt; ReturnValue)</ID>
    <ID>MaxLineLength:AsyncFunProxy.kt$AsyncFunProxy$(retrieveSideEffect() as suspend (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10) -&gt; ReturnValue)</ID>
    <ID>MaxLineLength:AsyncFunProxy.kt$AsyncFunProxy$(retrieveSideEffect() as suspend (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11) -&gt; ReturnValue)</ID>
    <ID>MaxLineLength:AsyncFunProxy.kt$AsyncFunProxy$(retrieveSideEffect() as suspend (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12) -&gt; ReturnValue)</ID>
    <ID>MaxLineLength:AsyncFunProxy.kt$AsyncFunProxy$(sideEffect as suspend (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11) -&gt; ReturnValue)</ID>
    <ID>MaxLineLength:AsyncFunProxy.kt$AsyncFunProxy$(sideEffect as suspend (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12) -&gt; ReturnValue)</ID>
    <ID>MaxLineLength:Dangerfile.df.kts$val</ID>
    <ID>MaxLineLength:Hint.kt$Hint10$public data</ID>
    <ID>MaxLineLength:Hint.kt$Hint11$public data</ID>
    <ID>MaxLineLength:Hint.kt$Hint12$public data</ID>
    <ID>MaxLineLength:Hint.kt$Hint13$public data</ID>
    <ID>MaxLineLength:Hint.kt$Hint8$public data</ID>
    <ID>MaxLineLength:Hint.kt$Hint9$public data</ID>
    <ID>MaxLineLength:Hint.kt$public inline</ID>
    <ID>MaxLineLength:KMockBuildInMethodGenerator.kt$KMockBuildInMethodGenerator$"${PROXY_FACTORY.simpleName}.$CREATE_SYNC_PROXY(%S, $COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, $IGNORE_ARGUMENT = true)"</ID>
    <ID>MaxLineLength:KMockFactoryMultiInterfaceGenerator.kt$KMockFactoryMultiInterfaceGenerator.Companion$private const val MULTI_INTERFACE_ARGUMENTS = "$COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, $SPY_ARGUMENT = $SPY_ARGUMENT"</ID>
    <ID>MaxLineLength:KMockFactoryWithoutGenerics.kt$KMockFactoryWithoutGenerics.Companion$private const val ARGUMENTS_WITHOUT_RELAXER_AND_SPY = "$COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $UNIT_RELAXER_ARGUMENT = $UNIT_RELAXER_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT"</ID>
    <ID>MaxLineLength:KMockFactoryWithoutGenerics.kt$KMockFactoryWithoutGenerics.Companion$private const val ARGUMENTS_WITHOUT_SPY = "$COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $RELAXER_ARGUMENT = $RELAXER_ARGUMENT, $UNIT_RELAXER_ARGUMENT = $UNIT_RELAXER_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT"</ID>
    <ID>MaxLineLength:KMockGenerator.kt$KMockGenerator.Companion$private val UNUSED_PARAMETER = AnnotationSpec.builder(Suppress::class).addMember("%S", "UNUSED_PARAMETER").build()</ID>
    <ID>MaxLineLength:KMockMultiSourceAggregator.kt$KMockMultiSourceAggregator$return</ID>
    <ID>MaxLineLength:KMockPropertyGenerator.kt$KMockPropertyGenerator.Companion$private val template = "${PROXY_FACTORY.simpleName}.$CREATE_PROPERTY_PROXY(%S, $COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT)"</ID>
    <ID>MaxLineLength:KMockProxyAccessMethodGenerator.kt$KMockProxyAccessMethodGenerator.Companion$private const val REFERENCE_STORE_ACCESS = "return ($REFERENCE_STORE[%P] ?: throw IllegalStateException(%P)) as %L"</ID>
    <ID>MaxLineLength:KMockSingleSourceAggregator.kt$KMockSingleSourceAggregator$return</ID>
    <ID>MaxLineLength:MethodGeneratorHelper.kt$MethodGeneratorHelper$"${PROXY_FACTORY.simpleName}.%L(%S, $COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT)"</ID>
    <ID>MaxLineLength:ProcessorContract.kt$ProcessorContract.Companion$const val ARGUMENTS_WITHOUT_RELAXER = "$COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $UNIT_RELAXER_ARGUMENT = $UNIT_RELAXER_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, $SPY_ARGUMENT = $SPY_ARGUMENT"</ID>
    <ID>MaxLineLength:ProcessorContract.kt$ProcessorContract.Companion$const val ARGUMENTS_WITH_RELAXER = "$COLLECTOR_ARGUMENT = $COLLECTOR_ARGUMENT, $RELAXER_ARGUMENT = $RELAXER_ARGUMENT, $UNIT_RELAXER_ARGUMENT = $UNIT_RELAXER_ARGUMENT, $FREEZE_ARGUMENT = $FREEZE_ARGUMENT, $SPY_ARGUMENT = $SPY_ARGUMENT"</ID>
    <ID>MaxLineLength:ProcessorContract.kt$ProcessorContract.Companion$const val UNKNOWN_INTERFACE = "throw RuntimeException(\"Unknown Interface \${$KMOCK_FACTORY_TYPE_NAME::class.simpleName}.\")"</ID>
    <ID>MaxLineLength:SyncFunProxy.kt$SyncFunProxy$(retrieveSideEffect() as (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11) -&gt; ReturnValue)</ID>
    <ID>MaxLineLength:SyncFunProxy.kt$SyncFunProxy$(retrieveSideEffect() as (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12) -&gt; ReturnValue)</ID>
    <ID>MaxLineLength:SyncFunProxy.kt$SyncFunProxy$(sideEffect as (Arg0, Arg1, Arg2, Arg3, Arg4, Arg5, Arg6, Arg7, Arg8, Arg9, Arg10, Arg11, Arg12) -&gt; ReturnValue)</ID>
    <ID>NestedBlockDepth:KMockGenerics.kt$KMockGenerics$override fun mapProxyGenerics( classScope: Map&lt;String, List&lt;TypeName&gt;&gt;?, generics: Map&lt;String, List&lt;KSTypeReference&gt;&gt;, typeParameterResolver: TypeParameterResolver, ): Map&lt;String, GenericDeclaration&gt;</ID>
    <ID>SpreadOperator:FunSpecExtensions.kt$( argument.argumentName, argument.methodTypeName, *vararged, )</ID>
    <ID>SpreadOperator:KMockMultiSourceAggregator.kt$KMockMultiSourceAggregator$(shared, *customShared)</ID>
    <ID>SpreadOperator:KMockSingleSourceAggregator.kt$KMockSingleSourceAggregator$(shared, *customShared)</ID>
    <ID>SwallowedException:KmpSourceSetsConfigurator.kt$KmpSourceSetsConfigurator$e: Throwable</ID>
    <ID>SwallowedException:VerificationChain.kt$VerificationChain$e: AssertionError</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:FunProxy.kt$FunProxy$NullPointerException()</ID>
    <ID>ThrowingExceptionsWithoutMessageOrCause:PropertyProxy.kt$PropertyProxy$NullPointerException()</ID>
    <ID>TooGenericExceptionCaught:KmpSourceSetsConfigurator.kt$KmpSourceSetsConfigurator$e: Throwable</ID>
    <ID>TooManyFunctions:AsyncFunProxy.kt$AsyncFunProxy&lt;ReturnValue, SideEffect : Function&lt;ReturnValue&gt;&gt; : AsyncFunProxyFunProxy</ID>
    <ID>TooManyFunctions:ExampleContract.kt$ExampleContract$SampleUselessObject</ID>
    <ID>TooManyFunctions:FunProxy.kt$FunProxy&lt;ReturnValue, SideEffect : Function&lt;ReturnValue&gt;&gt; : FunProxy</ID>
    <ID>TooManyFunctions:Hint.kt$tech.antibytes.kmock.Hint.kt</ID>
    <ID>TooManyFunctions:KMockCodeGenerator.kt$KMockCodeGenerator : KmpCodeGenerator</ID>
    <ID>TooManyFunctions:KMockContract.kt$KMockContract$AsyncFunProxy&lt;ReturnValue, SideEffect : Function&lt;ReturnValue&gt;&gt; : FunProxy</ID>
    <ID>TooManyFunctions:KMockContract.kt$KMockContract$SyncFunProxy&lt;ReturnValue, SideEffect : Function&lt;ReturnValue&gt;&gt; : FunProxy</ID>
    <ID>TooManyFunctions:KMockFactoryEntryPointGenerator.kt$KMockFactoryEntryPointGenerator : MockFactoryEntryPointGenerator</ID>
    <ID>TooManyFunctions:KMockFactoryGeneratorUtil.kt$KMockFactoryGeneratorUtil : MockFactoryGeneratorUtil</ID>
    <ID>TooManyFunctions:KMockFactoryMultiInterfaceGenerator.kt$KMockFactoryMultiInterfaceGenerator : MockFactoryMultiInterface</ID>
    <ID>TooManyFunctions:KMockFactoryWithGenerics.kt$KMockFactoryWithGenerics : MockFactoryWithGenerics</ID>
    <ID>TooManyFunctions:KMockFactoryWithoutGenerics.kt$KMockFactoryWithoutGenerics : MockFactoryWithoutGenerics</ID>
    <ID>TooManyFunctions:KMockGenerator.kt$KMockGenerator : MockGenerator</ID>
    <ID>TooManyFunctions:KMockGenerics.kt$KMockGenerics : GenericResolver</ID>
    <ID>TooManyFunctions:KMockMultiSourceAggregator.kt$KMockMultiSourceAggregator : MultiSourceAggregatorBaseSourceAggregator</ID>
    <ID>TooManyFunctions:KMockNonIntrusiveInvocationGenerator.kt$KMockNonIntrusiveInvocationGenerator : NonIntrusiveInvocationGenerator</ID>
    <ID>TooManyFunctions:KMockProcessor.kt$KMockProcessor : SymbolProcessor</ID>
    <ID>TooManyFunctions:KMockProxyAccessMethodGenerator.kt$KMockProxyAccessMethodGenerator : ProxyAccessMethodGenerator</ID>
    <ID>TooManyFunctions:KMockProxyNameSelector.kt$KMockProxyNameSelector : ProxyNameSelectorProxyNameCollector</ID>
    <ID>TooManyFunctions:KMockReceiverGenerator.kt$KMockReceiverGenerator : ReceiverGenerator</ID>
    <ID>TooManyFunctions:KMockSingleSourceAggregator.kt$KMockSingleSourceAggregator : SingleSourceAggregatorBaseSourceAggregator</ID>
    <ID>TooManyFunctions:ParameterTypeMapping.kt$tech.antibytes.kmock.processor.kotlinpoet.ParameterTypeMapping.kt</ID>
    <ID>TooManyFunctions:PropertyProxy.kt$PropertyProxy&lt;Value&gt; : PropertyProxy</ID>
    <ID>TooManyFunctions:Shared.kt$tech.antibytes.kmock.processor.kotlinpoet.Shared.kt</ID>
    <ID>TooManyFunctions:SyncFunProxy.kt$SyncFunProxy&lt;ReturnValue, SideEffect : Function&lt;ReturnValue&gt;&gt; : SyncFunProxyFunProxy</ID>
    <ID>TooManyFunctions:VerificationAndAssertion.kt$tech.antibytes.kmock.verification.VerificationAndAssertion.kt</ID>
    <ID>TooManyFunctions:VerificationChain.kt$VerificationChain : AssertionChainChainedAssertion</ID>
    <ID>UnnecessaryAbstractClass:BaseSourceAggregator.kt$BaseSourceAggregator$BaseSourceAggregator</ID>
    <ID>UnnecessaryAbstractClass:PublishingBase.kt$PublishingBase$PublishingBase</ID>
    <ID>UnusedPrivateMember:AndroidSampleControllerAutoStubSpec.kt$AndroidSampleControllerAutoStubSpec$private val androidThing = AndroidThingMock()</ID>
    <ID>UnusedPrivateMember:KMockFactoryGenerator.kt$KMockFactoryGenerator$private val logger: KSPLogger</ID>
    <ID>UnusedPrivateMember:KMockGenerator.kt$KMockGenerator$private val logger: KSPLogger</ID>
    <ID>UnusedPrivateMember:KMockMultiInterfaceBinder.kt$KMockMultiInterfaceBinder$private val logger: KSPLogger</ID>
    <ID>UnusedPrivateMember:KMockProcessor.kt$KMockProcessor$private val logger: KSPLogger</ID>
    <ID>UnusedPrivateMember:Relaxed.kt$id: String</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidAndroidTest by getting { dependsOn(concurrentTest) dependencies { implementation(antibytesCatalog.android.test.junit.core) implementation(antibytesCatalog.android.test.junit.ktx) implementation(antibytesCatalog.android.test.compose.junit4) implementation(antibytesCatalog.android.test.espresso.core) implementation(antibytesCatalog.android.test.uiAutomator) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidAndroidTest by getting { dependsOn(concurrentTest) dependencies { implementation(antibytesCatalog.jvm.test.junit.junit4) implementation(antibytesCatalog.jvm.test.kotlin.junit4) implementation(antibytesCatalog.android.test.junit.core) implementation(antibytesCatalog.android.test.junit.ktx) implementation(antibytesCatalog.android.test.compose.junit4) implementation(antibytesCatalog.android.test.espresso.core) implementation(antibytesCatalog.android.test.uiAutomator) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidAndroidTestDebug by getting { kotlin.srcDir("build/generated/ksp/android/androidDebugAndroidTest") }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidAndroidTestRelease by getting { kotlin.srcDir("build/generated/ksp/android/androidReleaseAndroidTest") }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidMain by getting { dependencies { implementation(antibytesCatalog.jvm.kotlin.stdlib.jdk8) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidMain by getting { dependsOn(concurrentMain) dependencies { implementation(antibytesCatalog.jvm.kotlin.stdlib.jdk8) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidTest by getting { dependencies { implementation(antibytesCatalog.android.test.junit.core) implementation(antibytesCatalog.jvm.test.kotlin.junit4) implementation(antibytesCatalog.android.test.robolectric) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val androidTest by getting { dependsOn(concurrentTest) kotlin.srcDir("build/generated/ksp/android/androidTest") dependencies { implementation(antibytesCatalog.jvm.test.junit.runtime) // somehow Gradle gets confused implementation(antibytesCatalog.jvm.test.junit.bom) // somehow Gradle gets confused implementation(antibytesCatalog.jvm.test.junit.junit4) implementation(antibytesCatalog.jvm.test.kotlin.junit4) implementation(antibytesCatalog.android.test.robolectric) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val iosSimulatorArm64Main by getting { dependsOn(iosMain) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val iosSimulatorArm64Test by getting { dependsOn(iosTest) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val iosX64Test by getting { dependsOn(iosTest) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val iosX64Test by getting { kotlin.srcDir("build/generated/ksp/iosX64/iosX64Test") dependsOn(iosTest) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jsMain by getting { dependencies { implementation(antibytesCatalog.js.kotlin.stdlib) implementation(antibytesCatalog.js.kotlinx.nodeJs) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jsTest by getting { dependencies { implementation(antibytesCatalog.js.test.kotlin.core) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jsTest by getting { kotlin.srcDir("build/generated/ksp/js/jsTest") dependencies { implementation(antibytesCatalog.js.test.kotlin.core) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmMain by getting { dependencies { implementation(antibytesCatalog.jvm.kotlin.stdlib.jdk) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmMain by getting { dependsOn(concurrentMain) dependencies { implementation(antibytesCatalog.jvm.kotlin.stdlib.jdk) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmTest by getting { dependencies { implementation(antibytesCatalog.jvm.test.kotlin.core) implementation(antibytesCatalog.jvm.test.junit.junit4) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmTest by getting { dependsOn(concurrentTest) dependencies { implementation(antibytesCatalog.jvm.test.kotlin.core) implementation(antibytesCatalog.jvm.test.junit.junit4) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val jvmTest by getting { kotlin.srcDir("build/generated/ksp/jvm/jvmTest") dependsOn(concurrentTest) dependencies { implementation(antibytesCatalog.jvm.test.kotlin.core) implementation(antibytesCatalog.jvm.test.junit.junit4) } }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val linuxX64Main by getting { dependsOn(otherMain) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val linuxX64Test by getting { dependsOn(otherTest) }</ID>
    <ID>UnusedPrivateMember:build.gradle.kts$val linuxX64Test by getting { kotlin.srcDir("src-gen/generated/ksp/linuxX64/linuxX64Test") dependsOn(otherTest) }</ID>
    <ID>WrongEqualsTypeParameter:NoBuildIns.kt$NoBuildInsMock$public override fun equals(other: Int): Unit</ID>
  </CurrentIssues>
</SmellBaseline>
